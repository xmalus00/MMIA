
cv01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800035c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800035c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d02  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002e8  00000000  00000000  00011086  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00011370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  000113e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005540  00000000  00000000  00011428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000bb3  00000000  00000000  00016968  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0001c43b  00000000  00000000  0001751b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00033956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  000339d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800033c 	.word	0x0800033c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800033c 	.word	0x0800033c

08000108 <main>:

#include <stdio.h>
#include "stm32f0xx.h"

int main(void)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b08d      	sub	sp, #52	; 0x34
 800010c:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;                   //zapnuti hodin
 800010e:	4b3a      	ldr	r3, [pc, #232]	; (80001f8 <main+0xf0>)
 8000110:	695a      	ldr	r2, [r3, #20]
 8000112:	4b39      	ldr	r3, [pc, #228]	; (80001f8 <main+0xf0>)
 8000114:	2180      	movs	r1, #128	; 0x80
 8000116:	0289      	lsls	r1, r1, #10
 8000118:	430a      	orrs	r2, r1
 800011a:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;                 //
 800011c:	2390      	movs	r3, #144	; 0x90
 800011e:	05db      	lsls	r3, r3, #23
 8000120:	681a      	ldr	r2, [r3, #0]
 8000122:	2390      	movs	r3, #144	; 0x90
 8000124:	05db      	lsls	r3, r3, #23
 8000126:	2180      	movs	r1, #128	; 0x80
 8000128:	00c9      	lsls	r1, r1, #3
 800012a:	430a      	orrs	r2, r1
 800012c:	601a      	str	r2, [r3, #0]

	uint8_t pole[32] = {1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1}; //morseovka sos
 800012e:	2108      	movs	r1, #8
 8000130:	000c      	movs	r4, r1
 8000132:	187b      	adds	r3, r7, r1
 8000134:	0018      	movs	r0, r3
 8000136:	2320      	movs	r3, #32
 8000138:	001a      	movs	r2, r3
 800013a:	2100      	movs	r1, #0
 800013c:	f000 f8f6 	bl	800032c <memset>
 8000140:	0021      	movs	r1, r4
 8000142:	187b      	adds	r3, r7, r1
 8000144:	2201      	movs	r2, #1
 8000146:	701a      	strb	r2, [r3, #0]
 8000148:	187b      	adds	r3, r7, r1
 800014a:	2201      	movs	r2, #1
 800014c:	709a      	strb	r2, [r3, #2]
 800014e:	187b      	adds	r3, r7, r1
 8000150:	2201      	movs	r2, #1
 8000152:	711a      	strb	r2, [r3, #4]
 8000154:	187b      	adds	r3, r7, r1
 8000156:	2201      	movs	r2, #1
 8000158:	71da      	strb	r2, [r3, #7]
 800015a:	187b      	adds	r3, r7, r1
 800015c:	2201      	movs	r2, #1
 800015e:	721a      	strb	r2, [r3, #8]
 8000160:	187b      	adds	r3, r7, r1
 8000162:	2201      	movs	r2, #1
 8000164:	725a      	strb	r2, [r3, #9]
 8000166:	187b      	adds	r3, r7, r1
 8000168:	2201      	movs	r2, #1
 800016a:	72da      	strb	r2, [r3, #11]
 800016c:	187b      	adds	r3, r7, r1
 800016e:	2201      	movs	r2, #1
 8000170:	731a      	strb	r2, [r3, #12]
 8000172:	187b      	adds	r3, r7, r1
 8000174:	2201      	movs	r2, #1
 8000176:	735a      	strb	r2, [r3, #13]
 8000178:	187b      	adds	r3, r7, r1
 800017a:	2201      	movs	r2, #1
 800017c:	73da      	strb	r2, [r3, #15]
 800017e:	187b      	adds	r3, r7, r1
 8000180:	2201      	movs	r2, #1
 8000182:	741a      	strb	r2, [r3, #16]
 8000184:	187b      	adds	r3, r7, r1
 8000186:	2201      	movs	r2, #1
 8000188:	745a      	strb	r2, [r3, #17]
 800018a:	187b      	adds	r3, r7, r1
 800018c:	2201      	movs	r2, #1
 800018e:	751a      	strb	r2, [r3, #20]
 8000190:	187b      	adds	r3, r7, r1
 8000192:	2201      	movs	r2, #1
 8000194:	759a      	strb	r2, [r3, #22]
 8000196:	187b      	adds	r3, r7, r1
 8000198:	2201      	movs	r2, #1
 800019a:	761a      	strb	r2, [r3, #24]

			j++;
			if (j == sizeof(pole)) j = 0;
		}
*/
	uint32_t SOS = 0b1010100111011101110010101;   //morseovka SOS
 800019c:	4b17      	ldr	r3, [pc, #92]	; (80001fc <main+0xf4>)
 800019e:	62bb      	str	r3, [r7, #40]	; 0x28
    for(;;)
        {
	    for (uint32_t i = 0; i < 32; i++){        //bitovy posuv a zkoumani zda-li jednicka nebo 0
 80001a0:	2300      	movs	r3, #0
 80001a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80001a4:	e01a      	b.n	80001dc <main+0xd4>
		    if ((SOS<<i) & 0x80000000)
 80001a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001aa:	409a      	lsls	r2, r3
 80001ac:	1e13      	subs	r3, r2, #0
 80001ae:	da04      	bge.n	80001ba <main+0xb2>
		        {
			    GPIOA->BSRR = (1<<5); // set
 80001b0:	2390      	movs	r3, #144	; 0x90
 80001b2:	05db      	lsls	r3, r3, #23
 80001b4:	2220      	movs	r2, #32
 80001b6:	619a      	str	r2, [r3, #24]
 80001b8:	e003      	b.n	80001c2 <main+0xba>
			    }
			else
			    {
				GPIOA->BRR = (1<<5); // reset
 80001ba:	2390      	movs	r3, #144	; 0x90
 80001bc:	05db      	lsls	r3, r3, #23
 80001be:	2220      	movs	r2, #32
 80001c0:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			for (volatile uint32_t t = 0; t < 100000; t++) {}
 80001c2:	2300      	movs	r3, #0
 80001c4:	607b      	str	r3, [r7, #4]
 80001c6:	e002      	b.n	80001ce <main+0xc6>
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	3301      	adds	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <main+0xf8>)
 80001d2:	4293      	cmp	r3, r2
 80001d4:	d9f8      	bls.n	80001c8 <main+0xc0>
	    for (uint32_t i = 0; i < 32; i++){        //bitovy posuv a zkoumani zda-li jednicka nebo 0
 80001d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001d8:	3301      	adds	r3, #1
 80001da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80001dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001de:	2b1f      	cmp	r3, #31
 80001e0:	d9e1      	bls.n	80001a6 <main+0x9e>
		}
			for (volatile uint32_t j = 0; j < 900000; j++) {} //delsi cekani
 80001e2:	2300      	movs	r3, #0
 80001e4:	603b      	str	r3, [r7, #0]
 80001e6:	e002      	b.n	80001ee <main+0xe6>
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	3301      	adds	r3, #1
 80001ec:	603b      	str	r3, [r7, #0]
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <main+0xfc>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d9f8      	bls.n	80001e8 <main+0xe0>
	    for (uint32_t i = 0; i < 32; i++){        //bitovy posuv a zkoumani zda-li jednicka nebo 0
 80001f6:	e7d3      	b.n	80001a0 <main+0x98>
 80001f8:	40021000 	.word	0x40021000
 80001fc:	0153bb95 	.word	0x0153bb95
 8000200:	0001869f 	.word	0x0001869f
 8000204:	000dbb9f 	.word	0x000dbb9f

08000208 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800020c:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <SystemInit+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b19      	ldr	r3, [pc, #100]	; (8000278 <SystemInit+0x70>)
 8000212:	2101      	movs	r1, #1
 8000214:	430a      	orrs	r2, r1
 8000216:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <SystemInit+0x70>)
 800021a:	685a      	ldr	r2, [r3, #4]
 800021c:	4b16      	ldr	r3, [pc, #88]	; (8000278 <SystemInit+0x70>)
 800021e:	4917      	ldr	r1, [pc, #92]	; (800027c <SystemInit+0x74>)
 8000220:	400a      	ands	r2, r1
 8000222:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <SystemInit+0x70>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b13      	ldr	r3, [pc, #76]	; (8000278 <SystemInit+0x70>)
 800022a:	4915      	ldr	r1, [pc, #84]	; (8000280 <SystemInit+0x78>)
 800022c:	400a      	ands	r2, r1
 800022e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <SystemInit+0x70>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b10      	ldr	r3, [pc, #64]	; (8000278 <SystemInit+0x70>)
 8000236:	4913      	ldr	r1, [pc, #76]	; (8000284 <SystemInit+0x7c>)
 8000238:	400a      	ands	r2, r1
 800023a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <SystemInit+0x70>)
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <SystemInit+0x70>)
 8000242:	4911      	ldr	r1, [pc, #68]	; (8000288 <SystemInit+0x80>)
 8000244:	400a      	ands	r2, r1
 8000246:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <SystemInit+0x70>)
 800024a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <SystemInit+0x70>)
 800024e:	210f      	movs	r1, #15
 8000250:	438a      	bics	r2, r1
 8000252:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEEC;
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <SystemInit+0x70>)
 8000256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <SystemInit+0x70>)
 800025a:	490c      	ldr	r1, [pc, #48]	; (800028c <SystemInit+0x84>)
 800025c:	400a      	ands	r2, r1
 800025e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <SystemInit+0x70>)
 8000262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <SystemInit+0x70>)
 8000266:	2101      	movs	r1, #1
 8000268:	438a      	bics	r2, r1
 800026a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800026c:	4b02      	ldr	r3, [pc, #8]	; (8000278 <SystemInit+0x70>)
 800026e:	2200      	movs	r2, #0
 8000270:	609a      	str	r2, [r3, #8]

}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40021000 	.word	0x40021000
 800027c:	08ffb80c 	.word	0x08ffb80c
 8000280:	fef6ffff 	.word	0xfef6ffff
 8000284:	fffbffff 	.word	0xfffbffff
 8000288:	ffc0ffff 	.word	0xffc0ffff
 800028c:	fffffeec 	.word	0xfffffeec

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490e      	ldr	r1, [pc, #56]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0b      	ldr	r4, [pc, #44]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ba:	f7ff ffa5 	bl	8000208 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff21 	bl	8000108 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	2600      	movs	r6, #0
 80002e8:	4d0c      	ldr	r5, [pc, #48]	; (800031c <__libc_init_array+0x38>)
 80002ea:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	10a4      	asrs	r4, r4, #2
 80002f0:	42a6      	cmp	r6, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	2600      	movs	r6, #0
 80002f6:	f000 f821 	bl	800033c <_init>
 80002fa:	4d0a      	ldr	r5, [pc, #40]	; (8000324 <__libc_init_array+0x40>)
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <__libc_init_array+0x44>)
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	42a6      	cmp	r6, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	00b3      	lsls	r3, r6, #2
 800030a:	58eb      	ldr	r3, [r5, r3]
 800030c:	4798      	blx	r3
 800030e:	3601      	adds	r6, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	00b3      	lsls	r3, r6, #2
 8000314:	58eb      	ldr	r3, [r5, r3]
 8000316:	4798      	blx	r3
 8000318:	3601      	adds	r6, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000354 	.word	0x08000354
 8000320:	08000354 	.word	0x08000354
 8000324:	08000354 	.word	0x08000354
 8000328:	08000358 	.word	0x08000358

0800032c <memset>:
 800032c:	0003      	movs	r3, r0
 800032e:	1812      	adds	r2, r2, r0
 8000330:	4293      	cmp	r3, r2
 8000332:	d100      	bne.n	8000336 <memset+0xa>
 8000334:	4770      	bx	lr
 8000336:	7019      	strb	r1, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	e7f9      	b.n	8000330 <memset+0x4>

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
