
cv09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080087a8  080087a8  000187a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080089f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200001c8  08008bb8  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08008bb8  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125c5  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b00  00000000  00000000  000327bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  000352c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00035f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002599e  00000000  00000000  00036ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cae5  00000000  00000000  0005c456  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5502  00000000  00000000  00068f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e43d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  0013e4b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800878c 	.word	0x0800878c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	0800878c 	.word	0x0800878c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b972 	b.w	8000ec8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9e08      	ldr	r6, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	4688      	mov	r8, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14b      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4615      	mov	r5, r2
 8000c0e:	d967      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0720 	rsb	r7, r2, #32
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c22:	4095      	lsls	r5, r2
 8000c24:	ea47 0803 	orr.w	r8, r7, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c34:	fa1f fc85 	uxth.w	ip, r5
 8000c38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c40:	fb07 f10c 	mul.w	r1, r7, ip
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18eb      	adds	r3, r5, r3
 8000c4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4e:	f080 811b 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8118 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c58:	3f02      	subs	r7, #2
 8000c5a:	442b      	add	r3, r5
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c70:	45a4      	cmp	ip, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	192c      	adds	r4, r5, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x290>
 8000c7e:	45a4      	cmp	ip, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x290>
 8000c84:	3802      	subs	r0, #2
 8000c86:	442c      	add	r4, r5
 8000c88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c8c:	eba4 040c 	sub.w	r4, r4, ip
 8000c90:	2700      	movs	r7, #0
 8000c92:	b11e      	cbz	r6, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xbe>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80eb 	beq.w	8000e82 <__udivmoddi4+0x286>
 8000cac:	2700      	movs	r7, #0
 8000cae:	e9c6 0100 	strd	r0, r1, [r6]
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f783 	clz	r7, r3
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d147      	bne.n	8000d52 <__udivmoddi4+0x156>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd0>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2c4>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	4698      	mov	r8, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000cda:	e9c6 4800 	strd	r4, r8, [r6]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xe8>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 808f 	bne.w	8000e0c <__udivmoddi4+0x210>
 8000cee:	1b49      	subs	r1, r1, r5
 8000cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf4:	fa1f f885 	uxth.w	r8, r5
 8000cf8:	2701      	movs	r7, #1
 8000cfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d08:	fb08 f10c 	mul.w	r1, r8, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x124>
 8000d10:	18eb      	adds	r3, r5, r3
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x122>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	f200 80cd 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x14c>
 8000d38:	192c      	adds	r4, r5, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x14a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80b6 	bhi.w	8000eb2 <__udivmoddi4+0x2b6>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e79f      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d52:	f1c7 0c20 	rsb	ip, r7, #32
 8000d56:	40bb      	lsls	r3, r7
 8000d58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d60:	fa01 f407 	lsl.w	r4, r1, r7
 8000d64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d70:	4325      	orrs	r5, r4
 8000d72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d76:	0c2c      	lsrs	r4, r5, #16
 8000d78:	fb08 3319 	mls	r3, r8, r9, r3
 8000d7c:	fa1f fa8e 	uxth.w	sl, lr
 8000d80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d84:	fb09 f40a 	mul.w	r4, r9, sl
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d92:	d90b      	bls.n	8000dac <__udivmoddi4+0x1b0>
 8000d94:	eb1e 0303 	adds.w	r3, lr, r3
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9c:	f080 8087 	bcs.w	8000eae <__udivmoddi4+0x2b2>
 8000da0:	429c      	cmp	r4, r3
 8000da2:	f240 8084 	bls.w	8000eae <__udivmoddi4+0x2b2>
 8000da6:	f1a9 0902 	sub.w	r9, r9, #2
 8000daa:	4473      	add	r3, lr
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	b2ad      	uxth	r5, r5
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3310 	mls	r3, r8, r0, r3
 8000db8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1da>
 8000dc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dcc:	d26b      	bcs.n	8000ea6 <__udivmoddi4+0x2aa>
 8000dce:	45a2      	cmp	sl, r4
 8000dd0:	d969      	bls.n	8000ea6 <__udivmoddi4+0x2aa>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4474      	add	r4, lr
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	eba4 040a 	sub.w	r4, r4, sl
 8000de2:	454c      	cmp	r4, r9
 8000de4:	46c2      	mov	sl, r8
 8000de6:	464b      	mov	r3, r9
 8000de8:	d354      	bcc.n	8000e94 <__udivmoddi4+0x298>
 8000dea:	d051      	beq.n	8000e90 <__udivmoddi4+0x294>
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d069      	beq.n	8000ec4 <__udivmoddi4+0x2c8>
 8000df0:	ebb1 050a 	subs.w	r5, r1, sl
 8000df4:	eb64 0403 	sbc.w	r4, r4, r3
 8000df8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dfc:	40fd      	lsrs	r5, r7
 8000dfe:	40fc      	lsrs	r4, r7
 8000e00:	ea4c 0505 	orr.w	r5, ip, r5
 8000e04:	e9c6 5400 	strd	r5, r4, [r6]
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e747      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f703 	lsr.w	r7, r0, r3
 8000e14:	4095      	lsls	r5, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e22:	4338      	orrs	r0, r7
 8000e24:	0c01      	lsrs	r1, r0, #16
 8000e26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e2a:	fa1f f885 	uxth.w	r8, r5
 8000e2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb07 f308 	mul.w	r3, r7, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x256>
 8000e42:	1869      	adds	r1, r5, r1
 8000e44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e48:	d22f      	bcs.n	8000eaa <__udivmoddi4+0x2ae>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d92d      	bls.n	8000eaa <__udivmoddi4+0x2ae>
 8000e4e:	3f02      	subs	r7, #2
 8000e50:	4429      	add	r1, r5
 8000e52:	1acb      	subs	r3, r1, r3
 8000e54:	b281      	uxth	r1, r0
 8000e56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb00 f308 	mul.w	r3, r0, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x27e>
 8000e6a:	1869      	adds	r1, r5, r1
 8000e6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e70:	d217      	bcs.n	8000ea2 <__udivmoddi4+0x2a6>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d915      	bls.n	8000ea2 <__udivmoddi4+0x2a6>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4429      	add	r1, r5
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e80:	e73b      	b.n	8000cfa <__udivmoddi4+0xfe>
 8000e82:	4637      	mov	r7, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e709      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e88:	4607      	mov	r7, r0
 8000e8a:	e6e7      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e90:	4541      	cmp	r1, r8
 8000e92:	d2ab      	bcs.n	8000dec <__udivmoddi4+0x1f0>
 8000e94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e98:	eb69 020e 	sbc.w	r2, r9, lr
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	e7a4      	b.n	8000dec <__udivmoddi4+0x1f0>
 8000ea2:	4660      	mov	r0, ip
 8000ea4:	e7e9      	b.n	8000e7a <__udivmoddi4+0x27e>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	e795      	b.n	8000dd6 <__udivmoddi4+0x1da>
 8000eaa:	4667      	mov	r7, ip
 8000eac:	e7d1      	b.n	8000e52 <__udivmoddi4+0x256>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	e77c      	b.n	8000dac <__udivmoddi4+0x1b0>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	442c      	add	r4, r5
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0x14c>
 8000eb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ebc:	442b      	add	r3, r5
 8000ebe:	e72f      	b.n	8000d20 <__udivmoddi4+0x124>
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xda>
 8000ec4:	4637      	mov	r7, r6
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0xa0>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <step>:
extern USBD_HandleTypeDef hUsbDeviceFS;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void step(int8_t x, int8_t y, _Bool btn) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	4613      	mov	r3, r2
 8000edc:	717b      	strb	r3, [r7, #5]
	uint8_t buff[4];
	buff[0] = 0x00;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	733b      	strb	r3, [r7, #12]
	if (btn) buff[0] = 0x01; // stiskni leve tlacitko
 8000ee2:	797b      	ldrb	r3, [r7, #5]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <step+0x20>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	733b      	strb	r3, [r7, #12]
	buff[1] = x; // posun X
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	737b      	strb	r3, [r7, #13]
	buff[2] = y; // posun Y
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0; // bez scrollu
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2204      	movs	r2, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <step+0x50>)
 8000f02:	f004 fd09 	bl	8005918 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <step+0x50>)
 8000f08:	f004 fd28 	bl	800595c <USBD_HID_GetPollingInterval>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fbf6 	bl	8001700 <HAL_Delay>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000238 	.word	0x20000238

08000f20 <circle>:

void circle(uint16_t radius) {
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]

	float x = 0, y = 0;
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
	float sx = 0, sy = 0;
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
	uint8_t par_x, par_y,i;

	for(uint8_t i = 0; i < STEP; i++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	75fb      	strb	r3, [r7, #23]
 8000f46:	e09e      	b.n	8001086 <circle+0x166>
		x = radius * cos((2 * PI * i)/STEP);
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff faa2 	bl	8000494 <__aeabi_i2d>
 8000f50:	4604      	mov	r4, r0
 8000f52:	460d      	mov	r5, r1
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa9c 	bl	8000494 <__aeabi_i2d>
 8000f5c:	a34e      	add	r3, pc, #312	; (adr r3, 8001098 <circle+0x178>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fb01 	bl	8000568 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <circle+0x180>)
 8000f74:	f7ff fc22 	bl	80007bc <__aeabi_ddiv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	ec43 2b17 	vmov	d7, r2, r3
 8000f80:	eeb0 0a47 	vmov.f32	s0, s14
 8000f84:	eef0 0a67 	vmov.f32	s1, s15
 8000f88:	f006 fb5e 	bl	8007648 <cos>
 8000f8c:	ec53 2b10 	vmov	r2, r3, d0
 8000f90:	4620      	mov	r0, r4
 8000f92:	4629      	mov	r1, r5
 8000f94:	f7ff fae8 	bl	8000568 <__aeabi_dmul>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	f7ff fdc4 	bl	8000b2c <__aeabi_d2f>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	613b      	str	r3, [r7, #16]
		y = radius * sin((2 * PI * i)/STEP);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fa72 	bl	8000494 <__aeabi_i2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa6c 	bl	8000494 <__aeabi_i2d>
 8000fbc:	a336      	add	r3, pc, #216	; (adr r3, 8001098 <circle+0x178>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fad1 	bl	8000568 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <circle+0x180>)
 8000fd4:	f7ff fbf2 	bl	80007bc <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	ec43 2b17 	vmov	d7, r2, r3
 8000fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe4:	eef0 0a67 	vmov.f32	s1, s15
 8000fe8:	f006 fbbe 	bl	8007768 <sin>
 8000fec:	ec53 2b10 	vmov	r2, r3, d0
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fab8 	bl	8000568 <__aeabi_dmul>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4621      	mov	r1, r4
 8001000:	f7ff fd94 	bl	8000b2c <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]

		par_x = round (x - sx);
 8001008:	ed97 7a04 	vldr	s14, [r7, #16]
 800100c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001014:	ee17 0a90 	vmov	r0, s15
 8001018:	f7ff fa4e 	bl	80004b8 <__aeabi_f2d>
 800101c:	4603      	mov	r3, r0
 800101e:	460c      	mov	r4, r1
 8001020:	ec44 3b10 	vmov	d0, r3, r4
 8001024:	f006 fb54 	bl	80076d0 <round>
 8001028:	ec54 3b10 	vmov	r3, r4, d0
 800102c:	4618      	mov	r0, r3
 800102e:	4621      	mov	r1, r4
 8001030:	f7ff fd5c 	bl	8000aec <__aeabi_d2uiz>
 8001034:	4603      	mov	r3, r0
 8001036:	72fb      	strb	r3, [r7, #11]
		par_y = round (y - sy);
 8001038:	ed97 7a03 	vldr	s14, [r7, #12]
 800103c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001044:	ee17 0a90 	vmov	r0, s15
 8001048:	f7ff fa36 	bl	80004b8 <__aeabi_f2d>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	ec44 3b10 	vmov	d0, r3, r4
 8001054:	f006 fb3c 	bl	80076d0 <round>
 8001058:	ec54 3b10 	vmov	r3, r4, d0
 800105c:	4618      	mov	r0, r3
 800105e:	4621      	mov	r1, r4
 8001060:	f7ff fd44 	bl	8000aec <__aeabi_d2uiz>
 8001064:	4603      	mov	r3, r0
 8001066:	72bb      	strb	r3, [r7, #10]

		step(par_x, par_y, true);
 8001068:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800106c:	f997 100a 	ldrsb.w	r1, [r7, #10]
 8001070:	2201      	movs	r2, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff2a 	bl	8000ecc <step>

		sx = x;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	61fb      	str	r3, [r7, #28]
		sy = y;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 0; i < STEP; i++) {
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	3301      	adds	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b31      	cmp	r3, #49	; 0x31
 800108a:	f67f af5d 	bls.w	8000f48 <circle+0x28>
	}
}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bdb0      	pop	{r4, r5, r7, pc}
 8001096:	bf00      	nop
 8001098:	2e48e8a7 	.word	0x2e48e8a7
 800109c:	401921ff 	.word	0x401921ff
 80010a0:	40490000 	.word	0x40490000

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f000 fab8 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f814 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b0:	f000 f8a6 	bl	8001200 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010b4:	f000 f87a 	bl	80011ac <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80010b8:	f005 fd9e 	bl	8006bf8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin) == 1) {
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <main+0x30>)
 80010c2:	f000 fdfb 	bl	8001cbc <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d1f7      	bne.n	80010bc <main+0x18>
	    circle(50);
 80010cc:	2032      	movs	r0, #50	; 0x32
 80010ce:	f7ff ff27 	bl	8000f20 <circle>
	if(HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin) == 1) {
 80010d2:	e7f3      	b.n	80010bc <main+0x18>
 80010d4:	40020800 	.word	0x40020800

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 f9ec 	bl	80074c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <SystemClock_Config+0xcc>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <SystemClock_Config+0xd0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <SystemClock_Config+0xd0>)
 8001122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <SystemClock_Config+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001138:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001148:	2304      	movs	r3, #4
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800114c:	23a8      	movs	r3, #168	; 0xa8
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001154:	2307      	movs	r3, #7
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f001 ff49 	bl	8002ff4 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 f93c 	bl	80013e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2105      	movs	r1, #5
 800118a:	4618      	mov	r0, r3
 800118c:	f002 f9a2 	bl	80034d4 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f925 	bl	80013e4 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3750      	adds	r7, #80	; 0x50
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_USART3_UART_Init+0x50>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011e4:	f002 fb68 	bl	80038b8 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011ee:	f000 f8f9 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f4 	.word	0x200001f4
 80011fc:	40004800 	.word	0x40004800

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	4b6c      	ldr	r3, [pc, #432]	; (80013cc <MX_GPIO_Init+0x1cc>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a6b      	ldr	r2, [pc, #428]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b69      	ldr	r3, [pc, #420]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	4b65      	ldr	r3, [pc, #404]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a64      	ldr	r2, [pc, #400]	; (80013cc <MX_GPIO_Init+0x1cc>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b62      	ldr	r3, [pc, #392]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a56      	ldr	r2, [pc, #344]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <MX_GPIO_Init+0x1cc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <MX_GPIO_Init+0x1cc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <MX_GPIO_Init+0x1cc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a48      	ldr	r2, [pc, #288]	; (80013cc <MX_GPIO_Init+0x1cc>)
 80012ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <MX_GPIO_Init+0x1cc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80012c4:	4842      	ldr	r0, [pc, #264]	; (80013d0 <MX_GPIO_Init+0x1d0>)
 80012c6:	f000 fd11 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4841      	ldr	r0, [pc, #260]	; (80013d4 <MX_GPIO_Init+0x1d4>)
 80012d0:	f000 fd0c 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80012d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <MX_GPIO_Init+0x1d8>)
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	483c      	ldr	r0, [pc, #240]	; (80013dc <MX_GPIO_Init+0x1dc>)
 80012ea:	f000 fb3d 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012ee:	2332      	movs	r3, #50	; 0x32
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fe:	230b      	movs	r3, #11
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4834      	ldr	r0, [pc, #208]	; (80013dc <MX_GPIO_Init+0x1dc>)
 800130a:	f000 fb2d 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800130e:	2386      	movs	r3, #134	; 0x86
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131e:	230b      	movs	r3, #11
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	482d      	ldr	r0, [pc, #180]	; (80013e0 <MX_GPIO_Init+0x1e0>)
 800132a:	f000 fb1d 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800132e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4822      	ldr	r0, [pc, #136]	; (80013d0 <MX_GPIO_Init+0x1d0>)
 8001348:	f000 fb0e 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135e:	230b      	movs	r3, #11
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4819      	ldr	r0, [pc, #100]	; (80013d0 <MX_GPIO_Init+0x1d0>)
 800136a:	f000 fafd 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800136e:	2340      	movs	r3, #64	; 0x40
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0x1d4>)
 8001386:	f000 faef 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <MX_GPIO_Init+0x1d4>)
 800139e:	f000 fae3 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b4:	230b      	movs	r3, #11
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_GPIO_Init+0x1d4>)
 80013c0:	f000 fad2 	bl	8001968 <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40021800 	.word	0x40021800
 80013d8:	10110000 	.word	0x10110000
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020000 	.word	0x40020000

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_MspInit+0x4c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x4c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_UART_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12c      	bne.n	80014c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_UART_MspInit+0x88>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_UART_MspInit+0x88>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b0:	2307      	movs	r3, #7
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_UART_MspInit+0x8c>)
 80014bc:	f000 fa54 	bl	8001968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40004800 	.word	0x40004800
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020c00 	.word	0x40020c00

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f8ca 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <OTG_FS_IRQHandler+0x10>)
 8001536:	f000 fd42 	bl	8001fbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000708 	.word	0x20000708

08001544 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <_sbrk+0x50>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x16>
		heap_end = &end;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <_sbrk+0x50>)
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <_sbrk+0x54>)
 8001558:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <_sbrk+0x50>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <_sbrk+0x50>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	466a      	mov	r2, sp
 800156a:	4293      	cmp	r3, r2
 800156c:	d907      	bls.n	800157e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800156e:	f005 ff6f 	bl	8007450 <__errno>
 8001572:	4602      	mov	r2, r0
 8001574:	230c      	movs	r3, #12
 8001576:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	e006      	b.n	800158c <_sbrk+0x48>
	}

	heap_end += incr;
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <_sbrk+0x50>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	4a03      	ldr	r2, [pc, #12]	; (8001594 <_sbrk+0x50>)
 8001588:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200001e4 	.word	0x200001e4
 8001598:	20000b18 	.word	0x20000b18

0800159c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <SystemInit+0x28>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <SystemInit+0x28>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SystemInit+0x28>)
 80015b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b6:	609a      	str	r2, [r3, #8]
#endif
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ce:	e003      	b.n	80015d8 <LoopCopyDataInit>

080015d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015d6:	3104      	adds	r1, #4

080015d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015e0:	d3f6      	bcc.n	80015d0 <CopyDataInit>
  ldr  r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015e4:	e002      	b.n	80015ec <LoopFillZerobss>

080015e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015e8:	f842 3b04 	str.w	r3, [r2], #4

080015ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015f0:	d3f9      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015f2:	f7ff ffd3 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f005 ff31 	bl	800745c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff fd53 	bl	80010a4 <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001600:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001604:	080089f0 	.word	0x080089f0
  ldr  r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800160c:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8001610:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8001614:	20000b14 	.word	0x20000b14

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_Init+0x40>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_Init+0x40>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x40>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f94d 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fed0 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f965 	bl	800194e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f92d 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000234 	.word	0x20000234

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000234 	.word	0x20000234

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_Delay+0x40>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000008 	.word	0x20000008

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e177      	b.n	8001c74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8166 	bne.w	8001c6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d00b      	beq.n	80019c2 <HAL_GPIO_Init+0x5a>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b6:	2b11      	cmp	r3, #17
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d130      	bne.n	8001a24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 0201 	and.w	r2, r3, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0xfc>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b12      	cmp	r3, #18
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80c0 	beq.w	8001c6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_GPIO_Init+0x320>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a64      	ldr	r2, [pc, #400]	; (8001c88 <HAL_GPIO_Init+0x320>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <HAL_GPIO_Init+0x320>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0a:	4a60      	ldr	r2, [pc, #384]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <HAL_GPIO_Init+0x328>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d037      	beq.n	8001ba6 <HAL_GPIO_Init+0x23e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a56      	ldr	r2, [pc, #344]	; (8001c94 <HAL_GPIO_Init+0x32c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d031      	beq.n	8001ba2 <HAL_GPIO_Init+0x23a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a55      	ldr	r2, [pc, #340]	; (8001c98 <HAL_GPIO_Init+0x330>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d02b      	beq.n	8001b9e <HAL_GPIO_Init+0x236>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d025      	beq.n	8001b9a <HAL_GPIO_Init+0x232>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a53      	ldr	r2, [pc, #332]	; (8001ca0 <HAL_GPIO_Init+0x338>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01f      	beq.n	8001b96 <HAL_GPIO_Init+0x22e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_GPIO_Init+0x33c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x22a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <HAL_GPIO_Init+0x340>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x226>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a50      	ldr	r2, [pc, #320]	; (8001cac <HAL_GPIO_Init+0x344>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x222>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4f      	ldr	r2, [pc, #316]	; (8001cb0 <HAL_GPIO_Init+0x348>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x21e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4e      	ldr	r2, [pc, #312]	; (8001cb4 <HAL_GPIO_Init+0x34c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x21a>
 8001b7e:	2309      	movs	r3, #9
 8001b80:	e012      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b82:	230a      	movs	r3, #10
 8001b84:	e010      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b86:	2308      	movs	r3, #8
 8001b88:	e00e      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e00c      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b8e:	2306      	movs	r3, #6
 8001b90:	e00a      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b92:	2305      	movs	r3, #5
 8001b94:	e008      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e004      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x240>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb8:	4934      	ldr	r1, [pc, #208]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bea:	4a33      	ldr	r2, [pc, #204]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c14:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <HAL_GPIO_Init+0x350>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	f67f ae84 	bls.w	8001984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3724      	adds	r7, #36	; 0x24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40021c00 	.word	0x40021c00
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40022400 	.word	0x40022400
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d08:	e003      	b.n	8001d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d20:	b08f      	sub	sp, #60	; 0x3c
 8001d22:	af0a      	add	r7, sp, #40	; 0x28
 8001d24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e10f      	b.n	8001f50 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f005 f888 	bl	8006e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2203      	movs	r2, #3
 8001d54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 fa81 	bl	8004276 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	687e      	ldr	r6, [r7, #4]
 8001d7c:	466d      	mov	r5, sp
 8001d7e:	f106 0410 	add.w	r4, r6, #16
 8001d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d92:	1d33      	adds	r3, r6, #4
 8001d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d96:	6838      	ldr	r0, [r7, #0]
 8001d98:	f002 f958 	bl	800404c <USB_CoreInit>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0d0      	b.n	8001f50 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 fa6f 	bl	8004298 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e04a      	b.n	8001e56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	333d      	adds	r3, #61	; 0x3d
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	333c      	adds	r3, #60	; 0x3c
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	b298      	uxth	r0, r3
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3342      	adds	r3, #66	; 0x42
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	333f      	adds	r3, #63	; 0x3f
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3344      	adds	r3, #68	; 0x44
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3348      	adds	r3, #72	; 0x48
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3350      	adds	r3, #80	; 0x50
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	3301      	adds	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3af      	bcc.n	8001dc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e044      	b.n	8001ef0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	3301      	adds	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3b5      	bcc.n	8001e66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	687e      	ldr	r6, [r7, #4]
 8001f02:	466d      	mov	r5, sp
 8001f04:	f106 0410 	add.w	r4, r6, #16
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f14:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f18:	1d33      	adds	r3, r6, #4
 8001f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1c:	6838      	ldr	r0, [r7, #0]
 8001f1e:	f002 f9e5 	bl	80042ec <USB_DevInit>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e00d      	b.n	8001f50 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 fa24 	bl	8005396 <USB_DevDisconnect>

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_PCD_Start+0x1c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e020      	b.n	8001fb6 <HAL_PCD_Start+0x5e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d109      	bne.n	8001f98 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d005      	beq.n	8001f98 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 f9e2 	bl	8005366 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 f954 	bl	8004254 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fbe:	b590      	push	{r4, r7, lr}
 8001fc0:	b08d      	sub	sp, #52	; 0x34
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fa89 	bl	80054ec <USB_GetMode>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f040 839d 	bne.w	800271c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 f9ed 	bl	80053c6 <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8393 	beq.w	800271a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 f9e4 	bl	80053c6 <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d107      	bne.n	8002018 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f002 0202 	and.w	r2, r2, #2
 8002016:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 f9d2 	bl	80053c6 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b10      	cmp	r3, #16
 800202a:	d161      	bne.n	80020f0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0210 	bic.w	r2, r2, #16
 800203a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	3304      	adds	r3, #4
 800205a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	0c5b      	lsrs	r3, r3, #17
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	2b02      	cmp	r3, #2
 8002066:	d124      	bne.n	80020b2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d035      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800207e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	6a38      	ldr	r0, [r7, #32]
 8002088:	f003 f84a 	bl	8005120 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002098:	441a      	add	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020aa:	441a      	add	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	619a      	str	r2, [r3, #24]
 80020b0:	e016      	b.n	80020e0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	0c5b      	lsrs	r3, r3, #17
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d110      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020c4:	2208      	movs	r2, #8
 80020c6:	4619      	mov	r1, r3
 80020c8:	6a38      	ldr	r0, [r7, #32]
 80020ca:	f003 f829 	bl	8005120 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020da:	441a      	add	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0210 	orr.w	r2, r2, #16
 80020ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 f966 	bl	80053c6 <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002100:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002104:	d16e      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 f96c 	bl	80053ec <USB_ReadDevAllOutEpInterrupt>
 8002114:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002116:	e062      	b.n	80021de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d057      	beq.n	80021d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f003 f991 	bl	8005454 <USB_ReadDevOutEPInterrupt>
 8002132:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214a:	461a      	mov	r2, r3
 800214c:	2301      	movs	r3, #1
 800214e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fd98 	bl	8002c88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216e:	461a      	mov	r2, r3
 8002170:	2308      	movs	r3, #8
 8002172:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fe92 	bl	8002ea0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002192:	461a      	mov	r2, r3
 8002194:	2310      	movs	r3, #16
 8002196:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	461a      	mov	r2, r3
 80021b0:	2320      	movs	r3, #32
 80021b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ca:	461a      	mov	r2, r3
 80021cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	3301      	adds	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d199      	bne.n	8002118 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 f8ec 	bl	80053c6 <USB_ReadInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021f8:	f040 80c0 	bne.w	800237c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f003 f90d 	bl	8005420 <USB_ReadDevAllInEpInterrupt>
 8002206:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800220c:	e0b2      	b.n	8002374 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a7 	beq.w	8002368 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f003 f933 	bl	8005490 <USB_ReadDevInEPInterrupt>
 800222a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d057      	beq.n	80022e6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	2201      	movs	r2, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	69f9      	ldr	r1, [r7, #28]
 8002252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002256:	4013      	ands	r3, r2
 8002258:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002266:	461a      	mov	r2, r3
 8002268:	2301      	movs	r3, #1
 800226a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d132      	bne.n	80022da <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	3348      	adds	r3, #72	; 0x48
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4403      	add	r3, r0
 8002294:	3344      	adds	r3, #68	; 0x44
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4419      	add	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4403      	add	r3, r0
 80022a8:	3348      	adds	r3, #72	; 0x48
 80022aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d113      	bne.n	80022da <HAL_PCD_IRQHandler+0x31c>
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3350      	adds	r3, #80	; 0x50
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d108      	bne.n	80022da <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022d2:	461a      	mov	r2, r3
 80022d4:	2101      	movs	r1, #1
 80022d6:	f003 f93b 	bl	8005550 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	4619      	mov	r1, r3
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f004 fe4c 	bl	8006f7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022fc:	461a      	mov	r2, r3
 80022fe:	2308      	movs	r3, #8
 8002300:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	4413      	add	r3, r2
 8002314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002318:	461a      	mov	r2, r3
 800231a:	2310      	movs	r3, #16
 800231c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002334:	461a      	mov	r2, r3
 8002336:	2340      	movs	r3, #64	; 0x40
 8002338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002350:	461a      	mov	r2, r3
 8002352:	2302      	movs	r3, #2
 8002354:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fc03 	bl	8002b6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	3301      	adds	r3, #1
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	2b00      	cmp	r3, #0
 8002378:	f47f af49 	bne.w	800220e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 f820 	bl	80053c6 <USB_ReadInterrupts>
 8002386:	4603      	mov	r3, r0
 8002388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800238c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002390:	d122      	bne.n	80023d8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d108      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023b8:	2100      	movs	r1, #0
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fe0e 	bl	8002fdc <HAL_PCDEx_LPM_Callback>
 80023c0:	e002      	b.n	80023c8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f004 fe52 	bl	800706c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fff2 	bl	80053c6 <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ec:	d112      	bne.n	8002414 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f004 fe0e 	bl	8007020 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002412:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f002 ffd4 	bl	80053c6 <USB_ReadInterrupts>
 800241e:	4603      	mov	r3, r0
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002428:	f040 80c7 	bne.w	80025ba <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2110      	movs	r1, #16
 8002446:	4618      	mov	r0, r3
 8002448:	f002 f8b4 	bl	80045b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002450:	e056      	b.n	8002500 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800245e:	461a      	mov	r2, r3
 8002460:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002464:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002476:	0151      	lsls	r1, r2, #5
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	440a      	add	r2, r1
 800247c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002480:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002484:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002496:	0151      	lsls	r1, r2, #5
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	440a      	add	r2, r1
 800249c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b2:	461a      	mov	r2, r3
 80024b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ca:	0151      	lsls	r1, r2, #5
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	440a      	add	r2, r1
 80024d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ea:	0151      	lsls	r1, r2, #5
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	440a      	add	r2, r1
 80024f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	3301      	adds	r3, #1
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002506:	429a      	cmp	r2, r3
 8002508:	d3a3      	bcc.n	8002452 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002518:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800251c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002536:	f043 030b 	orr.w	r3, r3, #11
 800253a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254c:	f043 030b 	orr.w	r3, r3, #11
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	e015      	b.n	8002580 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002562:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002566:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800256a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257a:	f043 030b 	orr.w	r3, r3, #11
 800257e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002592:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025a4:	461a      	mov	r2, r3
 80025a6:	f002 ffd3 	bl	8005550 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 ff01 	bl	80053c6 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ce:	d124      	bne.n	800261a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 ff97 	bl	8005508 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 f849 	bl	8004676 <USB_GetDevSpeed>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681c      	ldr	r4, [r3, #0]
 80025f0:	f001 f92e 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 80025f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	4620      	mov	r0, r4
 8002600:	f001 fd86 	bl	8004110 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f004 fce2 	bl	8006fce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002618:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fed1 	bl	80053c6 <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b08      	cmp	r3, #8
 800262c:	d10a      	bne.n	8002644 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f004 fcbf 	bl	8006fb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f002 0208 	and.w	r2, r2, #8
 8002642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f002 febc 	bl	80053c6 <USB_ReadInterrupts>
 800264e:	4603      	mov	r3, r0
 8002650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002658:	d10f      	bne.n	800267a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	b2db      	uxtb	r3, r3
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f004 fd21 	bl	80070ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fea1 	bl	80053c6 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800268e:	d10f      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f004 fcf4 	bl	8007088 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fe86 	bl	80053c6 <USB_ReadInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d10a      	bne.n	80026dc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f004 fd02 	bl	80070d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 fe70 	bl	80053c6 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d115      	bne.n	800271c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f004 fcf2 	bl	80070ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	e000      	b.n	800271c <HAL_PCD_IRQHandler+0x75e>
      return;
 800271a:	bf00      	nop
    }
  }
}
 800271c:	3734      	adds	r7, #52	; 0x34
 800271e:	46bd      	mov	sp, r7
 8002720:	bd90      	pop	{r4, r7, pc}

08002722 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_PCD_SetAddress+0x1a>
 8002738:	2302      	movs	r3, #2
 800273a:	e013      	b.n	8002764 <HAL_PCD_SetAddress+0x42>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fde0 	bl	800531a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4603      	mov	r3, r0
 800277c:	70fb      	strb	r3, [r7, #3]
 800277e:	460b      	mov	r3, r1
 8002780:	803b      	strh	r3, [r7, #0]
 8002782:	4613      	mov	r3, r2
 8002784:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800278a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800278e:	2b00      	cmp	r3, #0
 8002790:	da0f      	bge.n	80027b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	3338      	adds	r3, #56	; 0x38
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	705a      	strb	r2, [r3, #1]
 80027b0:	e00f      	b.n	80027d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	f003 020f 	and.w	r2, r3, #15
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027de:	883a      	ldrh	r2, [r7, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	78ba      	ldrb	r2, [r7, #2]
 80027e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027fc:	78bb      	ldrb	r3, [r7, #2]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d102      	bne.n	8002808 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_PCD_EP_Open+0xaa>
 8002812:	2302      	movs	r3, #2
 8002814:	e00e      	b.n	8002834 <HAL_PCD_EP_Open+0xc8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68f9      	ldr	r1, [r7, #12]
 8002824:	4618      	mov	r0, r3
 8002826:	f001 ff4b 	bl	80046c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002832:	7afb      	ldrb	r3, [r7, #11]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800284c:	2b00      	cmp	r3, #0
 800284e:	da0f      	bge.n	8002870 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3338      	adds	r3, #56	; 0x38
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	705a      	strb	r2, [r3, #1]
 800286e:	e00f      	b.n	8002890 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_PCD_EP_Close+0x6e>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e00e      	b.n	80028c8 <HAL_PCD_EP_Close+0x8c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68f9      	ldr	r1, [r7, #12]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 ff89 	bl	80047d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	460b      	mov	r3, r1
 80028de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e0:	7afb      	ldrb	r3, [r7, #11]
 80028e2:	f003 020f 	and.w	r2, r3, #15
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	3304      	adds	r3, #4
 80028f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2200      	movs	r2, #0
 8002910:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	b2da      	uxtb	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	6979      	ldr	r1, [r7, #20]
 8002944:	f002 fa64 	bl	8004e10 <USB_EP0StartXfer>
 8002948:	e008      	b.n	800295c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	6979      	ldr	r1, [r7, #20]
 8002958:	f002 f816 	bl	8004988 <USB_EPStartXfer>
  }

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	460b      	mov	r3, r1
 8002974:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	3338      	adds	r3, #56	; 0x38
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2201      	movs	r2, #1
 80029a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a6:	7afb      	ldrb	r3, [r7, #11]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029c0:	7afb      	ldrb	r3, [r7, #11]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6979      	ldr	r1, [r7, #20]
 80029d8:	f002 fa1a 	bl	8004e10 <USB_EP0StartXfer>
 80029dc:	e008      	b.n	80029f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	6979      	ldr	r1, [r7, #20]
 80029ec:	f001 ffcc 	bl	8004988 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d901      	bls.n	8002a18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e050      	b.n	8002aba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	da0f      	bge.n	8002a40 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	f003 020f 	and.w	r2, r3, #15
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	3338      	adds	r3, #56	; 0x38
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	3304      	adds	r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	705a      	strb	r2, [r3, #1]
 8002a3e:	e00d      	b.n	8002a5c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	3304      	adds	r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_PCD_EP_SetStall+0x82>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e01e      	b.n	8002aba <HAL_PCD_EP_SetStall+0xc0>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68f9      	ldr	r1, [r7, #12]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fb71 	bl	8005172 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	b2d9      	uxtb	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f002 fd50 	bl	8005550 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d901      	bls.n	8002ae0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e042      	b.n	8002b66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da0f      	bge.n	8002b08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	f003 020f 	and.w	r2, r3, #15
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	3338      	adds	r3, #56	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	3304      	adds	r3, #4
 8002afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	705a      	strb	r2, [r3, #1]
 8002b06:	e00f      	b.n	8002b28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 020f 	and.w	r2, r3, #15
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_PCD_EP_ClrStall+0x86>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e00e      	b.n	8002b66 <HAL_PCD_EP_ClrStall+0xa4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68f9      	ldr	r1, [r7, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 fb79 	bl	800524e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b08a      	sub	sp, #40	; 0x28
 8002b72:	af02      	add	r7, sp, #8
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	3338      	adds	r3, #56	; 0x38
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d901      	bls.n	8002ba6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06c      	b.n	8002c80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d902      	bls.n	8002bc2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3303      	adds	r3, #3
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bca:	e02b      	b.n	8002c24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d902      	bls.n	8002be8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	3303      	adds	r3, #3
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68d9      	ldr	r1, [r3, #12]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4603      	mov	r3, r0
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f002 fa55 	bl	80050b6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	441a      	add	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	441a      	add	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d809      	bhi.n	8002c4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d203      	bcs.n	8002c4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1be      	bne.n	8002bcc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d811      	bhi.n	8002c7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	2201      	movs	r2, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	6939      	ldr	r1, [r7, #16]
 8002c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	333c      	adds	r3, #60	; 0x3c
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f040 80a0 	bne.w	8002e00 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d015      	beq.n	8002cf6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a72      	ldr	r2, [pc, #456]	; (8002e98 <PCD_EP_OutXfrComplete_int+0x210>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	f240 80dd 	bls.w	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80d7 	beq.w	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cec:	461a      	mov	r2, r3
 8002cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf2:	6093      	str	r3, [r2, #8]
 8002cf4:	e0cb      	b.n	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2320      	movs	r3, #32
 8002d10:	6093      	str	r3, [r2, #8]
 8002d12:	e0bc      	b.n	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 80b7 	bne.w	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a5d      	ldr	r2, [pc, #372]	; (8002e98 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d90f      	bls.n	8002d48 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d44:	6093      	str	r3, [r2, #8]
 8002d46:	e0a2      	b.n	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d5a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	0159      	lsls	r1, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	440b      	add	r3, r1
 8002d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d6e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4403      	add	r3, r0
 8002d7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d82:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4403      	add	r3, r0
 8002da6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4419      	add	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4403      	add	r3, r0
 8002dbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dc0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d114      	bne.n	8002df2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d108      	bne.n	8002df2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dea:	461a      	mov	r2, r3
 8002dec:	2101      	movs	r1, #1
 8002dee:	f002 fbaf 	bl	8005550 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f004 f8a5 	bl	8006f48 <HAL_PCD_DataOutStageCallback>
 8002dfe:	e046      	b.n	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <PCD_EP_OutXfrComplete_int+0x214>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d124      	bne.n	8002e52 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e24:	6093      	str	r3, [r2, #8]
 8002e26:	e032      	b.n	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2320      	movs	r3, #32
 8002e42:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f004 f87c 	bl	8006f48 <HAL_PCD_DataOutStageCallback>
 8002e50:	e01d      	b.n	8002e8e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d114      	bne.n	8002e82 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d108      	bne.n	8002e82 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	f002 fb67 	bl	8005550 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f004 f85d 	bl	8006f48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	4f54300a 	.word	0x4f54300a
 8002e9c:	4f54310a 	.word	0x4f54310a

08002ea0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	333c      	adds	r3, #60	; 0x3c
 8002eb8:	3304      	adds	r3, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d90e      	bls.n	8002ef4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eec:	461a      	mov	r2, r3
 8002eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f004 f815 	bl	8006f24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <PCD_EP_OutSetupPacket_int+0x88>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d90c      	bls.n	8002f1c <PCD_EP_OutSetupPacket_int+0x7c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d108      	bne.n	8002f1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f14:	461a      	mov	r2, r3
 8002f16:	2101      	movs	r1, #1
 8002f18:	f002 fb1a 	bl	8005550 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	4f54300a 	.word	0x4f54300a

08002f2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d107      	bne.n	8002f5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f4a:	883b      	ldrh	r3, [r7, #0]
 8002f4c:	0419      	lsls	r1, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
 8002f58:	e028      	b.n	8002fac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4413      	add	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e00d      	b.n	8002f8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	3340      	adds	r3, #64	; 0x40
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	4413      	add	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	3301      	adds	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3ec      	bcc.n	8002f6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f94:	883b      	ldrh	r3, [r7, #0]
 8002f96:	0418      	lsls	r0, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6819      	ldr	r1, [r3, #0]
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	4302      	orrs	r2, r0
 8002fa4:	3340      	adds	r3, #64	; 0x40
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e25b      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b9d      	ldr	r3, [pc, #628]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b99      	ldr	r3, [pc, #612]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e236      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b91      	ldr	r3, [pc, #580]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a90      	ldr	r2, [pc, #576]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b8b      	ldr	r3, [pc, #556]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a8a      	ldr	r2, [pc, #552]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a87      	ldr	r2, [pc, #540]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a80      	ldr	r2, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fb1c 	bl	80016e8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fb18 	bl	80016e8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1fb      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe fb08 	bl	80016e8 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe fb04 	bl	80016e8 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1e7      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1bb      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b56      	ldr	r3, [pc, #344]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4952      	ldr	r1, [pc, #328]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_OscConfig+0x2b0>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fabd 	bl	80016e8 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fab9 	bl	80016e8 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e19c      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4940      	ldr	r1, [pc, #256]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0x2b0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fa9c 	bl	80016e8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe fa98 	bl	80016e8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e17b      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d030      	beq.n	8003240 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_RCC_OscConfig+0x2b4>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fa7c 	bl	80016e8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fa78 	bl	80016e8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e15b      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
 8003212:	e015      	b.n	8003240 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x2b4>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fa65 	bl	80016e8 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe fa61 	bl	80016e8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e144      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a0 	beq.w	800338e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d121      	bne.n	80032ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a07      	ldr	r2, [pc, #28]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fe fa27 	bl	80016e8 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e011      	b.n	80032c2 <HAL_RCC_OscConfig+0x2ce>
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	42470000 	.word	0x42470000
 80032a8:	42470e80 	.word	0x42470e80
 80032ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fe fa1a 	bl	80016e8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0fd      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCC_OscConfig+0x4d4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2f0>
 80032d6:	4b7d      	ldr	r3, [pc, #500]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a7c      	ldr	r2, [pc, #496]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	e01c      	b.n	800331e <HAL_RCC_OscConfig+0x32a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d10c      	bne.n	8003306 <HAL_RCC_OscConfig+0x312>
 80032ec:	4b77      	ldr	r3, [pc, #476]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a76      	ldr	r2, [pc, #472]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	4b74      	ldr	r3, [pc, #464]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a73      	ldr	r2, [pc, #460]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	e00b      	b.n	800331e <HAL_RCC_OscConfig+0x32a>
 8003306:	4b71      	ldr	r3, [pc, #452]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a70      	ldr	r2, [pc, #448]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	4b6e      	ldr	r3, [pc, #440]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a6d      	ldr	r2, [pc, #436]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d015      	beq.n	8003352 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7fe f9df 	bl	80016e8 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	e00a      	b.n	8003344 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7fe f9db 	bl	80016e8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f241 3288 	movw	r2, #5000	; 0x1388
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e0bc      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	4b61      	ldr	r3, [pc, #388]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ee      	beq.n	800332e <HAL_RCC_OscConfig+0x33a>
 8003350:	e014      	b.n	800337c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fe f9c9 	bl	80016e8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe f9c5 	bl	80016e8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0a6      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	4b56      	ldr	r3, [pc, #344]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ee      	bne.n	800335a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b52      	ldr	r3, [pc, #328]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a51      	ldr	r2, [pc, #324]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8092 	beq.w	80034bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003398:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d05c      	beq.n	800345e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d141      	bne.n	8003430 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ac:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <HAL_RCC_OscConfig+0x4dc>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fe f999 	bl	80016e8 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fe f995 	bl	80016e8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e078      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033cc:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	019b      	lsls	r3, r3, #6
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	4933      	ldr	r1, [pc, #204]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003402:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_RCC_OscConfig+0x4dc>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe f96e 	bl	80016e8 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe f96a 	bl	80016e8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04d      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003422:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x41c>
 800342e:	e045      	b.n	80034bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <HAL_RCC_OscConfig+0x4dc>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fe f957 	bl	80016e8 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe f953 	bl	80016e8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e036      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x44a>
 800345c:	e02e      	b.n	80034bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e029      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_RCC_OscConfig+0x4d8>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	429a      	cmp	r2, r3
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d115      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003492:	4013      	ands	r3, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003498:	4293      	cmp	r3, r2
 800349a:	d10d      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40007000 	.word	0x40007000
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470060 	.word	0x42470060

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0cc      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b68      	ldr	r3, [pc, #416]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d90c      	bls.n	8003510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0b8      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003528:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a58      	ldr	r2, [pc, #352]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003540:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a52      	ldr	r2, [pc, #328]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	494d      	ldr	r1, [pc, #308]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d044      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d119      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d003      	beq.n	8003592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	2b03      	cmp	r3, #3
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e067      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b2:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f023 0203 	bic.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4934      	ldr	r1, [pc, #208]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c4:	f7fe f890 	bl	80016e8 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035cc:	f7fe f88c 	bl	80016e8 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e04f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 020c 	and.w	r2, r3, #12
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d1eb      	bne.n	80035cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d20c      	bcs.n	800361c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e032      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4916      	ldr	r1, [pc, #88]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	490e      	ldr	r1, [pc, #56]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365a:	f000 f821 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 800365e:	4601      	mov	r1, r0
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	5cd3      	ldrb	r3, [r2, r3]
 800366e:	fa21 f303 	lsr.w	r3, r1, r3
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fff0 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023c00 	.word	0x40023c00
 8003690:	40023800 	.word	0x40023800
 8003694:	080087f0 	.word	0x080087f0
 8003698:	20000000 	.word	0x20000000
 800369c:	20000004 	.word	0x20000004

080036a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	2300      	movs	r3, #0
 80036b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d007      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x32>
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d008      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x38>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 80b4 	bne.w	8003834 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ce:	60bb      	str	r3, [r7, #8]
       break;
 80036d0:	e0b3      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d2:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036d4:	60bb      	str	r3, [r7, #8]
      break;
 80036d6:	e0b0      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d8:	4b5a      	ldr	r3, [pc, #360]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e2:	4b58      	ldr	r3, [pc, #352]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d04a      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ee:	4b55      	ldr	r3, [pc, #340]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	f04f 0400 	mov.w	r4, #0
 80036f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	ea03 0501 	and.w	r5, r3, r1
 8003704:	ea04 0602 	and.w	r6, r4, r2
 8003708:	4629      	mov	r1, r5
 800370a:	4632      	mov	r2, r6
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	0154      	lsls	r4, r2, #5
 8003716:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800371a:	014b      	lsls	r3, r1, #5
 800371c:	4619      	mov	r1, r3
 800371e:	4622      	mov	r2, r4
 8003720:	1b49      	subs	r1, r1, r5
 8003722:	eb62 0206 	sbc.w	r2, r2, r6
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	0194      	lsls	r4, r2, #6
 8003730:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003734:	018b      	lsls	r3, r1, #6
 8003736:	1a5b      	subs	r3, r3, r1
 8003738:	eb64 0402 	sbc.w	r4, r4, r2
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	00e2      	lsls	r2, r4, #3
 8003746:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800374a:	00d9      	lsls	r1, r3, #3
 800374c:	460b      	mov	r3, r1
 800374e:	4614      	mov	r4, r2
 8003750:	195b      	adds	r3, r3, r5
 8003752:	eb44 0406 	adc.w	r4, r4, r6
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	0262      	lsls	r2, r4, #9
 8003760:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003764:	0259      	lsls	r1, r3, #9
 8003766:	460b      	mov	r3, r1
 8003768:	4614      	mov	r4, r2
 800376a:	4618      	mov	r0, r3
 800376c:	4621      	mov	r1, r4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f04f 0400 	mov.w	r4, #0
 8003774:	461a      	mov	r2, r3
 8003776:	4623      	mov	r3, r4
 8003778:	f7fd fa28 	bl	8000bcc <__aeabi_uldivmod>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e049      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	f04f 0400 	mov.w	r4, #0
 800378e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	ea03 0501 	and.w	r5, r3, r1
 800379a:	ea04 0602 	and.w	r6, r4, r2
 800379e:	4629      	mov	r1, r5
 80037a0:	4632      	mov	r2, r6
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	0154      	lsls	r4, r2, #5
 80037ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037b0:	014b      	lsls	r3, r1, #5
 80037b2:	4619      	mov	r1, r3
 80037b4:	4622      	mov	r2, r4
 80037b6:	1b49      	subs	r1, r1, r5
 80037b8:	eb62 0206 	sbc.w	r2, r2, r6
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	f04f 0400 	mov.w	r4, #0
 80037c4:	0194      	lsls	r4, r2, #6
 80037c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ca:	018b      	lsls	r3, r1, #6
 80037cc:	1a5b      	subs	r3, r3, r1
 80037ce:	eb64 0402 	sbc.w	r4, r4, r2
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	00e2      	lsls	r2, r4, #3
 80037dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037e0:	00d9      	lsls	r1, r3, #3
 80037e2:	460b      	mov	r3, r1
 80037e4:	4614      	mov	r4, r2
 80037e6:	195b      	adds	r3, r3, r5
 80037e8:	eb44 0406 	adc.w	r4, r4, r6
 80037ec:	f04f 0100 	mov.w	r1, #0
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	02a2      	lsls	r2, r4, #10
 80037f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037fa:	0299      	lsls	r1, r3, #10
 80037fc:	460b      	mov	r3, r1
 80037fe:	4614      	mov	r4, r2
 8003800:	4618      	mov	r0, r3
 8003802:	4621      	mov	r1, r4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f04f 0400 	mov.w	r4, #0
 800380a:	461a      	mov	r2, r3
 800380c:	4623      	mov	r3, r4
 800380e:	f7fd f9dd 	bl	8000bcc <__aeabi_uldivmod>
 8003812:	4603      	mov	r3, r0
 8003814:	460c      	mov	r4, r1
 8003816:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	60bb      	str	r3, [r7, #8]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003836:	60bb      	str	r3, [r7, #8]
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	68bb      	ldr	r3, [r7, #8]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	007a1200 	.word	0x007a1200

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000000 	.word	0x20000000

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4601      	mov	r1, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4a03      	ldr	r2, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5cd3      	ldrb	r3, [r2, r3]
 8003880:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	08008800 	.word	0x08008800

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffdc 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003898:	4601      	mov	r1, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4a03      	ldr	r2, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	08008800 	.word	0x08008800

080038b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e03f      	b.n	800394a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fdb0 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f829 	bl	8003954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003996:	f023 030c 	bic.w	r3, r3, #12
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c2:	f040 818b 	bne.w	8003cdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4ac1      	ldr	r2, [pc, #772]	; (8003cd0 <UART_SetConfig+0x37c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d005      	beq.n	80039dc <UART_SetConfig+0x88>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4abf      	ldr	r2, [pc, #764]	; (8003cd4 <UART_SetConfig+0x380>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	f040 80bd 	bne.w	8003b56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7ff ff58 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 80039e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	461d      	mov	r5, r3
 80039e6:	f04f 0600 	mov.w	r6, #0
 80039ea:	46a8      	mov	r8, r5
 80039ec:	46b1      	mov	r9, r6
 80039ee:	eb18 0308 	adds.w	r3, r8, r8
 80039f2:	eb49 0409 	adc.w	r4, r9, r9
 80039f6:	4698      	mov	r8, r3
 80039f8:	46a1      	mov	r9, r4
 80039fa:	eb18 0805 	adds.w	r8, r8, r5
 80039fe:	eb49 0906 	adc.w	r9, r9, r6
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a16:	4688      	mov	r8, r1
 8003a18:	4691      	mov	r9, r2
 8003a1a:	eb18 0005 	adds.w	r0, r8, r5
 8003a1e:	eb49 0106 	adc.w	r1, r9, r6
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	461d      	mov	r5, r3
 8003a28:	f04f 0600 	mov.w	r6, #0
 8003a2c:	196b      	adds	r3, r5, r5
 8003a2e:	eb46 0406 	adc.w	r4, r6, r6
 8003a32:	461a      	mov	r2, r3
 8003a34:	4623      	mov	r3, r4
 8003a36:	f7fd f8c9 	bl	8000bcc <__aeabi_uldivmod>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4ba5      	ldr	r3, [pc, #660]	; (8003cd8 <UART_SetConfig+0x384>)
 8003a42:	fba3 2302 	umull	r2, r3, r3, r2
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	461d      	mov	r5, r3
 8003a50:	f04f 0600 	mov.w	r6, #0
 8003a54:	46a9      	mov	r9, r5
 8003a56:	46b2      	mov	sl, r6
 8003a58:	eb19 0309 	adds.w	r3, r9, r9
 8003a5c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a60:	4699      	mov	r9, r3
 8003a62:	46a2      	mov	sl, r4
 8003a64:	eb19 0905 	adds.w	r9, r9, r5
 8003a68:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a6c:	f04f 0100 	mov.w	r1, #0
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a80:	4689      	mov	r9, r1
 8003a82:	4692      	mov	sl, r2
 8003a84:	eb19 0005 	adds.w	r0, r9, r5
 8003a88:	eb4a 0106 	adc.w	r1, sl, r6
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	461d      	mov	r5, r3
 8003a92:	f04f 0600 	mov.w	r6, #0
 8003a96:	196b      	adds	r3, r5, r5
 8003a98:	eb46 0406 	adc.w	r4, r6, r6
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	f7fd f894 	bl	8000bcc <__aeabi_uldivmod>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b8b      	ldr	r3, [pc, #556]	; (8003cd8 <UART_SetConfig+0x384>)
 8003aac:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	2164      	movs	r1, #100	; 0x64
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	3332      	adds	r3, #50	; 0x32
 8003abe:	4a86      	ldr	r2, [pc, #536]	; (8003cd8 <UART_SetConfig+0x384>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003acc:	4498      	add	r8, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	f04f 0600 	mov.w	r6, #0
 8003ad6:	46a9      	mov	r9, r5
 8003ad8:	46b2      	mov	sl, r6
 8003ada:	eb19 0309 	adds.w	r3, r9, r9
 8003ade:	eb4a 040a 	adc.w	r4, sl, sl
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	46a2      	mov	sl, r4
 8003ae6:	eb19 0905 	adds.w	r9, r9, r5
 8003aea:	eb4a 0a06 	adc.w	sl, sl, r6
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b02:	4689      	mov	r9, r1
 8003b04:	4692      	mov	sl, r2
 8003b06:	eb19 0005 	adds.w	r0, r9, r5
 8003b0a:	eb4a 0106 	adc.w	r1, sl, r6
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	461d      	mov	r5, r3
 8003b14:	f04f 0600 	mov.w	r6, #0
 8003b18:	196b      	adds	r3, r5, r5
 8003b1a:	eb46 0406 	adc.w	r4, r6, r6
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4623      	mov	r3, r4
 8003b22:	f7fd f853 	bl	8000bcc <__aeabi_uldivmod>
 8003b26:	4603      	mov	r3, r0
 8003b28:	460c      	mov	r4, r1
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b6a      	ldr	r3, [pc, #424]	; (8003cd8 <UART_SetConfig+0x384>)
 8003b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2164      	movs	r1, #100	; 0x64
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	3332      	adds	r3, #50	; 0x32
 8003b40:	4a65      	ldr	r2, [pc, #404]	; (8003cd8 <UART_SetConfig+0x384>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	f003 0207 	and.w	r2, r3, #7
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4442      	add	r2, r8
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e26f      	b.n	8004036 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b56:	f7ff fe87 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8003b5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	461d      	mov	r5, r3
 8003b60:	f04f 0600 	mov.w	r6, #0
 8003b64:	46a8      	mov	r8, r5
 8003b66:	46b1      	mov	r9, r6
 8003b68:	eb18 0308 	adds.w	r3, r8, r8
 8003b6c:	eb49 0409 	adc.w	r4, r9, r9
 8003b70:	4698      	mov	r8, r3
 8003b72:	46a1      	mov	r9, r4
 8003b74:	eb18 0805 	adds.w	r8, r8, r5
 8003b78:	eb49 0906 	adc.w	r9, r9, r6
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b90:	4688      	mov	r8, r1
 8003b92:	4691      	mov	r9, r2
 8003b94:	eb18 0005 	adds.w	r0, r8, r5
 8003b98:	eb49 0106 	adc.w	r1, r9, r6
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	461d      	mov	r5, r3
 8003ba2:	f04f 0600 	mov.w	r6, #0
 8003ba6:	196b      	adds	r3, r5, r5
 8003ba8:	eb46 0406 	adc.w	r4, r6, r6
 8003bac:	461a      	mov	r2, r3
 8003bae:	4623      	mov	r3, r4
 8003bb0:	f7fd f80c 	bl	8000bcc <__aeabi_uldivmod>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <UART_SetConfig+0x384>)
 8003bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	461d      	mov	r5, r3
 8003bca:	f04f 0600 	mov.w	r6, #0
 8003bce:	46a9      	mov	r9, r5
 8003bd0:	46b2      	mov	sl, r6
 8003bd2:	eb19 0309 	adds.w	r3, r9, r9
 8003bd6:	eb4a 040a 	adc.w	r4, sl, sl
 8003bda:	4699      	mov	r9, r3
 8003bdc:	46a2      	mov	sl, r4
 8003bde:	eb19 0905 	adds.w	r9, r9, r5
 8003be2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bfa:	4689      	mov	r9, r1
 8003bfc:	4692      	mov	sl, r2
 8003bfe:	eb19 0005 	adds.w	r0, r9, r5
 8003c02:	eb4a 0106 	adc.w	r1, sl, r6
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	461d      	mov	r5, r3
 8003c0c:	f04f 0600 	mov.w	r6, #0
 8003c10:	196b      	adds	r3, r5, r5
 8003c12:	eb46 0406 	adc.w	r4, r6, r6
 8003c16:	461a      	mov	r2, r3
 8003c18:	4623      	mov	r3, r4
 8003c1a:	f7fc ffd7 	bl	8000bcc <__aeabi_uldivmod>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	460c      	mov	r4, r1
 8003c22:	461a      	mov	r2, r3
 8003c24:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <UART_SetConfig+0x384>)
 8003c26:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2164      	movs	r1, #100	; 0x64
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	3332      	adds	r3, #50	; 0x32
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <UART_SetConfig+0x384>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c46:	4498      	add	r8, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	f04f 0600 	mov.w	r6, #0
 8003c50:	46a9      	mov	r9, r5
 8003c52:	46b2      	mov	sl, r6
 8003c54:	eb19 0309 	adds.w	r3, r9, r9
 8003c58:	eb4a 040a 	adc.w	r4, sl, sl
 8003c5c:	4699      	mov	r9, r3
 8003c5e:	46a2      	mov	sl, r4
 8003c60:	eb19 0905 	adds.w	r9, r9, r5
 8003c64:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c7c:	4689      	mov	r9, r1
 8003c7e:	4692      	mov	sl, r2
 8003c80:	eb19 0005 	adds.w	r0, r9, r5
 8003c84:	eb4a 0106 	adc.w	r1, sl, r6
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	f04f 0600 	mov.w	r6, #0
 8003c92:	196b      	adds	r3, r5, r5
 8003c94:	eb46 0406 	adc.w	r4, r6, r6
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	f7fc ff96 	bl	8000bcc <__aeabi_uldivmod>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <UART_SetConfig+0x384>)
 8003ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	2164      	movs	r1, #100	; 0x64
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	3332      	adds	r3, #50	; 0x32
 8003cba:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <UART_SetConfig+0x384>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	f003 0207 	and.w	r2, r3, #7
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4442      	add	r2, r8
 8003ccc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cce:	e1b2      	b.n	8004036 <UART_SetConfig+0x6e2>
 8003cd0:	40011000 	.word	0x40011000
 8003cd4:	40011400 	.word	0x40011400
 8003cd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4ad7      	ldr	r2, [pc, #860]	; (8004040 <UART_SetConfig+0x6ec>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d005      	beq.n	8003cf2 <UART_SetConfig+0x39e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4ad6      	ldr	r2, [pc, #856]	; (8004044 <UART_SetConfig+0x6f0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f040 80d1 	bne.w	8003e94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf2:	f7ff fdcd 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8003cf6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	469a      	mov	sl, r3
 8003cfc:	f04f 0b00 	mov.w	fp, #0
 8003d00:	46d0      	mov	r8, sl
 8003d02:	46d9      	mov	r9, fp
 8003d04:	eb18 0308 	adds.w	r3, r8, r8
 8003d08:	eb49 0409 	adc.w	r4, r9, r9
 8003d0c:	4698      	mov	r8, r3
 8003d0e:	46a1      	mov	r9, r4
 8003d10:	eb18 080a 	adds.w	r8, r8, sl
 8003d14:	eb49 090b 	adc.w	r9, r9, fp
 8003d18:	f04f 0100 	mov.w	r1, #0
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d2c:	4688      	mov	r8, r1
 8003d2e:	4691      	mov	r9, r2
 8003d30:	eb1a 0508 	adds.w	r5, sl, r8
 8003d34:	eb4b 0609 	adc.w	r6, fp, r9
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	f04f 0400 	mov.w	r4, #0
 8003d4a:	0094      	lsls	r4, r2, #2
 8003d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d50:	008b      	lsls	r3, r1, #2
 8003d52:	461a      	mov	r2, r3
 8003d54:	4623      	mov	r3, r4
 8003d56:	4628      	mov	r0, r5
 8003d58:	4631      	mov	r1, r6
 8003d5a:	f7fc ff37 	bl	8000bcc <__aeabi_uldivmod>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	460c      	mov	r4, r1
 8003d62:	461a      	mov	r2, r3
 8003d64:	4bb8      	ldr	r3, [pc, #736]	; (8004048 <UART_SetConfig+0x6f4>)
 8003d66:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	469b      	mov	fp, r3
 8003d74:	f04f 0c00 	mov.w	ip, #0
 8003d78:	46d9      	mov	r9, fp
 8003d7a:	46e2      	mov	sl, ip
 8003d7c:	eb19 0309 	adds.w	r3, r9, r9
 8003d80:	eb4a 040a 	adc.w	r4, sl, sl
 8003d84:	4699      	mov	r9, r3
 8003d86:	46a2      	mov	sl, r4
 8003d88:	eb19 090b 	adds.w	r9, r9, fp
 8003d8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d90:	f04f 0100 	mov.w	r1, #0
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003da4:	4689      	mov	r9, r1
 8003da6:	4692      	mov	sl, r2
 8003da8:	eb1b 0509 	adds.w	r5, fp, r9
 8003dac:	eb4c 060a 	adc.w	r6, ip, sl
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	f04f 0400 	mov.w	r4, #0
 8003dc2:	0094      	lsls	r4, r2, #2
 8003dc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dc8:	008b      	lsls	r3, r1, #2
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4623      	mov	r3, r4
 8003dce:	4628      	mov	r0, r5
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	f7fc fefb 	bl	8000bcc <__aeabi_uldivmod>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b9a      	ldr	r3, [pc, #616]	; (8004048 <UART_SetConfig+0x6f4>)
 8003dde:	fba3 1302 	umull	r1, r3, r3, r2
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2164      	movs	r1, #100	; 0x64
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	3332      	adds	r3, #50	; 0x32
 8003df0:	4a95      	ldr	r2, [pc, #596]	; (8004048 <UART_SetConfig+0x6f4>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfc:	4498      	add	r8, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	469b      	mov	fp, r3
 8003e02:	f04f 0c00 	mov.w	ip, #0
 8003e06:	46d9      	mov	r9, fp
 8003e08:	46e2      	mov	sl, ip
 8003e0a:	eb19 0309 	adds.w	r3, r9, r9
 8003e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e12:	4699      	mov	r9, r3
 8003e14:	46a2      	mov	sl, r4
 8003e16:	eb19 090b 	adds.w	r9, r9, fp
 8003e1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e32:	4689      	mov	r9, r1
 8003e34:	4692      	mov	sl, r2
 8003e36:	eb1b 0509 	adds.w	r5, fp, r9
 8003e3a:	eb4c 060a 	adc.w	r6, ip, sl
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	f04f 0400 	mov.w	r4, #0
 8003e50:	0094      	lsls	r4, r2, #2
 8003e52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e56:	008b      	lsls	r3, r1, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	4631      	mov	r1, r6
 8003e60:	f7fc feb4 	bl	8000bcc <__aeabi_uldivmod>
 8003e64:	4603      	mov	r3, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b77      	ldr	r3, [pc, #476]	; (8004048 <UART_SetConfig+0x6f4>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a72      	ldr	r2, [pc, #456]	; (8004048 <UART_SetConfig+0x6f4>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4442      	add	r2, r8
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	e0d0      	b.n	8004036 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7ff fce8 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8003e98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	469a      	mov	sl, r3
 8003e9e:	f04f 0b00 	mov.w	fp, #0
 8003ea2:	46d0      	mov	r8, sl
 8003ea4:	46d9      	mov	r9, fp
 8003ea6:	eb18 0308 	adds.w	r3, r8, r8
 8003eaa:	eb49 0409 	adc.w	r4, r9, r9
 8003eae:	4698      	mov	r8, r3
 8003eb0:	46a1      	mov	r9, r4
 8003eb2:	eb18 080a 	adds.w	r8, r8, sl
 8003eb6:	eb49 090b 	adc.w	r9, r9, fp
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ec6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ece:	4688      	mov	r8, r1
 8003ed0:	4691      	mov	r9, r2
 8003ed2:	eb1a 0508 	adds.w	r5, sl, r8
 8003ed6:	eb4b 0609 	adc.w	r6, fp, r9
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	0094      	lsls	r4, r2, #2
 8003eee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef2:	008b      	lsls	r3, r1, #2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	4628      	mov	r0, r5
 8003efa:	4631      	mov	r1, r6
 8003efc:	f7fc fe66 	bl	8000bcc <__aeabi_uldivmod>
 8003f00:	4603      	mov	r3, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b50      	ldr	r3, [pc, #320]	; (8004048 <UART_SetConfig+0x6f4>)
 8003f08:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	469b      	mov	fp, r3
 8003f16:	f04f 0c00 	mov.w	ip, #0
 8003f1a:	46d9      	mov	r9, fp
 8003f1c:	46e2      	mov	sl, ip
 8003f1e:	eb19 0309 	adds.w	r3, r9, r9
 8003f22:	eb4a 040a 	adc.w	r4, sl, sl
 8003f26:	4699      	mov	r9, r3
 8003f28:	46a2      	mov	sl, r4
 8003f2a:	eb19 090b 	adds.w	r9, r9, fp
 8003f2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f46:	4689      	mov	r9, r1
 8003f48:	4692      	mov	sl, r2
 8003f4a:	eb1b 0509 	adds.w	r5, fp, r9
 8003f4e:	eb4c 060a 	adc.w	r6, ip, sl
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4619      	mov	r1, r3
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	f04f 0400 	mov.w	r4, #0
 8003f64:	0094      	lsls	r4, r2, #2
 8003f66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f6a:	008b      	lsls	r3, r1, #2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	4631      	mov	r1, r6
 8003f74:	f7fc fe2a 	bl	8000bcc <__aeabi_uldivmod>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b32      	ldr	r3, [pc, #200]	; (8004048 <UART_SetConfig+0x6f4>)
 8003f80:	fba3 1302 	umull	r1, r3, r3, r2
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	2164      	movs	r1, #100	; 0x64
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	3332      	adds	r3, #50	; 0x32
 8003f92:	4a2d      	ldr	r2, [pc, #180]	; (8004048 <UART_SetConfig+0x6f4>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f9e:	4498      	add	r8, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	469b      	mov	fp, r3
 8003fa4:	f04f 0c00 	mov.w	ip, #0
 8003fa8:	46d9      	mov	r9, fp
 8003faa:	46e2      	mov	sl, ip
 8003fac:	eb19 0309 	adds.w	r3, r9, r9
 8003fb0:	eb4a 040a 	adc.w	r4, sl, sl
 8003fb4:	4699      	mov	r9, r3
 8003fb6:	46a2      	mov	sl, r4
 8003fb8:	eb19 090b 	adds.w	r9, r9, fp
 8003fbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fd4:	4689      	mov	r9, r1
 8003fd6:	4692      	mov	sl, r2
 8003fd8:	eb1b 0509 	adds.w	r5, fp, r9
 8003fdc:	eb4c 060a 	adc.w	r6, ip, sl
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	f04f 0400 	mov.w	r4, #0
 8003ff2:	0094      	lsls	r4, r2, #2
 8003ff4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ff8:	008b      	lsls	r3, r1, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	4631      	mov	r1, r6
 8004002:	f7fc fde3 	bl	8000bcc <__aeabi_uldivmod>
 8004006:	4603      	mov	r3, r0
 8004008:	460c      	mov	r4, r1
 800400a:	461a      	mov	r2, r3
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <UART_SetConfig+0x6f4>)
 800400e:	fba3 1302 	umull	r1, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2164      	movs	r1, #100	; 0x64
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	3332      	adds	r3, #50	; 0x32
 8004020:	4a09      	ldr	r2, [pc, #36]	; (8004048 <UART_SetConfig+0x6f4>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4442      	add	r2, r8
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	e7ff      	b.n	8004036 <UART_SetConfig+0x6e2>
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004040:	40011000 	.word	0x40011000
 8004044:	40011400 	.word	0x40011400
 8004048:	51eb851f 	.word	0x51eb851f

0800404c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800404c:	b084      	sub	sp, #16
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	f107 001c 	add.w	r0, r7, #28
 800405a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	2b01      	cmp	r3, #1
 8004062:	d122      	bne.n	80040aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800408c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f001 fab4 	bl	800560c <USB_CoreReset>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]
 80040a8:	e01a      	b.n	80040e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f001 faa8 	bl	800560c <USB_CoreReset>
 80040bc:	4603      	mov	r3, r0
 80040be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
 80040d2:	e005      	b.n	80040e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10b      	bne.n	80040fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f043 0206 	orr.w	r2, r3, #6
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800410a:	b004      	add	sp, #16
 800410c:	4770      	bx	lr
	...

08004110 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d165      	bne.n	80041f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4a41      	ldr	r2, [pc, #260]	; (800422c <USB_SetTurnaroundTime+0x11c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d906      	bls.n	800413a <USB_SetTurnaroundTime+0x2a>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4a40      	ldr	r2, [pc, #256]	; (8004230 <USB_SetTurnaroundTime+0x120>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d802      	bhi.n	800413a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004134:	230f      	movs	r3, #15
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e062      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4a3c      	ldr	r2, [pc, #240]	; (8004230 <USB_SetTurnaroundTime+0x120>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d906      	bls.n	8004150 <USB_SetTurnaroundTime+0x40>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4a3b      	ldr	r2, [pc, #236]	; (8004234 <USB_SetTurnaroundTime+0x124>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d802      	bhi.n	8004150 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800414a:	230e      	movs	r3, #14
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e057      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a38      	ldr	r2, [pc, #224]	; (8004234 <USB_SetTurnaroundTime+0x124>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d906      	bls.n	8004166 <USB_SetTurnaroundTime+0x56>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a37      	ldr	r2, [pc, #220]	; (8004238 <USB_SetTurnaroundTime+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d802      	bhi.n	8004166 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004160:	230d      	movs	r3, #13
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e04c      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4a33      	ldr	r2, [pc, #204]	; (8004238 <USB_SetTurnaroundTime+0x128>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d906      	bls.n	800417c <USB_SetTurnaroundTime+0x6c>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4a32      	ldr	r2, [pc, #200]	; (800423c <USB_SetTurnaroundTime+0x12c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d802      	bhi.n	800417c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004176:	230c      	movs	r3, #12
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e041      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4a2f      	ldr	r2, [pc, #188]	; (800423c <USB_SetTurnaroundTime+0x12c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d906      	bls.n	8004192 <USB_SetTurnaroundTime+0x82>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4a2e      	ldr	r2, [pc, #184]	; (8004240 <USB_SetTurnaroundTime+0x130>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d802      	bhi.n	8004192 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800418c:	230b      	movs	r3, #11
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e036      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a2a      	ldr	r2, [pc, #168]	; (8004240 <USB_SetTurnaroundTime+0x130>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d906      	bls.n	80041a8 <USB_SetTurnaroundTime+0x98>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4a29      	ldr	r2, [pc, #164]	; (8004244 <USB_SetTurnaroundTime+0x134>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d802      	bhi.n	80041a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041a2:	230a      	movs	r3, #10
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e02b      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a26      	ldr	r2, [pc, #152]	; (8004244 <USB_SetTurnaroundTime+0x134>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d906      	bls.n	80041be <USB_SetTurnaroundTime+0xae>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4a25      	ldr	r2, [pc, #148]	; (8004248 <USB_SetTurnaroundTime+0x138>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d802      	bhi.n	80041be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041b8:	2309      	movs	r3, #9
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e020      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a21      	ldr	r2, [pc, #132]	; (8004248 <USB_SetTurnaroundTime+0x138>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d906      	bls.n	80041d4 <USB_SetTurnaroundTime+0xc4>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a20      	ldr	r2, [pc, #128]	; (800424c <USB_SetTurnaroundTime+0x13c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d802      	bhi.n	80041d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041ce:	2308      	movs	r3, #8
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e015      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a1d      	ldr	r2, [pc, #116]	; (800424c <USB_SetTurnaroundTime+0x13c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d906      	bls.n	80041ea <USB_SetTurnaroundTime+0xda>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <USB_SetTurnaroundTime+0x140>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d802      	bhi.n	80041ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041e4:	2307      	movs	r3, #7
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e00a      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041ea:	2306      	movs	r3, #6
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e007      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041f6:	2309      	movs	r3, #9
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	e001      	b.n	8004200 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041fc:	2309      	movs	r3, #9
 80041fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	029b      	lsls	r3, r3, #10
 8004214:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	00d8acbf 	.word	0x00d8acbf
 8004230:	00e4e1bf 	.word	0x00e4e1bf
 8004234:	00f423ff 	.word	0x00f423ff
 8004238:	0106737f 	.word	0x0106737f
 800423c:	011a499f 	.word	0x011a499f
 8004240:	01312cff 	.word	0x01312cff
 8004244:	014ca43f 	.word	0x014ca43f
 8004248:	016e35ff 	.word	0x016e35ff
 800424c:	01a6ab1f 	.word	0x01a6ab1f
 8004250:	01e847ff 	.word	0x01e847ff

08004254 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f023 0201 	bic.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d106      	bne.n	80042c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	e00b      	b.n	80042dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	e001      	b.n	80042dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e003      	b.n	80042e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80042dc:	2032      	movs	r0, #50	; 0x32
 80042de:	f7fd fa0f 	bl	8001700 <HAL_Delay>

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ec:	b084      	sub	sp, #16
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	e009      	b.n	8004320 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3340      	adds	r3, #64	; 0x40
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0e      	cmp	r3, #14
 8004324:	d9f2      	bls.n	800430c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11c      	bne.n	8004366 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
 8004364:	e00b      	b.n	800437e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004384:	461a      	mov	r2, r3
 8004386:	2300      	movs	r3, #0
 8004388:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	4619      	mov	r1, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	461a      	mov	r2, r3
 800439a:	680b      	ldr	r3, [r1, #0]
 800439c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043aa:	2100      	movs	r1, #0
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f949 	bl	8004644 <USB_SetDevSpeed>
 80043b2:	e008      	b.n	80043c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043b4:	2101      	movs	r1, #1
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f944 	bl	8004644 <USB_SetDevSpeed>
 80043bc:	e003      	b.n	80043c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043be:	2103      	movs	r1, #3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f93f 	bl	8004644 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043c6:	2110      	movs	r1, #16
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f8f3 	bl	80045b4 <USB_FlushTxFifo>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f911 	bl	8004600 <USB_FlushRxFifo>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	e043      	b.n	800449a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004428:	d118      	bne.n	800445c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	461a      	mov	r2, r3
 800443e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	e013      	b.n	800446e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	461a      	mov	r2, r3
 8004454:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e008      	b.n	800446e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	461a      	mov	r2, r3
 800446a:	2300      	movs	r3, #0
 800446c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	461a      	mov	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	461a      	mov	r2, r3
 800448e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004492:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3301      	adds	r3, #1
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d3b7      	bcc.n	8004412 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e043      	b.n	8004530 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044be:	d118      	bne.n	80044f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	461a      	mov	r2, r3
 80044d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e013      	b.n	8004504 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	461a      	mov	r2, r3
 80044ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	e008      	b.n	8004504 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	461a      	mov	r2, r3
 8004500:	2300      	movs	r3, #0
 8004502:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	461a      	mov	r2, r3
 8004512:	2300      	movs	r3, #0
 8004514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	461a      	mov	r2, r3
 8004524:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004528:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3301      	adds	r3, #1
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	d3b7      	bcc.n	80044a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004558:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f043 0210 	orr.w	r2, r3, #16
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <USB_DevInit+0x2c4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f043 0208 	orr.w	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800458a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ac:	b004      	add	sp, #16
 80045ae:	4770      	bx	lr
 80045b0:	803c3800 	.word	0x803c3800

080045b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <USB_FlushTxFifo+0x48>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e006      	b.n	80045ee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d0f0      	beq.n	80045ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	00030d40 	.word	0x00030d40

08004600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2210      	movs	r2, #16
 8004610:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a09      	ldr	r2, [pc, #36]	; (8004640 <USB_FlushRxFifo+0x40>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e006      	b.n	8004632 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b10      	cmp	r3, #16
 800462e:	d0f0      	beq.n	8004612 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	00030d40 	.word	0x00030d40

08004644 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004676:	b480      	push	{r7}
 8004678:	b087      	sub	sp, #28
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0306 	and.w	r3, r3, #6
 800468e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004696:	2300      	movs	r3, #0
 8004698:	75fb      	strb	r3, [r7, #23]
 800469a:	e00a      	b.n	80046b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d002      	beq.n	80046a8 <USB_GetDevSpeed+0x32>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b06      	cmp	r3, #6
 80046a6:	d102      	bne.n	80046ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046a8:	2302      	movs	r3, #2
 80046aa:	75fb      	strb	r3, [r7, #23]
 80046ac:	e001      	b.n	80046b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046ae:	230f      	movs	r3, #15
 80046b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d13a      	bne.n	8004752 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e2:	69da      	ldr	r2, [r3, #28]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d155      	bne.n	80047c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	78db      	ldrb	r3, [r3, #3]
 800472e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004730:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	059b      	lsls	r3, r3, #22
 8004736:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004738:	4313      	orrs	r3, r2
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	e036      	b.n	80047c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	2101      	movs	r1, #1
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004770:	4313      	orrs	r3, r2
 8004772:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11a      	bne.n	80047c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	78db      	ldrb	r3, [r3, #3]
 80047a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047a6:	430b      	orrs	r3, r1
 80047a8:	4313      	orrs	r3, r2
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d161      	bne.n	80048b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004802:	d11f      	bne.n	8004844 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004822:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004842:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	2101      	movs	r1, #1
 8004856:	fa01 f303 	lsl.w	r3, r1, r3
 800485a:	b29b      	uxth	r3, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004864:	4013      	ands	r3, r2
 8004866:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f303 	lsl.w	r3, r1, r3
 800487e:	b29b      	uxth	r3, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	68f9      	ldr	r1, [r7, #12]
 8004884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004888:	4013      	ands	r3, r2
 800488a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	0159      	lsls	r1, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	440b      	add	r3, r1
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	4619      	mov	r1, r3
 80048a8:	4b35      	ldr	r3, [pc, #212]	; (8004980 <USB_DeactivateEndpoint+0x1b0>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
 80048ae:	e060      	b.n	8004972 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c6:	d11f      	bne.n	8004908 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004902:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004906:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	2101      	movs	r1, #1
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	43db      	mvns	r3, r3
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004928:	4013      	ands	r3, r2
 800492a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	2101      	movs	r1, #1
 800493e:	fa01 f303 	lsl.w	r3, r1, r3
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	43db      	mvns	r3, r3
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800494c:	4013      	ands	r3, r2
 800494e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	0159      	lsls	r1, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	440b      	add	r3, r1
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	4619      	mov	r1, r3
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <USB_DeactivateEndpoint+0x1b4>)
 800496e:	4013      	ands	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	ec337800 	.word	0xec337800
 8004984:	eff37800 	.word	0xeff37800

08004988 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	785b      	ldrb	r3, [r3, #1]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	f040 815c 	bne.w	8004c62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d132      	bne.n	8004a18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a10:	0cdb      	lsrs	r3, r3, #19
 8004a12:	04db      	lsls	r3, r3, #19
 8004a14:	6113      	str	r3, [r2, #16]
 8004a16:	e074      	b.n	8004b02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	0cdb      	lsrs	r3, r3, #19
 8004a34:	04db      	lsls	r3, r3, #19
 8004a36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6959      	ldr	r1, [r3, #20]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	440b      	add	r3, r1
 8004a74:	1e59      	subs	r1, r3, #1
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a7e:	04d9      	lsls	r1, r3, #19
 8004a80:	4b9d      	ldr	r3, [pc, #628]	; (8004cf8 <USB_EPStartXfer+0x370>)
 8004a82:	400b      	ands	r3, r1
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	0148      	lsls	r0, r1, #5
 8004a88:	69f9      	ldr	r1, [r7, #28]
 8004a8a:	4401      	add	r1, r0
 8004a8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a90:	4313      	orrs	r3, r2
 8004a92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aaa:	69b9      	ldr	r1, [r7, #24]
 8004aac:	0148      	lsls	r0, r1, #5
 8004aae:	69f9      	ldr	r1, [r7, #28]
 8004ab0:	4401      	add	r1, r0
 8004ab2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	78db      	ldrb	r3, [r3, #3]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d11f      	bne.n	8004b02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004adc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ae0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d14b      	bne.n	8004ba0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	78db      	ldrb	r3, [r3, #3]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d128      	bne.n	8004b7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d110      	bne.n	8004b5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e00f      	b.n	8004b7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e12f      	b.n	8004e00 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	78db      	ldrb	r3, [r3, #3]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d015      	beq.n	8004bf4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8117 	beq.w	8004e00 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	2101      	movs	r1, #1
 8004be4:	fa01 f303 	lsl.w	r3, r1, r3
 8004be8:	69f9      	ldr	r1, [r7, #28]
 8004bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	634b      	str	r3, [r1, #52]	; 0x34
 8004bf2:	e105      	b.n	8004e00 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d110      	bne.n	8004c26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	e00f      	b.n	8004c46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	68d9      	ldr	r1, [r3, #12]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	b298      	uxth	r0, r3
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	4603      	mov	r3, r0
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fa2b 	bl	80050b6 <USB_WritePacket>
 8004c60:	e0ce      	b.n	8004e00 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7c:	0cdb      	lsrs	r3, r3, #19
 8004c7e:	04db      	lsls	r3, r3, #19
 8004c80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ca0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ca4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d126      	bne.n	8004cfc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc4:	69b9      	ldr	r1, [r7, #24]
 8004cc6:	0148      	lsls	r0, r1, #5
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	4401      	add	r1, r0
 8004ccc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf2:	6113      	str	r3, [r2, #16]
 8004cf4:	e036      	b.n	8004d64 <USB_EPStartXfer+0x3dc>
 8004cf6:	bf00      	nop
 8004cf8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	1e5a      	subs	r2, r3, #1
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	8afb      	ldrh	r3, [r7, #22]
 8004d22:	04d9      	lsls	r1, r3, #19
 8004d24:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <USB_EPStartXfer+0x484>)
 8004d26:	400b      	ands	r3, r1
 8004d28:	69b9      	ldr	r1, [r7, #24]
 8004d2a:	0148      	lsls	r0, r1, #5
 8004d2c:	69f9      	ldr	r1, [r7, #28]
 8004d2e:	4401      	add	r1, r0
 8004d30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d34:	4313      	orrs	r3, r2
 8004d36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	8af9      	ldrh	r1, [r7, #22]
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	0148      	lsls	r0, r1, #5
 8004d58:	69f9      	ldr	r1, [r7, #28]
 8004d5a:	4401      	add	r1, r0
 8004d5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d60:	4313      	orrs	r3, r2
 8004d62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d10d      	bne.n	8004d86 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	68d9      	ldr	r1, [r3, #12]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	460a      	mov	r2, r1
 8004d84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	78db      	ldrb	r3, [r3, #3]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d128      	bne.n	8004de0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d110      	bne.n	8004dc0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e00f      	b.n	8004de0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	1ff80000 	.word	0x1ff80000

08004e10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 80cd 	bne.w	8004fcc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d132      	bne.n	8004ea0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	0cdb      	lsrs	r3, r3, #19
 8004e9a:	04db      	lsls	r3, r3, #19
 8004e9c:	6113      	str	r3, [r2, #16]
 8004e9e:	e04e      	b.n	8004f3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	0cdb      	lsrs	r3, r3, #19
 8004ebc:	04db      	lsls	r3, r3, #19
 8004ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d903      	bls.n	8004ef8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2e:	6939      	ldr	r1, [r7, #16]
 8004f30:	0148      	lsls	r0, r1, #5
 8004f32:	6979      	ldr	r1, [r7, #20]
 8004f34:	4401      	add	r1, r0
 8004f36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d11e      	bne.n	8004f82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e092      	b.n	80050a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d07e      	beq.n	80050a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	2101      	movs	r1, #1
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	634b      	str	r3, [r1, #52]	; 0x34
 8004fca:	e06d      	b.n	80050a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe6:	0cdb      	lsrs	r3, r3, #19
 8004fe8:	04db      	lsls	r3, r3, #19
 8004fea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	440a      	add	r2, r1
 8005002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005006:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800500a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800500e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800503e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005056:	6939      	ldr	r1, [r7, #16]
 8005058:	0148      	lsls	r0, r1, #5
 800505a:	6979      	ldr	r1, [r7, #20]
 800505c:	4401      	add	r1, r0
 800505e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005062:	4313      	orrs	r3, r2
 8005064:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d10d      	bne.n	8005088 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d009      	beq.n	8005088 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	68d9      	ldr	r1, [r3, #12]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	460a      	mov	r2, r1
 8005086:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b089      	sub	sp, #36	; 0x24
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	4611      	mov	r1, r2
 80050c2:	461a      	mov	r2, r3
 80050c4:	460b      	mov	r3, r1
 80050c6:	71fb      	strb	r3, [r7, #7]
 80050c8:	4613      	mov	r3, r2
 80050ca:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80050d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11a      	bne.n	8005112 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050dc:	88bb      	ldrh	r3, [r7, #4]
 80050de:	3303      	adds	r3, #3
 80050e0:	089b      	lsrs	r3, r3, #2
 80050e2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	e00f      	b.n	800510a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	031a      	lsls	r2, r3, #12
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f6:	461a      	mov	r2, r3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3304      	adds	r3, #4
 8005102:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	3301      	adds	r3, #1
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	429a      	cmp	r2, r3
 8005110:	d3eb      	bcc.n	80050ea <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3724      	adds	r7, #36	; 0x24
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005120:	b480      	push	{r7}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	3303      	adds	r3, #3
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800513e:	2300      	movs	r3, #0
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	e00b      	b.n	800515c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	3304      	adds	r3, #4
 8005154:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	3301      	adds	r3, #1
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d3ef      	bcc.n	8005144 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005164:	69fb      	ldr	r3, [r7, #28]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3724      	adds	r7, #36	; 0x24
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d12c      	bne.n	80051e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	db12      	blt.n	80051c6 <USB_EPSetStall+0x54>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00f      	beq.n	80051c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e02b      	b.n	8005240 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	db12      	blt.n	8005220 <USB_EPSetStall+0xae>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00f      	beq.n	8005220 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800521e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800523e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d128      	bne.n	80052bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005288:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	78db      	ldrb	r3, [r3, #3]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d003      	beq.n	800529a <USB_EPClearStall+0x4c>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d138      	bne.n	800530c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	e027      	b.n	800530c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	78db      	ldrb	r3, [r3, #3]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d003      	beq.n	80052ec <USB_EPClearStall+0x9e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	78db      	ldrb	r3, [r3, #3]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d10f      	bne.n	800530c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005338:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800533c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005354:	4313      	orrs	r3, r2
 8005356:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005380:	f023 0302 	bic.w	r3, r3, #2
 8005384:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005386:	2003      	movs	r0, #3
 8005388:	f7fc f9ba 	bl	8001700 <HAL_Delay>

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80053b6:	2003      	movs	r0, #3
 80053b8:	f7fc f9a2 	bl	8001700 <HAL_Delay>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4013      	ands	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	0c1b      	lsrs	r3, r3, #16
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4013      	ands	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	b29b      	uxth	r3, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005482:	68bb      	ldr	r3, [r7, #8]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
 80054c0:	01db      	lsls	r3, r3, #7
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054ca:	78fb      	ldrb	r3, [r7, #3]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054de:	68bb      	ldr	r3, [r7, #8]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0301 	and.w	r3, r3, #1
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005522:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	460b      	mov	r3, r1
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	333c      	adds	r3, #60	; 0x3c
 8005566:	3304      	adds	r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4a26      	ldr	r2, [pc, #152]	; (8005608 <USB_EP0_OutStart+0xb8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d90a      	bls.n	800558a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005584:	d101      	bne.n	800558a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e037      	b.n	80055fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	461a      	mov	r2, r3
 8005592:	2300      	movs	r3, #0
 8005594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b8:	f043 0318 	orr.w	r3, r3, #24
 80055bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055d2:	7afb      	ldrb	r3, [r7, #11]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10f      	bne.n	80055f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	461a      	mov	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	4f54300a 	.word	0x4f54300a

0800560c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4a13      	ldr	r2, [pc, #76]	; (8005670 <USB_CoreReset+0x64>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e01b      	b.n	8005662 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	daf2      	bge.n	8005618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f043 0201 	orr.w	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3301      	adds	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a09      	ldr	r2, [pc, #36]	; (8005670 <USB_CoreReset+0x64>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d901      	bls.n	8005654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d0f0      	beq.n	8005642 <USB_CoreReset+0x36>

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	00030d40 	.word	0x00030d40

08005674 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005680:	2010      	movs	r0, #16
 8005682:	f001 ff0f 	bl	80074a4 <malloc>
 8005686:	4603      	mov	r3, r0
 8005688:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005698:	2302      	movs	r3, #2
 800569a:	e01b      	b.n	80056d4 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7c1b      	ldrb	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2207      	movs	r2, #7
 80056b0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80056b2:	e002      	b.n	80056ba <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	220a      	movs	r2, #10
 80056b8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80056ba:	2304      	movs	r3, #4
 80056bc:	2203      	movs	r2, #3
 80056be:	2181      	movs	r1, #129	; 0x81
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 fd88 	bl	80071d6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80056e8:	2181      	movs	r1, #129	; 0x81
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f001 fd99 	bl	8007222 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800570c:	4618      	mov	r0, r3
 800570e:	f001 fed1 	bl	80074b4 <free>
    pdev->pClassData = NULL;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005734:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005746:	2b00      	cmp	r3, #0
 8005748:	d045      	beq.n	80057d6 <USBD_HID_Setup+0xb2>
 800574a:	2b20      	cmp	r3, #32
 800574c:	f040 80d4 	bne.w	80058f8 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	3b02      	subs	r3, #2
 8005756:	2b09      	cmp	r3, #9
 8005758:	d835      	bhi.n	80057c6 <USBD_HID_Setup+0xa2>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <USBD_HID_Setup+0x3c>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	080057b7 	.word	0x080057b7
 8005764:	08005797 	.word	0x08005797
 8005768:	080057c7 	.word	0x080057c7
 800576c:	080057c7 	.word	0x080057c7
 8005770:	080057c7 	.word	0x080057c7
 8005774:	080057c7 	.word	0x080057c7
 8005778:	080057c7 	.word	0x080057c7
 800577c:	080057c7 	.word	0x080057c7
 8005780:	080057a5 	.word	0x080057a5
 8005784:	08005789 	.word	0x08005789
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	885b      	ldrh	r3, [r3, #2]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]
      break;
 8005794:	e01e      	b.n	80057d4 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 f9c8 	bl	8006b32 <USBD_CtlSendData>
      break;
 80057a2:	e017      	b.n	80057d4 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	885b      	ldrh	r3, [r3, #2]
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	605a      	str	r2, [r3, #4]
      break;
 80057b4:	e00e      	b.n	80057d4 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2201      	movs	r2, #1
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 f9b7 	bl	8006b32 <USBD_CtlSendData>
      break;
 80057c4:	e006      	b.n	80057d4 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 f941 	bl	8006a50 <USBD_CtlError>
      ret = USBD_FAIL;
 80057ce:	2303      	movs	r3, #3
 80057d0:	75fb      	strb	r3, [r7, #23]
      break;
 80057d2:	bf00      	nop
    }
    break;
 80057d4:	e097      	b.n	8005906 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b0b      	cmp	r3, #11
 80057dc:	f200 8083 	bhi.w	80058e6 <USBD_HID_Setup+0x1c2>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <USBD_HID_Setup+0xc4>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	08005819 	.word	0x08005819
 80057ec:	080058f5 	.word	0x080058f5
 80057f0:	080058e7 	.word	0x080058e7
 80057f4:	080058e7 	.word	0x080058e7
 80057f8:	080058e7 	.word	0x080058e7
 80057fc:	080058e7 	.word	0x080058e7
 8005800:	08005841 	.word	0x08005841
 8005804:	080058e7 	.word	0x080058e7
 8005808:	080058e7 	.word	0x080058e7
 800580c:	080058e7 	.word	0x080058e7
 8005810:	08005899 	.word	0x08005899
 8005814:	080058c1 	.word	0x080058c1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800581e:	2b03      	cmp	r3, #3
 8005820:	d107      	bne.n	8005832 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005822:	f107 030a 	add.w	r3, r7, #10
 8005826:	2202      	movs	r2, #2
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 f981 	bl	8006b32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005830:	e061      	b.n	80058f6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 f90b 	bl	8006a50 <USBD_CtlError>
        ret = USBD_FAIL;
 800583a:	2303      	movs	r3, #3
 800583c:	75fb      	strb	r3, [r7, #23]
      break;
 800583e:	e05a      	b.n	80058f6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	885b      	ldrh	r3, [r3, #2]
 8005844:	0a1b      	lsrs	r3, r3, #8
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b22      	cmp	r3, #34	; 0x22
 800584a:	d108      	bne.n	800585e <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	88db      	ldrh	r3, [r3, #6]
 8005850:	2b4a      	cmp	r3, #74	; 0x4a
 8005852:	bf28      	it	cs
 8005854:	234a      	movcs	r3, #74	; 0x4a
 8005856:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8005858:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <USBD_HID_Setup+0x1ec>)
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	e015      	b.n	800588a <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	885b      	ldrh	r3, [r3, #2]
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b21      	cmp	r3, #33	; 0x21
 8005868:	d108      	bne.n	800587c <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800586a:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <USBD_HID_Setup+0x1f0>)
 800586c:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	88db      	ldrh	r3, [r3, #6]
 8005872:	2b09      	cmp	r3, #9
 8005874:	bf28      	it	cs
 8005876:	2309      	movcs	r3, #9
 8005878:	82bb      	strh	r3, [r7, #20]
 800587a:	e006      	b.n	800588a <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 f8e6 	bl	8006a50 <USBD_CtlError>
        ret = USBD_FAIL;
 8005884:	2303      	movs	r3, #3
 8005886:	75fb      	strb	r3, [r7, #23]
        break;
 8005888:	e035      	b.n	80058f6 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800588a:	8abb      	ldrh	r3, [r7, #20]
 800588c:	461a      	mov	r2, r3
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 f94e 	bl	8006b32 <USBD_CtlSendData>
      break;
 8005896:	e02e      	b.n	80058f6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d107      	bne.n	80058b2 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3308      	adds	r3, #8
 80058a6:	2201      	movs	r2, #1
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f001 f941 	bl	8006b32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80058b0:	e021      	b.n	80058f6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f8cb 	bl	8006a50 <USBD_CtlError>
        ret = USBD_FAIL;
 80058ba:	2303      	movs	r3, #3
 80058bc:	75fb      	strb	r3, [r7, #23]
      break;
 80058be:	e01a      	b.n	80058f6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d106      	bne.n	80058d8 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	885b      	ldrh	r3, [r3, #2]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80058d6:	e00e      	b.n	80058f6 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 f8b8 	bl	8006a50 <USBD_CtlError>
        ret = USBD_FAIL;
 80058e0:	2303      	movs	r3, #3
 80058e2:	75fb      	strb	r3, [r7, #23]
      break;
 80058e4:	e007      	b.n	80058f6 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f8b1 	bl	8006a50 <USBD_CtlError>
      ret = USBD_FAIL;
 80058ee:	2303      	movs	r3, #3
 80058f0:	75fb      	strb	r3, [r7, #23]
      break;
 80058f2:	e000      	b.n	80058f6 <USBD_HID_Setup+0x1d2>
      break;
 80058f4:	bf00      	nop
    }
    break;
 80058f6:	e006      	b.n	8005906 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 f8a8 	bl	8006a50 <USBD_CtlError>
    ret = USBD_FAIL;
 8005900:	2303      	movs	r3, #3
 8005902:	75fb      	strb	r3, [r7, #23]
    break;
 8005904:	bf00      	nop
  }

  return (uint8_t)ret;
 8005906:	7dfb      	ldrb	r3, [r7, #23]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	200000c8 	.word	0x200000c8
 8005914:	200000b0 	.word	0x200000b0

08005918 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800592c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005934:	2b03      	cmp	r3, #3
 8005936:	d10c      	bne.n	8005952 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	7b1b      	ldrb	r3, [r3, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d108      	bne.n	8005952 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2201      	movs	r2, #1
 8005944:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	2181      	movs	r1, #129	; 0x81
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f001 fd10 	bl	8007372 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7c1b      	ldrb	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 800596c:	2308      	movs	r3, #8
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	e001      	b.n	8005976 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005972:	230a      	movs	r3, #10
 8005974:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2222      	movs	r2, #34	; 0x22
 8005990:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005992:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000044 	.word	0x20000044

080059a4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2222      	movs	r2, #34	; 0x22
 80059b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80059b2:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	20000068 	.word	0x20000068

080059c4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2222      	movs	r2, #34	; 0x22
 80059d0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80059d2:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	2000008c 	.word	0x2000008c

080059e4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059f6:	2200      	movs	r2, #0
 80059f8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	220a      	movs	r2, #10
 8005a14:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005a16:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	200000bc 	.word	0x200000bc

08005a28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	4613      	mov	r3, r2
 8005a34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e025      	b.n	8005a8c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	79fa      	ldrb	r2, [r7, #7]
 8005a7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f001 fb41 	bl	8007108 <USBD_LL_Init>
 8005a86:	4603      	mov	r3, r0
 8005a88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e010      	b.n	8005ace <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	f107 020e 	add.w	r2, r7, #14
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4798      	blx	r3
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 fb5e 	bl	80071a0 <USBD_LL_Start>
 8005ae4:	4603      	mov	r3, r0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b10:	2303      	movs	r3, #3
 8005b12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	78fa      	ldrb	r2, [r7, #3]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
  }

  return USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 ff2c 	bl	80069dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b92:	461a      	mov	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d00e      	beq.n	8005bc6 <USBD_LL_SetupStage+0x5a>
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d302      	bcc.n	8005bb2 <USBD_LL_SetupStage+0x46>
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d014      	beq.n	8005bda <USBD_LL_SetupStage+0x6e>
 8005bb0:	e01d      	b.n	8005bee <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa18 	bl	8005ff0 <USBD_StdDevReq>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc4:	e020      	b.n	8005c08 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa7c 	bl	80060cc <USBD_StdItfReq>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd8:	e016      	b.n	8005c08 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fab8 	bl	8006158 <USBD_StdEPReq>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
      break;
 8005bec:	e00c      	b.n	8005c08 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 fb2f 	bl	8007260 <USBD_LL_StallEP>
 8005c02:	4603      	mov	r3, r0
 8005c04:	73fb      	strb	r3, [r7, #15]
      break;
 8005c06:	bf00      	nop
  }

  return ret;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	607a      	str	r2, [r7, #4]
 8005c1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c20:	7afb      	ldrb	r3, [r7, #11]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d137      	bne.n	8005c96 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d14a      	bne.n	8005cce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d913      	bls.n	8005c6c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	1ad2      	subs	r2, r2, r3
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	bf28      	it	cs
 8005c5e:	4613      	movcs	r3, r2
 8005c60:	461a      	mov	r2, r3
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 ff90 	bl	8006b8a <USBD_CtlContinueRx>
 8005c6a:	e030      	b.n	8005cce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d105      	bne.n	8005c8e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 ff8c 	bl	8006bac <USBD_CtlSendStatus>
 8005c94:	e01b      	b.n	8005cce <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d013      	beq.n	8005cca <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d10e      	bne.n	8005cca <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	7afa      	ldrb	r2, [r7, #11]
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	4798      	blx	r3
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
 8005cc8:	e002      	b.n	8005cd0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e000      	b.n	8005cd0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d16a      	bne.n	8005dc2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3314      	adds	r3, #20
 8005cf0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d155      	bne.n	8005da8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d914      	bls.n	8005d32 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	1ad2      	subs	r2, r2, r3
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 ff22 	bl	8006b68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d24:	2300      	movs	r3, #0
 8005d26:	2200      	movs	r2, #0
 8005d28:	2100      	movs	r1, #0
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f001 fb42 	bl	80073b4 <USBD_LL_PrepareReceive>
 8005d30:	e03a      	b.n	8005da8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d11c      	bne.n	8005d78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d316      	bcc.n	8005d78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d20f      	bcs.n	8005d78 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 ff03 	bl	8006b68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f001 fb1f 	bl	80073b4 <USBD_LL_PrepareReceive>
 8005d76:	e017      	b.n	8005da8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d105      	bne.n	8005d9a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d9a:	2180      	movs	r1, #128	; 0x80
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f001 fa5f 	bl	8007260 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 ff15 	bl	8006bd2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d123      	bne.n	8005dfa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fe9b 	bl	8005aee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005dc0:	e01b      	b.n	8005dfa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d013      	beq.n	8005df6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d10e      	bne.n	8005df6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	7afa      	ldrb	r2, [r7, #11]
 8005de2:	4611      	mov	r1, r2
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	4798      	blx	r3
 8005de8:	4603      	mov	r3, r0
 8005dea:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	e002      	b.n	8005dfc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e000      	b.n	8005dfc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6852      	ldr	r2, [r2, #4]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	4611      	mov	r1, r2
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 f9c1 	bl	80071d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2240      	movs	r2, #64	; 0x40
 8005e60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	2200      	movs	r2, #0
 8005e68:	2180      	movs	r1, #128	; 0x80
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 f9b3 	bl	80071d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2240      	movs	r2, #64	; 0x40
 8005e7a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d105      	bne.n	8005eee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d10b      	bne.n	8005f26 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6852      	ldr	r2, [r2, #4]
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
  }

  return USBD_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b087      	sub	sp, #28
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005fd0:	8a3b      	ldrh	r3, [r7, #16]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	b21a      	sxth	r2, r3
 8005fd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	b21b      	sxth	r3, r3
 8005fde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005fe0:	89fb      	ldrh	r3, [r7, #14]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006006:	2b20      	cmp	r3, #32
 8006008:	d004      	beq.n	8006014 <USBD_StdDevReq+0x24>
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d002      	beq.n	8006014 <USBD_StdDevReq+0x24>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <USBD_StdDevReq+0x38>
 8006012:	e050      	b.n	80060b6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
 8006022:	4603      	mov	r3, r0
 8006024:	73fb      	strb	r3, [r7, #15]
    break;
 8006026:	e04b      	b.n	80060c0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	2b09      	cmp	r3, #9
 800602e:	d83c      	bhi.n	80060aa <USBD_StdDevReq+0xba>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <USBD_StdDevReq+0x48>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	0800608d 	.word	0x0800608d
 800603c:	080060a1 	.word	0x080060a1
 8006040:	080060ab 	.word	0x080060ab
 8006044:	08006097 	.word	0x08006097
 8006048:	080060ab 	.word	0x080060ab
 800604c:	0800606b 	.word	0x0800606b
 8006050:	08006061 	.word	0x08006061
 8006054:	080060ab 	.word	0x080060ab
 8006058:	08006083 	.word	0x08006083
 800605c:	08006075 	.word	0x08006075
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9ce 	bl	8006404 <USBD_GetDescriptor>
      break;
 8006068:	e024      	b.n	80060b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fb33 	bl	80066d8 <USBD_SetAddress>
      break;
 8006072:	e01f      	b.n	80060b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fb70 	bl	800675c <USBD_SetConfig>
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
      break;
 8006080:	e018      	b.n	80060b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fc0d 	bl	80068a4 <USBD_GetConfig>
      break;
 800608a:	e013      	b.n	80060b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fc3c 	bl	800690c <USBD_GetStatus>
      break;
 8006094:	e00e      	b.n	80060b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fc6a 	bl	8006972 <USBD_SetFeature>
      break;
 800609e:	e009      	b.n	80060b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fc79 	bl	800699a <USBD_ClrFeature>
      break;
 80060a8:	e004      	b.n	80060b4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fccf 	bl	8006a50 <USBD_CtlError>
      break;
 80060b2:	bf00      	nop
    }
    break;
 80060b4:	e004      	b.n	80060c0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fcc9 	bl	8006a50 <USBD_CtlError>
    break;
 80060be:	bf00      	nop
  }

  return ret;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop

080060cc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d003      	beq.n	80060ee <USBD_StdItfReq+0x22>
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d001      	beq.n	80060ee <USBD_StdItfReq+0x22>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d12a      	bne.n	8006144 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	3b01      	subs	r3, #1
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d81d      	bhi.n	8006136 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	889b      	ldrh	r3, [r3, #4]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d813      	bhi.n	800612c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	88db      	ldrh	r3, [r3, #6]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d110      	bne.n	8006140 <USBD_StdItfReq+0x74>
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10d      	bne.n	8006140 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fd41 	bl	8006bac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800612a:	e009      	b.n	8006140 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fc8e 	bl	8006a50 <USBD_CtlError>
      break;
 8006134:	e004      	b.n	8006140 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fc89 	bl	8006a50 <USBD_CtlError>
      break;
 800613e:	e000      	b.n	8006142 <USBD_StdItfReq+0x76>
      break;
 8006140:	bf00      	nop
    }
    break;
 8006142:	e004      	b.n	800614e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fc82 	bl	8006a50 <USBD_CtlError>
    break;
 800614c:	bf00      	nop
  }

  return ret;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	889b      	ldrh	r3, [r3, #4]
 800616a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006174:	2b20      	cmp	r3, #32
 8006176:	d004      	beq.n	8006182 <USBD_StdEPReq+0x2a>
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d002      	beq.n	8006182 <USBD_StdEPReq+0x2a>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <USBD_StdEPReq+0x3e>
 8006180:	e135      	b.n	80063ee <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	4798      	blx	r3
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]
    break;
 8006194:	e130      	b.n	80063f8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d03e      	beq.n	800621c <USBD_StdEPReq+0xc4>
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d002      	beq.n	80061a8 <USBD_StdEPReq+0x50>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d077      	beq.n	8006296 <USBD_StdEPReq+0x13e>
 80061a6:	e11c      	b.n	80063e2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d002      	beq.n	80061b8 <USBD_StdEPReq+0x60>
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d015      	beq.n	80061e2 <USBD_StdEPReq+0x8a>
 80061b6:	e02b      	b.n	8006210 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <USBD_StdEPReq+0x80>
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	2b80      	cmp	r3, #128	; 0x80
 80061c2:	d009      	beq.n	80061d8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f849 	bl	8007260 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061ce:	2180      	movs	r1, #128	; 0x80
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 f845 	bl	8007260 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80061d6:	e020      	b.n	800621a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fc38 	bl	8006a50 <USBD_CtlError>
        break;
 80061e0:	e01b      	b.n	800621a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	885b      	ldrh	r3, [r3, #2]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10e      	bne.n	8006208 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <USBD_StdEPReq+0xb0>
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	2b80      	cmp	r3, #128	; 0x80
 80061f4:	d008      	beq.n	8006208 <USBD_StdEPReq+0xb0>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	88db      	ldrh	r3, [r3, #6]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 f82c 	bl	8007260 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fccf 	bl	8006bac <USBD_CtlSendStatus>

        break;
 800620e:	e004      	b.n	800621a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fc1c 	bl	8006a50 <USBD_CtlError>
        break;
 8006218:	bf00      	nop
      }
      break;
 800621a:	e0e7      	b.n	80063ec <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006222:	2b02      	cmp	r3, #2
 8006224:	d002      	beq.n	800622c <USBD_StdEPReq+0xd4>
 8006226:	2b03      	cmp	r3, #3
 8006228:	d015      	beq.n	8006256 <USBD_StdEPReq+0xfe>
 800622a:	e02d      	b.n	8006288 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <USBD_StdEPReq+0xf4>
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b80      	cmp	r3, #128	; 0x80
 8006236:	d009      	beq.n	800624c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f80f 	bl	8007260 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f80b 	bl	8007260 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800624a:	e023      	b.n	8006294 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fbfe 	bl	8006a50 <USBD_CtlError>
        break;
 8006254:	e01e      	b.n	8006294 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	885b      	ldrh	r3, [r3, #2]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d119      	bne.n	8006292 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 f816 	bl	800729e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fc9a 	bl	8006bac <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
        }
        break;
 8006286:	e004      	b.n	8006292 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fbe0 	bl	8006a50 <USBD_CtlError>
        break;
 8006290:	e000      	b.n	8006294 <USBD_StdEPReq+0x13c>
        break;
 8006292:	bf00      	nop
      }
      break;
 8006294:	e0aa      	b.n	80063ec <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629c:	2b02      	cmp	r3, #2
 800629e:	d002      	beq.n	80062a6 <USBD_StdEPReq+0x14e>
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d032      	beq.n	800630a <USBD_StdEPReq+0x1b2>
 80062a4:	e097      	b.n	80063d6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <USBD_StdEPReq+0x164>
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d004      	beq.n	80062bc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fbcb 	bl	8006a50 <USBD_CtlError>
          break;
 80062ba:	e091      	b.n	80063e0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da0b      	bge.n	80062dc <USBD_StdEPReq+0x184>
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	3310      	adds	r3, #16
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	3304      	adds	r3, #4
 80062da:	e00b      	b.n	80062f4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2202      	movs	r2, #2
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fc15 	bl	8006b32 <USBD_CtlSendData>
        break;
 8006308:	e06a      	b.n	80063e0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800630a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	da11      	bge.n	8006336 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	f003 020f 	and.w	r2, r3, #15
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3324      	adds	r3, #36	; 0x24
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d117      	bne.n	800635c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fb8e 	bl	8006a50 <USBD_CtlError>
            break;
 8006334:	e054      	b.n	80063e0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	f003 020f 	and.w	r2, r3, #15
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fb7b 	bl	8006a50 <USBD_CtlError>
            break;
 800635a:	e041      	b.n	80063e0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800635c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	da0b      	bge.n	800637c <USBD_StdEPReq+0x224>
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	3310      	adds	r3, #16
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	3304      	adds	r3, #4
 800637a:	e00b      	b.n	8006394 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	3304      	adds	r3, #4
 8006394:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <USBD_StdEPReq+0x24a>
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d103      	bne.n	80063aa <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e00e      	b.n	80063c8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 ff94 	bl	80072dc <USBD_LL_IsStallEP>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e002      	b.n	80063c8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2202      	movs	r2, #2
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fbaf 	bl	8006b32 <USBD_CtlSendData>
          break;
 80063d4:	e004      	b.n	80063e0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fb39 	bl	8006a50 <USBD_CtlError>
        break;
 80063de:	bf00      	nop
      }
      break;
 80063e0:	e004      	b.n	80063ec <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fb33 	bl	8006a50 <USBD_CtlError>
      break;
 80063ea:	bf00      	nop
    }
    break;
 80063ec:	e004      	b.n	80063f8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fb2d 	bl	8006a50 <USBD_CtlError>
    break;
 80063f6:	bf00      	nop
  }

  return ret;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	885b      	ldrh	r3, [r3, #2]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	2b06      	cmp	r3, #6
 8006426:	f200 8128 	bhi.w	800667a <USBD_GetDescriptor+0x276>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <USBD_GetDescriptor+0x2c>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	0800644d 	.word	0x0800644d
 8006434:	08006465 	.word	0x08006465
 8006438:	080064a5 	.word	0x080064a5
 800643c:	0800667b 	.word	0x0800667b
 8006440:	0800667b 	.word	0x0800667b
 8006444:	0800661b 	.word	0x0800661b
 8006448:	08006647 	.word	0x08006647
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	7c12      	ldrb	r2, [r2, #16]
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
    break;
 8006462:	e112      	b.n	800668a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	7c1b      	ldrb	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10d      	bne.n	8006488 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	f107 0208 	add.w	r2, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	2202      	movs	r2, #2
 8006484:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006486:	e100      	b.n	800668a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	f107 0208 	add.w	r2, r7, #8
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
 8006498:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	2202      	movs	r2, #2
 80064a0:	701a      	strb	r2, [r3, #0]
    break;
 80064a2:	e0f2      	b.n	800668a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	885b      	ldrh	r3, [r3, #2]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	f200 80ac 	bhi.w	8006608 <USBD_GetDescriptor+0x204>
 80064b0:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <USBD_GetDescriptor+0xb4>)
 80064b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	080064d1 	.word	0x080064d1
 80064bc:	08006505 	.word	0x08006505
 80064c0:	08006539 	.word	0x08006539
 80064c4:	0800656d 	.word	0x0800656d
 80064c8:	080065a1 	.word	0x080065a1
 80064cc:	080065d5 	.word	0x080065d5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	7c12      	ldrb	r2, [r2, #16]
 80064e8:	f107 0108 	add.w	r1, r7, #8
 80064ec:	4610      	mov	r0, r2
 80064ee:	4798      	blx	r3
 80064f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064f2:	e091      	b.n	8006618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 faaa 	bl	8006a50 <USBD_CtlError>
        err++;
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	3301      	adds	r3, #1
 8006500:	72fb      	strb	r3, [r7, #11]
      break;
 8006502:	e089      	b.n	8006618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	7c12      	ldrb	r2, [r2, #16]
 800651c:	f107 0108 	add.w	r1, r7, #8
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
 8006524:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006526:	e077      	b.n	8006618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa90 	bl	8006a50 <USBD_CtlError>
        err++;
 8006530:	7afb      	ldrb	r3, [r7, #11]
 8006532:	3301      	adds	r3, #1
 8006534:	72fb      	strb	r3, [r7, #11]
      break;
 8006536:	e06f      	b.n	8006618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	7c12      	ldrb	r2, [r2, #16]
 8006550:	f107 0108 	add.w	r1, r7, #8
 8006554:	4610      	mov	r0, r2
 8006556:	4798      	blx	r3
 8006558:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800655a:	e05d      	b.n	8006618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa76 	bl	8006a50 <USBD_CtlError>
        err++;
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	3301      	adds	r3, #1
 8006568:	72fb      	strb	r3, [r7, #11]
      break;
 800656a:	e055      	b.n	8006618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	7c12      	ldrb	r2, [r2, #16]
 8006584:	f107 0108 	add.w	r1, r7, #8
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800658e:	e043      	b.n	8006618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa5c 	bl	8006a50 <USBD_CtlError>
        err++;
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	3301      	adds	r3, #1
 800659c:	72fb      	strb	r3, [r7, #11]
      break;
 800659e:	e03b      	b.n	8006618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	7c12      	ldrb	r2, [r2, #16]
 80065b8:	f107 0108 	add.w	r1, r7, #8
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
 80065c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065c2:	e029      	b.n	8006618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa42 	bl	8006a50 <USBD_CtlError>
        err++;
 80065cc:	7afb      	ldrb	r3, [r7, #11]
 80065ce:	3301      	adds	r3, #1
 80065d0:	72fb      	strb	r3, [r7, #11]
      break;
 80065d2:	e021      	b.n	8006618 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	7c12      	ldrb	r2, [r2, #16]
 80065ec:	f107 0108 	add.w	r1, r7, #8
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
 80065f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065f6:	e00f      	b.n	8006618 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa28 	bl	8006a50 <USBD_CtlError>
        err++;
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	3301      	adds	r3, #1
 8006604:	72fb      	strb	r3, [r7, #11]
      break;
 8006606:	e007      	b.n	8006618 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa20 	bl	8006a50 <USBD_CtlError>
      err++;
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	3301      	adds	r3, #1
 8006614:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006616:	bf00      	nop
    }
    break;
 8006618:	e037      	b.n	800668a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7c1b      	ldrb	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662a:	f107 0208 	add.w	r2, r7, #8
 800662e:	4610      	mov	r0, r2
 8006630:	4798      	blx	r3
 8006632:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006634:	e029      	b.n	800668a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fa09 	bl	8006a50 <USBD_CtlError>
      err++;
 800663e:	7afb      	ldrb	r3, [r7, #11]
 8006640:	3301      	adds	r3, #1
 8006642:	72fb      	strb	r3, [r7, #11]
    break;
 8006644:	e021      	b.n	800668a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7c1b      	ldrb	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10d      	bne.n	800666a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	f107 0208 	add.w	r2, r7, #8
 800665a:	4610      	mov	r0, r2
 800665c:	4798      	blx	r3
 800665e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	2207      	movs	r2, #7
 8006666:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006668:	e00f      	b.n	800668a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f9ef 	bl	8006a50 <USBD_CtlError>
      err++;
 8006672:	7afb      	ldrb	r3, [r7, #11]
 8006674:	3301      	adds	r3, #1
 8006676:	72fb      	strb	r3, [r7, #11]
    break;
 8006678:	e007      	b.n	800668a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f9e7 	bl	8006a50 <USBD_CtlError>
    err++;
 8006682:	7afb      	ldrb	r3, [r7, #11]
 8006684:	3301      	adds	r3, #1
 8006686:	72fb      	strb	r3, [r7, #11]
    break;
 8006688:	bf00      	nop
  }

  if (err != 0U)
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11e      	bne.n	80066ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	88db      	ldrh	r3, [r3, #6]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d016      	beq.n	80066c6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006698:	893b      	ldrh	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	88da      	ldrh	r2, [r3, #6]
 80066a2:	893b      	ldrh	r3, [r7, #8]
 80066a4:	4293      	cmp	r3, r2
 80066a6:	bf28      	it	cs
 80066a8:	4613      	movcs	r3, r2
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80066ae:	893b      	ldrh	r3, [r7, #8]
 80066b0:	461a      	mov	r2, r3
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fa3c 	bl	8006b32 <USBD_CtlSendData>
 80066ba:	e009      	b.n	80066d0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f9c6 	bl	8006a50 <USBD_CtlError>
 80066c4:	e004      	b.n	80066d0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fa70 	bl	8006bac <USBD_CtlSendStatus>
 80066cc:	e000      	b.n	80066d0 <USBD_GetDescriptor+0x2cc>
    return;
 80066ce:	bf00      	nop
    }
  }
}
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop

080066d8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	889b      	ldrh	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d130      	bne.n	800674c <USBD_SetAddress+0x74>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	88db      	ldrh	r3, [r3, #6]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d12c      	bne.n	800674c <USBD_SetAddress+0x74>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	885b      	ldrh	r3, [r3, #2]
 80066f6:	2b7f      	cmp	r3, #127	; 0x7f
 80066f8:	d828      	bhi.n	800674c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	885b      	ldrh	r3, [r3, #2]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006704:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670c:	2b03      	cmp	r3, #3
 800670e:	d104      	bne.n	800671a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f99c 	bl	8006a50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006718:	e01c      	b.n	8006754 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	7bfa      	ldrb	r2, [r7, #15]
 800671e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fe04 	bl	8007334 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fa3d 	bl	8006bac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006732:	7bfb      	ldrb	r3, [r7, #15]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006740:	e008      	b.n	8006754 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674a:	e003      	b.n	8006754 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f97e 	bl	8006a50 <USBD_CtlError>
  }
}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	885b      	ldrh	r3, [r3, #2]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	4b4b      	ldr	r3, [pc, #300]	; (80068a0 <USBD_SetConfig+0x144>)
 8006772:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006774:	4b4a      	ldr	r3, [pc, #296]	; (80068a0 <USBD_SetConfig+0x144>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d905      	bls.n	8006788 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f966 	bl	8006a50 <USBD_CtlError>
    return USBD_FAIL;
 8006784:	2303      	movs	r3, #3
 8006786:	e087      	b.n	8006898 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678e:	2b02      	cmp	r3, #2
 8006790:	d002      	beq.n	8006798 <USBD_SetConfig+0x3c>
 8006792:	2b03      	cmp	r3, #3
 8006794:	d025      	beq.n	80067e2 <USBD_SetConfig+0x86>
 8006796:	e071      	b.n	800687c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006798:	4b41      	ldr	r3, [pc, #260]	; (80068a0 <USBD_SetConfig+0x144>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01c      	beq.n	80067da <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80067a0:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <USBD_SetConfig+0x144>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80067aa:	4b3d      	ldr	r3, [pc, #244]	; (80068a0 <USBD_SetConfig+0x144>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff f9a7 	bl	8005b04 <USBD_SetClassConfig>
 80067b6:	4603      	mov	r3, r0
 80067b8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d004      	beq.n	80067ca <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f944 	bl	8006a50 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80067c8:	e065      	b.n	8006896 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9ee 	bl	8006bac <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2203      	movs	r2, #3
 80067d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80067d8:	e05d      	b.n	8006896 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9e6 	bl	8006bac <USBD_CtlSendStatus>
    break;
 80067e0:	e059      	b.n	8006896 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80067e2:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <USBD_SetConfig+0x144>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d112      	bne.n	8006810 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80067f2:	4b2b      	ldr	r3, [pc, #172]	; (80068a0 <USBD_SetConfig+0x144>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067fc:	4b28      	ldr	r3, [pc, #160]	; (80068a0 <USBD_SetConfig+0x144>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff f99a 	bl	8005b3c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f9cf 	bl	8006bac <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800680e:	e042      	b.n	8006896 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006810:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <USBD_SetConfig+0x144>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	461a      	mov	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	429a      	cmp	r2, r3
 800681c:	d02a      	beq.n	8006874 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff f988 	bl	8005b3c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800682c:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <USBD_SetConfig+0x144>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <USBD_SetConfig+0x144>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff f961 	bl	8005b04 <USBD_SetClassConfig>
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00f      	beq.n	800686c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8fe 	bl	8006a50 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f96d 	bl	8005b3c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800686a:	e014      	b.n	8006896 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f99d 	bl	8006bac <USBD_CtlSendStatus>
    break;
 8006872:	e010      	b.n	8006896 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f999 	bl	8006bac <USBD_CtlSendStatus>
    break;
 800687a:	e00c      	b.n	8006896 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8e6 	bl	8006a50 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <USBD_SetConfig+0x144>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff f956 	bl	8005b3c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	73fb      	strb	r3, [r7, #15]
    break;
 8006894:	bf00      	nop
  }

  return ret;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	200001e8 	.word	0x200001e8

080068a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88db      	ldrh	r3, [r3, #6]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d004      	beq.n	80068c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f8c9 	bl	8006a50 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80068be:	e021      	b.n	8006904 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	db17      	blt.n	80068fa <USBD_GetConfig+0x56>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	dd02      	ble.n	80068d4 <USBD_GetConfig+0x30>
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d00b      	beq.n	80068ea <USBD_GetConfig+0x46>
 80068d2:	e012      	b.n	80068fa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3308      	adds	r3, #8
 80068de:	2201      	movs	r2, #1
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f925 	bl	8006b32 <USBD_CtlSendData>
      break;
 80068e8:	e00c      	b.n	8006904 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3304      	adds	r3, #4
 80068ee:	2201      	movs	r2, #1
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f91d 	bl	8006b32 <USBD_CtlSendData>
      break;
 80068f8:	e004      	b.n	8006904 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f8a7 	bl	8006a50 <USBD_CtlError>
      break;
 8006902:	bf00      	nop
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691c:	3b01      	subs	r3, #1
 800691e:	2b02      	cmp	r3, #2
 8006920:	d81e      	bhi.n	8006960 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88db      	ldrh	r3, [r3, #6]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d004      	beq.n	8006934 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f88f 	bl	8006a50 <USBD_CtlError>
      break;
 8006932:	e01a      	b.n	800696a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f043 0202 	orr.w	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	330c      	adds	r3, #12
 8006954:	2202      	movs	r2, #2
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f8ea 	bl	8006b32 <USBD_CtlSendData>
    break;
 800695e:	e004      	b.n	800696a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f874 	bl	8006a50 <USBD_CtlError>
    break;
 8006968:	bf00      	nop
  }
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	885b      	ldrh	r3, [r3, #2]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d106      	bne.n	8006992 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f90d 	bl	8006bac <USBD_CtlSendStatus>
  }
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069aa:	3b01      	subs	r3, #1
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d80b      	bhi.n	80069c8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	885b      	ldrh	r3, [r3, #2]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d10c      	bne.n	80069d2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f8f3 	bl	8006bac <USBD_CtlSendStatus>
      }
      break;
 80069c6:	e004      	b.n	80069d2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f840 	bl	8006a50 <USBD_CtlError>
      break;
 80069d0:	e000      	b.n	80069d4 <USBD_ClrFeature+0x3a>
      break;
 80069d2:	bf00      	nop
  }
}
 80069d4:	bf00      	nop
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	781a      	ldrb	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3301      	adds	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fad3 	bl	8005fb2 <SWAPBYTE>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff fac6 	bl	8005fb2 <SWAPBYTE>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff fab9 	bl	8005fb2 <SWAPBYTE>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	80da      	strh	r2, [r3, #6]
}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fbff 	bl	8007260 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a62:	2100      	movs	r1, #0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fbfb 	bl	8007260 <USBD_LL_StallEP>
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d036      	beq.n	8006af6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006a8c:	6938      	ldr	r0, [r7, #16]
 8006a8e:	f000 f836 	bl	8006afe <USBD_GetLen>
 8006a92:	4603      	mov	r3, r0
 8006a94:	3301      	adds	r3, #1
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	7812      	ldrb	r2, [r2, #0]
 8006aaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	2203      	movs	r2, #3
 8006aba:	701a      	strb	r2, [r3, #0]
  idx++;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ac2:	e013      	b.n	8006aec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4413      	add	r3, r2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	613b      	str	r3, [r7, #16]
    idx++;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e7      	bne.n	8006ac4 <USBD_GetString+0x52>
 8006af4:	e000      	b.n	8006af8 <USBD_GetString+0x86>
    return;
 8006af6:	bf00      	nop
  }
}
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b0e:	e005      	b.n	8006b1c <USBD_GetLen+0x1e>
  {
    len++;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	3301      	adds	r3, #1
 8006b14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f5      	bne.n	8006b10 <USBD_GetLen+0x12>
  }

  return len;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	2100      	movs	r1, #0
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fc0a 	bl	8007372 <USBD_LL_Transmit>

  return USBD_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	2100      	movs	r1, #0
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fbf9 	bl	8007372 <USBD_LL_Transmit>

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 fc09 	bl	80073b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fbd5 	bl	8007372 <USBD_LL_Transmit>

  return USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2205      	movs	r2, #5
 8006bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006be2:	2300      	movs	r3, #0
 8006be4:	2200      	movs	r2, #0
 8006be6:	2100      	movs	r1, #0
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fbe3 	bl	80073b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	490e      	ldr	r1, [pc, #56]	; (8006c38 <MX_USB_DEVICE_Init+0x40>)
 8006c00:	480e      	ldr	r0, [pc, #56]	; (8006c3c <MX_USB_DEVICE_Init+0x44>)
 8006c02:	f7fe ff11 	bl	8005a28 <USBD_Init>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c0c:	f7fa fbea 	bl	80013e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006c10:	490b      	ldr	r1, [pc, #44]	; (8006c40 <MX_USB_DEVICE_Init+0x48>)
 8006c12:	480a      	ldr	r0, [pc, #40]	; (8006c3c <MX_USB_DEVICE_Init+0x44>)
 8006c14:	f7fe ff3e 	bl	8005a94 <USBD_RegisterClass>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c1e:	f7fa fbe1 	bl	80013e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c22:	4806      	ldr	r0, [pc, #24]	; (8006c3c <MX_USB_DEVICE_Init+0x44>)
 8006c24:	f7fe ff57 	bl	8005ad6 <USBD_Start>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006c2e:	f7fa fbd9 	bl	80013e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000114 	.word	0x20000114
 8006c3c:	20000238 	.word	0x20000238
 8006c40:	2000000c 	.word	0x2000000c

08006c44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2212      	movs	r2, #18
 8006c54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c56:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20000130 	.word	0x20000130

08006c68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	6039      	str	r1, [r7, #0]
 8006c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2204      	movs	r2, #4
 8006c78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c7a:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000144 	.word	0x20000144

08006c8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4907      	ldr	r1, [pc, #28]	; (8006cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ca2:	4808      	ldr	r0, [pc, #32]	; (8006cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ca4:	f7ff fee5 	bl	8006a72 <USBD_GetString>
 8006ca8:	e004      	b.n	8006cb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	4904      	ldr	r1, [pc, #16]	; (8006cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006cae:	4805      	ldr	r0, [pc, #20]	; (8006cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006cb0:	f7ff fedf 	bl	8006a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cb4:	4b02      	ldr	r3, [pc, #8]	; (8006cc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000508 	.word	0x20000508
 8006cc4:	080087a8 	.word	0x080087a8

08006cc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	6039      	str	r1, [r7, #0]
 8006cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	4904      	ldr	r1, [pc, #16]	; (8006ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006cd8:	4804      	ldr	r0, [pc, #16]	; (8006cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006cda:	f7ff feca 	bl	8006a72 <USBD_GetString>
  return USBD_StrDesc;
 8006cde:	4b02      	ldr	r3, [pc, #8]	; (8006ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000508 	.word	0x20000508
 8006cec:	080087c0 	.word	0x080087c0

08006cf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	6039      	str	r1, [r7, #0]
 8006cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	221a      	movs	r2, #26
 8006d00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d02:	f000 f843 	bl	8006d8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d06:	4b02      	ldr	r3, [pc, #8]	; (8006d10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000148 	.word	0x20000148

08006d14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d105      	bne.n	8006d32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	4907      	ldr	r1, [pc, #28]	; (8006d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d2a:	4808      	ldr	r0, [pc, #32]	; (8006d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d2c:	f7ff fea1 	bl	8006a72 <USBD_GetString>
 8006d30:	e004      	b.n	8006d3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	4904      	ldr	r1, [pc, #16]	; (8006d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d36:	4805      	ldr	r0, [pc, #20]	; (8006d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d38:	f7ff fe9b 	bl	8006a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d3c:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000508 	.word	0x20000508
 8006d4c:	080087d4 	.word	0x080087d4

08006d50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	6039      	str	r1, [r7, #0]
 8006d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d105      	bne.n	8006d6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	4907      	ldr	r1, [pc, #28]	; (8006d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d66:	4808      	ldr	r0, [pc, #32]	; (8006d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d68:	f7ff fe83 	bl	8006a72 <USBD_GetString>
 8006d6c:	e004      	b.n	8006d78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	4904      	ldr	r1, [pc, #16]	; (8006d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d72:	4805      	ldr	r0, [pc, #20]	; (8006d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d74:	f7ff fe7d 	bl	8006a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d78:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000508 	.word	0x20000508
 8006d88:	080087e0 	.word	0x080087e0

08006d8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d92:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <Get_SerialNum+0x44>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d98:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <Get_SerialNum+0x48>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <Get_SerialNum+0x4c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006db2:	2208      	movs	r2, #8
 8006db4:	4909      	ldr	r1, [pc, #36]	; (8006ddc <Get_SerialNum+0x50>)
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f814 	bl	8006de4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	4908      	ldr	r1, [pc, #32]	; (8006de0 <Get_SerialNum+0x54>)
 8006dc0:	68b8      	ldr	r0, [r7, #8]
 8006dc2:	f000 f80f 	bl	8006de4 <IntToUnicode>
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	1fff7a10 	.word	0x1fff7a10
 8006dd4:	1fff7a14 	.word	0x1fff7a14
 8006dd8:	1fff7a18 	.word	0x1fff7a18
 8006ddc:	2000014a 	.word	0x2000014a
 8006de0:	2000015a 	.word	0x2000015a

08006de4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006df6:	2300      	movs	r3, #0
 8006df8:	75fb      	strb	r3, [r7, #23]
 8006dfa:	e027      	b.n	8006e4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	0f1b      	lsrs	r3, r3, #28
 8006e00:	2b09      	cmp	r3, #9
 8006e02:	d80b      	bhi.n	8006e1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	0f1b      	lsrs	r3, r3, #28
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4619      	mov	r1, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	440b      	add	r3, r1
 8006e14:	3230      	adds	r2, #48	; 0x30
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e00a      	b.n	8006e32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	0f1b      	lsrs	r3, r3, #28
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	4619      	mov	r1, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3237      	adds	r2, #55	; 0x37
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	75fb      	strb	r3, [r7, #23]
 8006e4c:	7dfa      	ldrb	r2, [r7, #23]
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d3d3      	bcc.n	8006dfc <IntToUnicode+0x18>
  }
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	; 0x28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e68:	f107 0314 	add.w	r3, r7, #20
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	609a      	str	r2, [r3, #8]
 8006e74:	60da      	str	r2, [r3, #12]
 8006e76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e80:	d147      	bne.n	8006f12 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e82:	2300      	movs	r3, #0
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <HAL_PCD_MspInit+0xbc>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	4a24      	ldr	r2, [pc, #144]	; (8006f1c <HAL_PCD_MspInit+0xbc>)
 8006e8c:	f043 0301 	orr.w	r3, r3, #1
 8006e90:	6313      	str	r3, [r2, #48]	; 0x30
 8006e92:	4b22      	ldr	r3, [pc, #136]	; (8006f1c <HAL_PCD_MspInit+0xbc>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006e9e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eac:	2303      	movs	r3, #3
 8006eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006eb0:	230a      	movs	r3, #10
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eb4:	f107 0314 	add.w	r3, r7, #20
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4819      	ldr	r0, [pc, #100]	; (8006f20 <HAL_PCD_MspInit+0xc0>)
 8006ebc:	f7fa fd54 	bl	8001968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006ece:	f107 0314 	add.w	r3, r7, #20
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4812      	ldr	r0, [pc, #72]	; (8006f20 <HAL_PCD_MspInit+0xc0>)
 8006ed6:	f7fa fd47 	bl	8001968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006eda:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <HAL_PCD_MspInit+0xbc>)
 8006edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ede:	4a0f      	ldr	r2, [pc, #60]	; (8006f1c <HAL_PCD_MspInit+0xbc>)
 8006ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee4:	6353      	str	r3, [r2, #52]	; 0x34
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <HAL_PCD_MspInit+0xbc>)
 8006eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eee:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <HAL_PCD_MspInit+0xbc>)
 8006ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <HAL_PCD_MspInit+0xbc>)
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f02:	2200      	movs	r2, #0
 8006f04:	2100      	movs	r1, #0
 8006f06:	2043      	movs	r0, #67	; 0x43
 8006f08:	f7fa fcf7 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f0c:	2043      	movs	r0, #67	; 0x43
 8006f0e:	f7fa fd10 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f12:	bf00      	nop
 8006f14:	3728      	adds	r7, #40	; 0x28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	40020000 	.word	0x40020000

08006f24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f7fe fe16 	bl	8005b6c <USBD_LL_SetupStage>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	4619      	mov	r1, r3
 8006f72:	f7fe fe4e 	bl	8005c12 <USBD_LL_DataOutStage>
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f90:	78fa      	ldrb	r2, [r7, #3]
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	4613      	mov	r3, r2
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	3348      	adds	r3, #72	; 0x48
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f7fe fe97 	bl	8005cd8 <USBD_LL_DataInStage>
}
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe ff9b 	bl	8005efc <USBD_LL_SOF>
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
 8006fe6:	e008      	b.n	8006ffa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d102      	bne.n	8006ff6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
 8006ff4:	e001      	b.n	8006ffa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006ff6:	f7fa f9f5 	bl	80013e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007000:	7bfa      	ldrb	r2, [r7, #15]
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe ff3e 	bl	8005e86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fef7 	bl	8005e04 <USBD_LL_Reset>
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe ff39 	bl	8005ea6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007046:	f043 0301 	orr.w	r3, r3, #1
 800704a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <HAL_PCD_SuspendCallback+0x48>)
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	4a03      	ldr	r2, [pc, #12]	; (8007068 <HAL_PCD_SuspendCallback+0x48>)
 800705a:	f043 0306 	orr.w	r3, r3, #6
 800705e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed00 	.word	0xe000ed00

0800706c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe ff28 	bl	8005ed0 <USBD_LL_Resume>
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	4611      	mov	r1, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe ff53 	bl	8005f4a <USBD_LL_IsoOUTIncomplete>
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070be:	78fa      	ldrb	r2, [r7, #3]
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe ff34 	bl	8005f30 <USBD_LL_IsoINIncomplete>
}
 80070c8:	bf00      	nop
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe ff40 	bl	8005f64 <USBD_LL_DevConnected>
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe ff3d 	bl	8005f7a <USBD_LL_DevDisconnected>
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d13c      	bne.n	8007192 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007118:	4a20      	ldr	r2, [pc, #128]	; (800719c <USBD_LL_Init+0x94>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a1e      	ldr	r2, [pc, #120]	; (800719c <USBD_LL_Init+0x94>)
 8007124:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007128:	4b1c      	ldr	r3, [pc, #112]	; (800719c <USBD_LL_Init+0x94>)
 800712a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800712e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007130:	4b1a      	ldr	r3, [pc, #104]	; (800719c <USBD_LL_Init+0x94>)
 8007132:	2204      	movs	r2, #4
 8007134:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007136:	4b19      	ldr	r3, [pc, #100]	; (800719c <USBD_LL_Init+0x94>)
 8007138:	2202      	movs	r2, #2
 800713a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800713c:	4b17      	ldr	r3, [pc, #92]	; (800719c <USBD_LL_Init+0x94>)
 800713e:	2200      	movs	r2, #0
 8007140:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007142:	4b16      	ldr	r3, [pc, #88]	; (800719c <USBD_LL_Init+0x94>)
 8007144:	2202      	movs	r2, #2
 8007146:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007148:	4b14      	ldr	r3, [pc, #80]	; (800719c <USBD_LL_Init+0x94>)
 800714a:	2201      	movs	r2, #1
 800714c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800714e:	4b13      	ldr	r3, [pc, #76]	; (800719c <USBD_LL_Init+0x94>)
 8007150:	2200      	movs	r2, #0
 8007152:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007154:	4b11      	ldr	r3, [pc, #68]	; (800719c <USBD_LL_Init+0x94>)
 8007156:	2200      	movs	r2, #0
 8007158:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <USBD_LL_Init+0x94>)
 800715c:	2201      	movs	r2, #1
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007160:	4b0e      	ldr	r3, [pc, #56]	; (800719c <USBD_LL_Init+0x94>)
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007166:	480d      	ldr	r0, [pc, #52]	; (800719c <USBD_LL_Init+0x94>)
 8007168:	f7fa fdd9 	bl	8001d1e <HAL_PCD_Init>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007172:	f7fa f937 	bl	80013e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007176:	2180      	movs	r1, #128	; 0x80
 8007178:	4808      	ldr	r0, [pc, #32]	; (800719c <USBD_LL_Init+0x94>)
 800717a:	f7fb ff1e 	bl	8002fba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800717e:	2240      	movs	r2, #64	; 0x40
 8007180:	2100      	movs	r1, #0
 8007182:	4806      	ldr	r0, [pc, #24]	; (800719c <USBD_LL_Init+0x94>)
 8007184:	f7fb fed2 	bl	8002f2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007188:	2280      	movs	r2, #128	; 0x80
 800718a:	2101      	movs	r1, #1
 800718c:	4803      	ldr	r0, [pc, #12]	; (800719c <USBD_LL_Init+0x94>)
 800718e:	f7fb fecd 	bl	8002f2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000708 	.word	0x20000708

080071a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fa fece 	bl	8001f58 <HAL_PCD_Start>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f918 	bl	80073f8 <USBD_Get_USB_Status>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	4608      	mov	r0, r1
 80071e0:	4611      	mov	r1, r2
 80071e2:	461a      	mov	r2, r3
 80071e4:	4603      	mov	r3, r0
 80071e6:	70fb      	strb	r3, [r7, #3]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70bb      	strb	r3, [r7, #2]
 80071ec:	4613      	mov	r3, r2
 80071ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80071fe:	78bb      	ldrb	r3, [r7, #2]
 8007200:	883a      	ldrh	r2, [r7, #0]
 8007202:	78f9      	ldrb	r1, [r7, #3]
 8007204:	f7fb fab2 	bl	800276c <HAL_PCD_EP_Open>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f8f2 	bl	80073f8 <USBD_Get_USB_Status>
 8007214:	4603      	mov	r3, r0
 8007216:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007218:	7bbb      	ldrb	r3, [r7, #14]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800723c:	78fa      	ldrb	r2, [r7, #3]
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f7fb fafb 	bl	800283c <HAL_PCD_EP_Close>
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f8d3 	bl	80073f8 <USBD_Get_USB_Status>
 8007252:	4603      	mov	r3, r0
 8007254:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007256:	7bbb      	ldrb	r3, [r7, #14]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	4611      	mov	r1, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f7fb fbbb 	bl	80029fa <HAL_PCD_EP_SetStall>
 8007284:	4603      	mov	r3, r0
 8007286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f8b4 	bl	80073f8 <USBD_Get_USB_Status>
 8007290:	4603      	mov	r3, r0
 8007292:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007294:	7bbb      	ldrb	r3, [r7, #14]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	460b      	mov	r3, r1
 80072a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072b8:	78fa      	ldrb	r2, [r7, #3]
 80072ba:	4611      	mov	r1, r2
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fb fc00 	bl	8002ac2 <HAL_PCD_EP_ClrStall>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 f895 	bl	80073f8 <USBD_Get_USB_Status>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80072f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	da0b      	bge.n	8007310 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	4613      	mov	r3, r2
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	333e      	adds	r3, #62	; 0x3e
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	e00b      	b.n	8007328 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	4613      	mov	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007326:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7fb f9e5 	bl	8002722 <HAL_PCD_SetAddress>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 f84a 	bl	80073f8 <USBD_Get_USB_Status>
 8007364:	4603      	mov	r3, r0
 8007366:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007368:	7bbb      	ldrb	r3, [r7, #14]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
 800737e:	460b      	mov	r3, r1
 8007380:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007390:	7af9      	ldrb	r1, [r7, #11]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	f7fb fae6 	bl	8002966 <HAL_PCD_EP_Transmit>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 f829 	bl	80073f8 <USBD_Get_USB_Status>
 80073a6:	4603      	mov	r3, r0
 80073a8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80073aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	607a      	str	r2, [r7, #4]
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	460b      	mov	r3, r1
 80073c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073d2:	7af9      	ldrb	r1, [r7, #11]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	f7fb fa7a 	bl	80028d0 <HAL_PCD_EP_Receive>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f808 	bl	80073f8 <USBD_Get_USB_Status>
 80073e8:	4603      	mov	r3, r0
 80073ea:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80073ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	2b03      	cmp	r3, #3
 800740a:	d817      	bhi.n	800743c <USBD_Get_USB_Status+0x44>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <USBD_Get_USB_Status+0x1c>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007425 	.word	0x08007425
 8007418:	0800742b 	.word	0x0800742b
 800741c:	08007431 	.word	0x08007431
 8007420:	08007437 	.word	0x08007437
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
    break;
 8007428:	e00b      	b.n	8007442 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800742a:	2303      	movs	r3, #3
 800742c:	73fb      	strb	r3, [r7, #15]
    break;
 800742e:	e008      	b.n	8007442 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007430:	2301      	movs	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
    break;
 8007434:	e005      	b.n	8007442 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007436:	2303      	movs	r3, #3
 8007438:	73fb      	strb	r3, [r7, #15]
    break;
 800743a:	e002      	b.n	8007442 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	73fb      	strb	r3, [r7, #15]
    break;
 8007440:	bf00      	nop
  }
  return usb_status;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <__errno>:
 8007450:	4b01      	ldr	r3, [pc, #4]	; (8007458 <__errno+0x8>)
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	20000164 	.word	0x20000164

0800745c <__libc_init_array>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	4e0d      	ldr	r6, [pc, #52]	; (8007494 <__libc_init_array+0x38>)
 8007460:	4c0d      	ldr	r4, [pc, #52]	; (8007498 <__libc_init_array+0x3c>)
 8007462:	1ba4      	subs	r4, r4, r6
 8007464:	10a4      	asrs	r4, r4, #2
 8007466:	2500      	movs	r5, #0
 8007468:	42a5      	cmp	r5, r4
 800746a:	d109      	bne.n	8007480 <__libc_init_array+0x24>
 800746c:	4e0b      	ldr	r6, [pc, #44]	; (800749c <__libc_init_array+0x40>)
 800746e:	4c0c      	ldr	r4, [pc, #48]	; (80074a0 <__libc_init_array+0x44>)
 8007470:	f001 f98c 	bl	800878c <_init>
 8007474:	1ba4      	subs	r4, r4, r6
 8007476:	10a4      	asrs	r4, r4, #2
 8007478:	2500      	movs	r5, #0
 800747a:	42a5      	cmp	r5, r4
 800747c:	d105      	bne.n	800748a <__libc_init_array+0x2e>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007484:	4798      	blx	r3
 8007486:	3501      	adds	r5, #1
 8007488:	e7ee      	b.n	8007468 <__libc_init_array+0xc>
 800748a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800748e:	4798      	blx	r3
 8007490:	3501      	adds	r5, #1
 8007492:	e7f2      	b.n	800747a <__libc_init_array+0x1e>
 8007494:	080089e8 	.word	0x080089e8
 8007498:	080089e8 	.word	0x080089e8
 800749c:	080089e8 	.word	0x080089e8
 80074a0:	080089ec 	.word	0x080089ec

080074a4 <malloc>:
 80074a4:	4b02      	ldr	r3, [pc, #8]	; (80074b0 <malloc+0xc>)
 80074a6:	4601      	mov	r1, r0
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	f000 b861 	b.w	8007570 <_malloc_r>
 80074ae:	bf00      	nop
 80074b0:	20000164 	.word	0x20000164

080074b4 <free>:
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <free+0xc>)
 80074b6:	4601      	mov	r1, r0
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	f000 b80b 	b.w	80074d4 <_free_r>
 80074be:	bf00      	nop
 80074c0:	20000164 	.word	0x20000164

080074c4 <memset>:
 80074c4:	4402      	add	r2, r0
 80074c6:	4603      	mov	r3, r0
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d100      	bne.n	80074ce <memset+0xa>
 80074cc:	4770      	bx	lr
 80074ce:	f803 1b01 	strb.w	r1, [r3], #1
 80074d2:	e7f9      	b.n	80074c8 <memset+0x4>

080074d4 <_free_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4605      	mov	r5, r0
 80074d8:	2900      	cmp	r1, #0
 80074da:	d045      	beq.n	8007568 <_free_r+0x94>
 80074dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e0:	1f0c      	subs	r4, r1, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bfb8      	it	lt
 80074e6:	18e4      	addlt	r4, r4, r3
 80074e8:	f000 f8ac 	bl	8007644 <__malloc_lock>
 80074ec:	4a1f      	ldr	r2, [pc, #124]	; (800756c <_free_r+0x98>)
 80074ee:	6813      	ldr	r3, [r2, #0]
 80074f0:	4610      	mov	r0, r2
 80074f2:	b933      	cbnz	r3, 8007502 <_free_r+0x2e>
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	6014      	str	r4, [r2, #0]
 80074f8:	4628      	mov	r0, r5
 80074fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074fe:	f000 b8a2 	b.w	8007646 <__malloc_unlock>
 8007502:	42a3      	cmp	r3, r4
 8007504:	d90c      	bls.n	8007520 <_free_r+0x4c>
 8007506:	6821      	ldr	r1, [r4, #0]
 8007508:	1862      	adds	r2, r4, r1
 800750a:	4293      	cmp	r3, r2
 800750c:	bf04      	itt	eq
 800750e:	681a      	ldreq	r2, [r3, #0]
 8007510:	685b      	ldreq	r3, [r3, #4]
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	bf04      	itt	eq
 8007516:	1852      	addeq	r2, r2, r1
 8007518:	6022      	streq	r2, [r4, #0]
 800751a:	6004      	str	r4, [r0, #0]
 800751c:	e7ec      	b.n	80074f8 <_free_r+0x24>
 800751e:	4613      	mov	r3, r2
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	b10a      	cbz	r2, 8007528 <_free_r+0x54>
 8007524:	42a2      	cmp	r2, r4
 8007526:	d9fa      	bls.n	800751e <_free_r+0x4a>
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	1858      	adds	r0, r3, r1
 800752c:	42a0      	cmp	r0, r4
 800752e:	d10b      	bne.n	8007548 <_free_r+0x74>
 8007530:	6820      	ldr	r0, [r4, #0]
 8007532:	4401      	add	r1, r0
 8007534:	1858      	adds	r0, r3, r1
 8007536:	4282      	cmp	r2, r0
 8007538:	6019      	str	r1, [r3, #0]
 800753a:	d1dd      	bne.n	80074f8 <_free_r+0x24>
 800753c:	6810      	ldr	r0, [r2, #0]
 800753e:	6852      	ldr	r2, [r2, #4]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	4401      	add	r1, r0
 8007544:	6019      	str	r1, [r3, #0]
 8007546:	e7d7      	b.n	80074f8 <_free_r+0x24>
 8007548:	d902      	bls.n	8007550 <_free_r+0x7c>
 800754a:	230c      	movs	r3, #12
 800754c:	602b      	str	r3, [r5, #0]
 800754e:	e7d3      	b.n	80074f8 <_free_r+0x24>
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	1821      	adds	r1, r4, r0
 8007554:	428a      	cmp	r2, r1
 8007556:	bf04      	itt	eq
 8007558:	6811      	ldreq	r1, [r2, #0]
 800755a:	6852      	ldreq	r2, [r2, #4]
 800755c:	6062      	str	r2, [r4, #4]
 800755e:	bf04      	itt	eq
 8007560:	1809      	addeq	r1, r1, r0
 8007562:	6021      	streq	r1, [r4, #0]
 8007564:	605c      	str	r4, [r3, #4]
 8007566:	e7c7      	b.n	80074f8 <_free_r+0x24>
 8007568:	bd38      	pop	{r3, r4, r5, pc}
 800756a:	bf00      	nop
 800756c:	200001ec 	.word	0x200001ec

08007570 <_malloc_r>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	1ccd      	adds	r5, r1, #3
 8007574:	f025 0503 	bic.w	r5, r5, #3
 8007578:	3508      	adds	r5, #8
 800757a:	2d0c      	cmp	r5, #12
 800757c:	bf38      	it	cc
 800757e:	250c      	movcc	r5, #12
 8007580:	2d00      	cmp	r5, #0
 8007582:	4606      	mov	r6, r0
 8007584:	db01      	blt.n	800758a <_malloc_r+0x1a>
 8007586:	42a9      	cmp	r1, r5
 8007588:	d903      	bls.n	8007592 <_malloc_r+0x22>
 800758a:	230c      	movs	r3, #12
 800758c:	6033      	str	r3, [r6, #0]
 800758e:	2000      	movs	r0, #0
 8007590:	bd70      	pop	{r4, r5, r6, pc}
 8007592:	f000 f857 	bl	8007644 <__malloc_lock>
 8007596:	4a21      	ldr	r2, [pc, #132]	; (800761c <_malloc_r+0xac>)
 8007598:	6814      	ldr	r4, [r2, #0]
 800759a:	4621      	mov	r1, r4
 800759c:	b991      	cbnz	r1, 80075c4 <_malloc_r+0x54>
 800759e:	4c20      	ldr	r4, [pc, #128]	; (8007620 <_malloc_r+0xb0>)
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	b91b      	cbnz	r3, 80075ac <_malloc_r+0x3c>
 80075a4:	4630      	mov	r0, r6
 80075a6:	f000 f83d 	bl	8007624 <_sbrk_r>
 80075aa:	6020      	str	r0, [r4, #0]
 80075ac:	4629      	mov	r1, r5
 80075ae:	4630      	mov	r0, r6
 80075b0:	f000 f838 	bl	8007624 <_sbrk_r>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d124      	bne.n	8007602 <_malloc_r+0x92>
 80075b8:	230c      	movs	r3, #12
 80075ba:	6033      	str	r3, [r6, #0]
 80075bc:	4630      	mov	r0, r6
 80075be:	f000 f842 	bl	8007646 <__malloc_unlock>
 80075c2:	e7e4      	b.n	800758e <_malloc_r+0x1e>
 80075c4:	680b      	ldr	r3, [r1, #0]
 80075c6:	1b5b      	subs	r3, r3, r5
 80075c8:	d418      	bmi.n	80075fc <_malloc_r+0x8c>
 80075ca:	2b0b      	cmp	r3, #11
 80075cc:	d90f      	bls.n	80075ee <_malloc_r+0x7e>
 80075ce:	600b      	str	r3, [r1, #0]
 80075d0:	50cd      	str	r5, [r1, r3]
 80075d2:	18cc      	adds	r4, r1, r3
 80075d4:	4630      	mov	r0, r6
 80075d6:	f000 f836 	bl	8007646 <__malloc_unlock>
 80075da:	f104 000b 	add.w	r0, r4, #11
 80075de:	1d23      	adds	r3, r4, #4
 80075e0:	f020 0007 	bic.w	r0, r0, #7
 80075e4:	1ac3      	subs	r3, r0, r3
 80075e6:	d0d3      	beq.n	8007590 <_malloc_r+0x20>
 80075e8:	425a      	negs	r2, r3
 80075ea:	50e2      	str	r2, [r4, r3]
 80075ec:	e7d0      	b.n	8007590 <_malloc_r+0x20>
 80075ee:	428c      	cmp	r4, r1
 80075f0:	684b      	ldr	r3, [r1, #4]
 80075f2:	bf16      	itet	ne
 80075f4:	6063      	strne	r3, [r4, #4]
 80075f6:	6013      	streq	r3, [r2, #0]
 80075f8:	460c      	movne	r4, r1
 80075fa:	e7eb      	b.n	80075d4 <_malloc_r+0x64>
 80075fc:	460c      	mov	r4, r1
 80075fe:	6849      	ldr	r1, [r1, #4]
 8007600:	e7cc      	b.n	800759c <_malloc_r+0x2c>
 8007602:	1cc4      	adds	r4, r0, #3
 8007604:	f024 0403 	bic.w	r4, r4, #3
 8007608:	42a0      	cmp	r0, r4
 800760a:	d005      	beq.n	8007618 <_malloc_r+0xa8>
 800760c:	1a21      	subs	r1, r4, r0
 800760e:	4630      	mov	r0, r6
 8007610:	f000 f808 	bl	8007624 <_sbrk_r>
 8007614:	3001      	adds	r0, #1
 8007616:	d0cf      	beq.n	80075b8 <_malloc_r+0x48>
 8007618:	6025      	str	r5, [r4, #0]
 800761a:	e7db      	b.n	80075d4 <_malloc_r+0x64>
 800761c:	200001ec 	.word	0x200001ec
 8007620:	200001f0 	.word	0x200001f0

08007624 <_sbrk_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4c06      	ldr	r4, [pc, #24]	; (8007640 <_sbrk_r+0x1c>)
 8007628:	2300      	movs	r3, #0
 800762a:	4605      	mov	r5, r0
 800762c:	4608      	mov	r0, r1
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	f7f9 ff88 	bl	8001544 <_sbrk>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_sbrk_r+0x1a>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	b103      	cbz	r3, 800763e <_sbrk_r+0x1a>
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20000b10 	.word	0x20000b10

08007644 <__malloc_lock>:
 8007644:	4770      	bx	lr

08007646 <__malloc_unlock>:
 8007646:	4770      	bx	lr

08007648 <cos>:
 8007648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800764a:	ec51 0b10 	vmov	r0, r1, d0
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <cos+0x80>)
 8007650:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007654:	4293      	cmp	r3, r2
 8007656:	dc06      	bgt.n	8007666 <cos+0x1e>
 8007658:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80076c0 <cos+0x78>
 800765c:	f000 fac0 	bl	8007be0 <__kernel_cos>
 8007660:	ec51 0b10 	vmov	r0, r1, d0
 8007664:	e007      	b.n	8007676 <cos+0x2e>
 8007666:	4a19      	ldr	r2, [pc, #100]	; (80076cc <cos+0x84>)
 8007668:	4293      	cmp	r3, r2
 800766a:	dd09      	ble.n	8007680 <cos+0x38>
 800766c:	ee10 2a10 	vmov	r2, s0
 8007670:	460b      	mov	r3, r1
 8007672:	f7f8 fdc1 	bl	80001f8 <__aeabi_dsub>
 8007676:	ec41 0b10 	vmov	d0, r0, r1
 800767a:	b005      	add	sp, #20
 800767c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007680:	4668      	mov	r0, sp
 8007682:	f000 f8b9 	bl	80077f8 <__ieee754_rem_pio2>
 8007686:	f000 0003 	and.w	r0, r0, #3
 800768a:	2801      	cmp	r0, #1
 800768c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007690:	ed9d 0b00 	vldr	d0, [sp]
 8007694:	d007      	beq.n	80076a6 <cos+0x5e>
 8007696:	2802      	cmp	r0, #2
 8007698:	d00e      	beq.n	80076b8 <cos+0x70>
 800769a:	2800      	cmp	r0, #0
 800769c:	d0de      	beq.n	800765c <cos+0x14>
 800769e:	2001      	movs	r0, #1
 80076a0:	f000 fea6 	bl	80083f0 <__kernel_sin>
 80076a4:	e7dc      	b.n	8007660 <cos+0x18>
 80076a6:	f000 fea3 	bl	80083f0 <__kernel_sin>
 80076aa:	ec53 2b10 	vmov	r2, r3, d0
 80076ae:	ee10 0a10 	vmov	r0, s0
 80076b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80076b6:	e7de      	b.n	8007676 <cos+0x2e>
 80076b8:	f000 fa92 	bl	8007be0 <__kernel_cos>
 80076bc:	e7f5      	b.n	80076aa <cos+0x62>
 80076be:	bf00      	nop
	...
 80076c8:	3fe921fb 	.word	0x3fe921fb
 80076cc:	7fefffff 	.word	0x7fefffff

080076d0 <round>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	ec57 6b10 	vmov	r6, r7, d0
 80076d6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80076da:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80076de:	2c13      	cmp	r4, #19
 80076e0:	463b      	mov	r3, r7
 80076e2:	463d      	mov	r5, r7
 80076e4:	dc17      	bgt.n	8007716 <round+0x46>
 80076e6:	2c00      	cmp	r4, #0
 80076e8:	da09      	bge.n	80076fe <round+0x2e>
 80076ea:	3401      	adds	r4, #1
 80076ec:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80076f0:	d103      	bne.n	80076fa <round+0x2a>
 80076f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80076f6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80076fa:	2100      	movs	r1, #0
 80076fc:	e02c      	b.n	8007758 <round+0x88>
 80076fe:	4a18      	ldr	r2, [pc, #96]	; (8007760 <round+0x90>)
 8007700:	4122      	asrs	r2, r4
 8007702:	4217      	tst	r7, r2
 8007704:	d100      	bne.n	8007708 <round+0x38>
 8007706:	b19e      	cbz	r6, 8007730 <round+0x60>
 8007708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800770c:	4123      	asrs	r3, r4
 800770e:	442b      	add	r3, r5
 8007710:	ea23 0302 	bic.w	r3, r3, r2
 8007714:	e7f1      	b.n	80076fa <round+0x2a>
 8007716:	2c33      	cmp	r4, #51	; 0x33
 8007718:	dd0d      	ble.n	8007736 <round+0x66>
 800771a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800771e:	d107      	bne.n	8007730 <round+0x60>
 8007720:	4630      	mov	r0, r6
 8007722:	4639      	mov	r1, r7
 8007724:	ee10 2a10 	vmov	r2, s0
 8007728:	f7f8 fd68 	bl	80001fc <__adddf3>
 800772c:	4606      	mov	r6, r0
 800772e:	460f      	mov	r7, r1
 8007730:	ec47 6b10 	vmov	d0, r6, r7
 8007734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007736:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	40d0      	lsrs	r0, r2
 8007740:	4206      	tst	r6, r0
 8007742:	d0f5      	beq.n	8007730 <round+0x60>
 8007744:	2201      	movs	r2, #1
 8007746:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800774a:	fa02 f404 	lsl.w	r4, r2, r4
 800774e:	1931      	adds	r1, r6, r4
 8007750:	bf28      	it	cs
 8007752:	189b      	addcs	r3, r3, r2
 8007754:	ea21 0100 	bic.w	r1, r1, r0
 8007758:	461f      	mov	r7, r3
 800775a:	460e      	mov	r6, r1
 800775c:	e7e8      	b.n	8007730 <round+0x60>
 800775e:	bf00      	nop
 8007760:	000fffff 	.word	0x000fffff
 8007764:	00000000 	.word	0x00000000

08007768 <sin>:
 8007768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800776a:	ec51 0b10 	vmov	r0, r1, d0
 800776e:	4a20      	ldr	r2, [pc, #128]	; (80077f0 <sin+0x88>)
 8007770:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007774:	4293      	cmp	r3, r2
 8007776:	dc07      	bgt.n	8007788 <sin+0x20>
 8007778:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80077e8 <sin+0x80>
 800777c:	2000      	movs	r0, #0
 800777e:	f000 fe37 	bl	80083f0 <__kernel_sin>
 8007782:	ec51 0b10 	vmov	r0, r1, d0
 8007786:	e007      	b.n	8007798 <sin+0x30>
 8007788:	4a1a      	ldr	r2, [pc, #104]	; (80077f4 <sin+0x8c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	dd09      	ble.n	80077a2 <sin+0x3a>
 800778e:	ee10 2a10 	vmov	r2, s0
 8007792:	460b      	mov	r3, r1
 8007794:	f7f8 fd30 	bl	80001f8 <__aeabi_dsub>
 8007798:	ec41 0b10 	vmov	d0, r0, r1
 800779c:	b005      	add	sp, #20
 800779e:	f85d fb04 	ldr.w	pc, [sp], #4
 80077a2:	4668      	mov	r0, sp
 80077a4:	f000 f828 	bl	80077f8 <__ieee754_rem_pio2>
 80077a8:	f000 0003 	and.w	r0, r0, #3
 80077ac:	2801      	cmp	r0, #1
 80077ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077b2:	ed9d 0b00 	vldr	d0, [sp]
 80077b6:	d004      	beq.n	80077c2 <sin+0x5a>
 80077b8:	2802      	cmp	r0, #2
 80077ba:	d005      	beq.n	80077c8 <sin+0x60>
 80077bc:	b970      	cbnz	r0, 80077dc <sin+0x74>
 80077be:	2001      	movs	r0, #1
 80077c0:	e7dd      	b.n	800777e <sin+0x16>
 80077c2:	f000 fa0d 	bl	8007be0 <__kernel_cos>
 80077c6:	e7dc      	b.n	8007782 <sin+0x1a>
 80077c8:	2001      	movs	r0, #1
 80077ca:	f000 fe11 	bl	80083f0 <__kernel_sin>
 80077ce:	ec53 2b10 	vmov	r2, r3, d0
 80077d2:	ee10 0a10 	vmov	r0, s0
 80077d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077da:	e7dd      	b.n	8007798 <sin+0x30>
 80077dc:	f000 fa00 	bl	8007be0 <__kernel_cos>
 80077e0:	e7f5      	b.n	80077ce <sin+0x66>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
	...
 80077f0:	3fe921fb 	.word	0x3fe921fb
 80077f4:	7fefffff 	.word	0x7fefffff

080077f8 <__ieee754_rem_pio2>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	ec57 6b10 	vmov	r6, r7, d0
 8007800:	4bc3      	ldr	r3, [pc, #780]	; (8007b10 <__ieee754_rem_pio2+0x318>)
 8007802:	b08d      	sub	sp, #52	; 0x34
 8007804:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007808:	4598      	cmp	r8, r3
 800780a:	4604      	mov	r4, r0
 800780c:	9704      	str	r7, [sp, #16]
 800780e:	dc07      	bgt.n	8007820 <__ieee754_rem_pio2+0x28>
 8007810:	2200      	movs	r2, #0
 8007812:	2300      	movs	r3, #0
 8007814:	ed84 0b00 	vstr	d0, [r4]
 8007818:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800781c:	2500      	movs	r5, #0
 800781e:	e027      	b.n	8007870 <__ieee754_rem_pio2+0x78>
 8007820:	4bbc      	ldr	r3, [pc, #752]	; (8007b14 <__ieee754_rem_pio2+0x31c>)
 8007822:	4598      	cmp	r8, r3
 8007824:	dc75      	bgt.n	8007912 <__ieee754_rem_pio2+0x11a>
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	4dbb      	ldr	r5, [pc, #748]	; (8007b18 <__ieee754_rem_pio2+0x320>)
 800782a:	2b00      	cmp	r3, #0
 800782c:	ee10 0a10 	vmov	r0, s0
 8007830:	a3a9      	add	r3, pc, #676	; (adr r3, 8007ad8 <__ieee754_rem_pio2+0x2e0>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	4639      	mov	r1, r7
 8007838:	dd36      	ble.n	80078a8 <__ieee754_rem_pio2+0xb0>
 800783a:	f7f8 fcdd 	bl	80001f8 <__aeabi_dsub>
 800783e:	45a8      	cmp	r8, r5
 8007840:	4606      	mov	r6, r0
 8007842:	460f      	mov	r7, r1
 8007844:	d018      	beq.n	8007878 <__ieee754_rem_pio2+0x80>
 8007846:	a3a6      	add	r3, pc, #664	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fcd4 	bl	80001f8 <__aeabi_dsub>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	e9c4 2300 	strd	r2, r3, [r4]
 8007858:	4630      	mov	r0, r6
 800785a:	4639      	mov	r1, r7
 800785c:	f7f8 fccc 	bl	80001f8 <__aeabi_dsub>
 8007860:	a39f      	add	r3, pc, #636	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fcc7 	bl	80001f8 <__aeabi_dsub>
 800786a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800786e:	2501      	movs	r5, #1
 8007870:	4628      	mov	r0, r5
 8007872:	b00d      	add	sp, #52	; 0x34
 8007874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007878:	a39b      	add	r3, pc, #620	; (adr r3, 8007ae8 <__ieee754_rem_pio2+0x2f0>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f8 fcbb 	bl	80001f8 <__aeabi_dsub>
 8007882:	a39b      	add	r3, pc, #620	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	4606      	mov	r6, r0
 800788a:	460f      	mov	r7, r1
 800788c:	f7f8 fcb4 	bl	80001f8 <__aeabi_dsub>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	e9c4 2300 	strd	r2, r3, [r4]
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f8 fcac 	bl	80001f8 <__aeabi_dsub>
 80078a0:	a393      	add	r3, pc, #588	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	e7de      	b.n	8007866 <__ieee754_rem_pio2+0x6e>
 80078a8:	f7f8 fca8 	bl	80001fc <__adddf3>
 80078ac:	45a8      	cmp	r8, r5
 80078ae:	4606      	mov	r6, r0
 80078b0:	460f      	mov	r7, r1
 80078b2:	d016      	beq.n	80078e2 <__ieee754_rem_pio2+0xea>
 80078b4:	a38a      	add	r3, pc, #552	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	f7f8 fc9f 	bl	80001fc <__adddf3>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9c4 2300 	strd	r2, r3, [r4]
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fc95 	bl	80001f8 <__aeabi_dsub>
 80078ce:	a384      	add	r3, pc, #528	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f8 fc92 	bl	80001fc <__adddf3>
 80078d8:	f04f 35ff 	mov.w	r5, #4294967295
 80078dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80078e0:	e7c6      	b.n	8007870 <__ieee754_rem_pio2+0x78>
 80078e2:	a381      	add	r3, pc, #516	; (adr r3, 8007ae8 <__ieee754_rem_pio2+0x2f0>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	f7f8 fc88 	bl	80001fc <__adddf3>
 80078ec:	a380      	add	r3, pc, #512	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	f7f8 fc81 	bl	80001fc <__adddf3>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	e9c4 2300 	strd	r2, r3, [r4]
 8007902:	4630      	mov	r0, r6
 8007904:	4639      	mov	r1, r7
 8007906:	f7f8 fc77 	bl	80001f8 <__aeabi_dsub>
 800790a:	a379      	add	r3, pc, #484	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	e7e0      	b.n	80078d4 <__ieee754_rem_pio2+0xdc>
 8007912:	4b82      	ldr	r3, [pc, #520]	; (8007b1c <__ieee754_rem_pio2+0x324>)
 8007914:	4598      	cmp	r8, r3
 8007916:	f300 80d0 	bgt.w	8007aba <__ieee754_rem_pio2+0x2c2>
 800791a:	f000 fe23 	bl	8008564 <fabs>
 800791e:	ec57 6b10 	vmov	r6, r7, d0
 8007922:	ee10 0a10 	vmov	r0, s0
 8007926:	a374      	add	r3, pc, #464	; (adr r3, 8007af8 <__ieee754_rem_pio2+0x300>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4639      	mov	r1, r7
 800792e:	f7f8 fe1b 	bl	8000568 <__aeabi_dmul>
 8007932:	2200      	movs	r2, #0
 8007934:	4b7a      	ldr	r3, [pc, #488]	; (8007b20 <__ieee754_rem_pio2+0x328>)
 8007936:	f7f8 fc61 	bl	80001fc <__adddf3>
 800793a:	f7f9 f8af 	bl	8000a9c <__aeabi_d2iz>
 800793e:	4605      	mov	r5, r0
 8007940:	f7f8 fda8 	bl	8000494 <__aeabi_i2d>
 8007944:	a364      	add	r3, pc, #400	; (adr r3, 8007ad8 <__ieee754_rem_pio2+0x2e0>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800794e:	f7f8 fe0b 	bl	8000568 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4630      	mov	r0, r6
 8007958:	4639      	mov	r1, r7
 800795a:	f7f8 fc4d 	bl	80001f8 <__aeabi_dsub>
 800795e:	a360      	add	r3, pc, #384	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	4682      	mov	sl, r0
 8007966:	468b      	mov	fp, r1
 8007968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800796c:	f7f8 fdfc 	bl	8000568 <__aeabi_dmul>
 8007970:	2d1f      	cmp	r5, #31
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	dc0c      	bgt.n	8007992 <__ieee754_rem_pio2+0x19a>
 8007978:	1e6a      	subs	r2, r5, #1
 800797a:	4b6a      	ldr	r3, [pc, #424]	; (8007b24 <__ieee754_rem_pio2+0x32c>)
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	4543      	cmp	r3, r8
 8007982:	d006      	beq.n	8007992 <__ieee754_rem_pio2+0x19a>
 8007984:	4632      	mov	r2, r6
 8007986:	463b      	mov	r3, r7
 8007988:	4650      	mov	r0, sl
 800798a:	4659      	mov	r1, fp
 800798c:	f7f8 fc34 	bl	80001f8 <__aeabi_dsub>
 8007990:	e00e      	b.n	80079b0 <__ieee754_rem_pio2+0x1b8>
 8007992:	4632      	mov	r2, r6
 8007994:	463b      	mov	r3, r7
 8007996:	4650      	mov	r0, sl
 8007998:	4659      	mov	r1, fp
 800799a:	f7f8 fc2d 	bl	80001f8 <__aeabi_dsub>
 800799e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80079a2:	9305      	str	r3, [sp, #20]
 80079a4:	9a05      	ldr	r2, [sp, #20]
 80079a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b10      	cmp	r3, #16
 80079ae:	dc02      	bgt.n	80079b6 <__ieee754_rem_pio2+0x1be>
 80079b0:	e9c4 0100 	strd	r0, r1, [r4]
 80079b4:	e039      	b.n	8007a2a <__ieee754_rem_pio2+0x232>
 80079b6:	a34c      	add	r3, pc, #304	; (adr r3, 8007ae8 <__ieee754_rem_pio2+0x2f0>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c0:	f7f8 fdd2 	bl	8000568 <__aeabi_dmul>
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4650      	mov	r0, sl
 80079ce:	4659      	mov	r1, fp
 80079d0:	f7f8 fc12 	bl	80001f8 <__aeabi_dsub>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4680      	mov	r8, r0
 80079da:	4689      	mov	r9, r1
 80079dc:	4650      	mov	r0, sl
 80079de:	4659      	mov	r1, fp
 80079e0:	f7f8 fc0a 	bl	80001f8 <__aeabi_dsub>
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	f7f8 fc06 	bl	80001f8 <__aeabi_dsub>
 80079ec:	a340      	add	r3, pc, #256	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	4606      	mov	r6, r0
 80079f4:	460f      	mov	r7, r1
 80079f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079fa:	f7f8 fdb5 	bl	8000568 <__aeabi_dmul>
 80079fe:	4632      	mov	r2, r6
 8007a00:	463b      	mov	r3, r7
 8007a02:	f7f8 fbf9 	bl	80001f8 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	4640      	mov	r0, r8
 8007a10:	4649      	mov	r1, r9
 8007a12:	f7f8 fbf1 	bl	80001f8 <__aeabi_dsub>
 8007a16:	9a05      	ldr	r2, [sp, #20]
 8007a18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b31      	cmp	r3, #49	; 0x31
 8007a20:	dc20      	bgt.n	8007a64 <__ieee754_rem_pio2+0x26c>
 8007a22:	e9c4 0100 	strd	r0, r1, [r4]
 8007a26:	46c2      	mov	sl, r8
 8007a28:	46cb      	mov	fp, r9
 8007a2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007a2e:	4650      	mov	r0, sl
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	4659      	mov	r1, fp
 8007a36:	f7f8 fbdf 	bl	80001f8 <__aeabi_dsub>
 8007a3a:	463b      	mov	r3, r7
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	f7f8 fbdb 	bl	80001f8 <__aeabi_dsub>
 8007a42:	9b04      	ldr	r3, [sp, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a4a:	f6bf af11 	bge.w	8007870 <__ieee754_rem_pio2+0x78>
 8007a4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a52:	6063      	str	r3, [r4, #4]
 8007a54:	f8c4 8000 	str.w	r8, [r4]
 8007a58:	60a0      	str	r0, [r4, #8]
 8007a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a5e:	60e3      	str	r3, [r4, #12]
 8007a60:	426d      	negs	r5, r5
 8007a62:	e705      	b.n	8007870 <__ieee754_rem_pio2+0x78>
 8007a64:	a326      	add	r3, pc, #152	; (adr r3, 8007b00 <__ieee754_rem_pio2+0x308>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a6e:	f7f8 fd7b 	bl	8000568 <__aeabi_dmul>
 8007a72:	4606      	mov	r6, r0
 8007a74:	460f      	mov	r7, r1
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	f7f8 fbbb 	bl	80001f8 <__aeabi_dsub>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4682      	mov	sl, r0
 8007a88:	468b      	mov	fp, r1
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	f7f8 fbb3 	bl	80001f8 <__aeabi_dsub>
 8007a92:	4632      	mov	r2, r6
 8007a94:	463b      	mov	r3, r7
 8007a96:	f7f8 fbaf 	bl	80001f8 <__aeabi_dsub>
 8007a9a:	a31b      	add	r3, pc, #108	; (adr r3, 8007b08 <__ieee754_rem_pio2+0x310>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	460f      	mov	r7, r1
 8007aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aa8:	f7f8 fd5e 	bl	8000568 <__aeabi_dmul>
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	f7f8 fba2 	bl	80001f8 <__aeabi_dsub>
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	460f      	mov	r7, r1
 8007ab8:	e764      	b.n	8007984 <__ieee754_rem_pio2+0x18c>
 8007aba:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <__ieee754_rem_pio2+0x330>)
 8007abc:	4598      	cmp	r8, r3
 8007abe:	dd35      	ble.n	8007b2c <__ieee754_rem_pio2+0x334>
 8007ac0:	ee10 2a10 	vmov	r2, s0
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	4639      	mov	r1, r7
 8007aca:	f7f8 fb95 	bl	80001f8 <__aeabi_dsub>
 8007ace:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ad2:	e9c4 0100 	strd	r0, r1, [r4]
 8007ad6:	e6a1      	b.n	800781c <__ieee754_rem_pio2+0x24>
 8007ad8:	54400000 	.word	0x54400000
 8007adc:	3ff921fb 	.word	0x3ff921fb
 8007ae0:	1a626331 	.word	0x1a626331
 8007ae4:	3dd0b461 	.word	0x3dd0b461
 8007ae8:	1a600000 	.word	0x1a600000
 8007aec:	3dd0b461 	.word	0x3dd0b461
 8007af0:	2e037073 	.word	0x2e037073
 8007af4:	3ba3198a 	.word	0x3ba3198a
 8007af8:	6dc9c883 	.word	0x6dc9c883
 8007afc:	3fe45f30 	.word	0x3fe45f30
 8007b00:	2e000000 	.word	0x2e000000
 8007b04:	3ba3198a 	.word	0x3ba3198a
 8007b08:	252049c1 	.word	0x252049c1
 8007b0c:	397b839a 	.word	0x397b839a
 8007b10:	3fe921fb 	.word	0x3fe921fb
 8007b14:	4002d97b 	.word	0x4002d97b
 8007b18:	3ff921fb 	.word	0x3ff921fb
 8007b1c:	413921fb 	.word	0x413921fb
 8007b20:	3fe00000 	.word	0x3fe00000
 8007b24:	08008808 	.word	0x08008808
 8007b28:	7fefffff 	.word	0x7fefffff
 8007b2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007b30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007b34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007b38:	4630      	mov	r0, r6
 8007b3a:	460f      	mov	r7, r1
 8007b3c:	f7f8 ffae 	bl	8000a9c <__aeabi_d2iz>
 8007b40:	f7f8 fca8 	bl	8000494 <__aeabi_i2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b50:	f7f8 fb52 	bl	80001f8 <__aeabi_dsub>
 8007b54:	2200      	movs	r2, #0
 8007b56:	4b1f      	ldr	r3, [pc, #124]	; (8007bd4 <__ieee754_rem_pio2+0x3dc>)
 8007b58:	f7f8 fd06 	bl	8000568 <__aeabi_dmul>
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	4606      	mov	r6, r0
 8007b60:	f7f8 ff9c 	bl	8000a9c <__aeabi_d2iz>
 8007b64:	f7f8 fc96 	bl	8000494 <__aeabi_i2d>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b74:	f7f8 fb40 	bl	80001f8 <__aeabi_dsub>
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <__ieee754_rem_pio2+0x3dc>)
 8007b7c:	f7f8 fcf4 	bl	8000568 <__aeabi_dmul>
 8007b80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007b88:	f04f 0803 	mov.w	r8, #3
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	2700      	movs	r7, #0
 8007b90:	4632      	mov	r2, r6
 8007b92:	463b      	mov	r3, r7
 8007b94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8007b9c:	f7f8 ff4c 	bl	8000a38 <__aeabi_dcmpeq>
 8007ba0:	b9b0      	cbnz	r0, 8007bd0 <__ieee754_rem_pio2+0x3d8>
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <__ieee754_rem_pio2+0x3e0>)
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	462a      	mov	r2, r5
 8007bac:	4643      	mov	r3, r8
 8007bae:	4621      	mov	r1, r4
 8007bb0:	a806      	add	r0, sp, #24
 8007bb2:	f000 f8dd 	bl	8007d70 <__kernel_rem_pio2>
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	4605      	mov	r5, r0
 8007bbc:	f6bf ae58 	bge.w	8007870 <__ieee754_rem_pio2+0x78>
 8007bc0:	6863      	ldr	r3, [r4, #4]
 8007bc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bc6:	6063      	str	r3, [r4, #4]
 8007bc8:	68e3      	ldr	r3, [r4, #12]
 8007bca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bce:	e746      	b.n	8007a5e <__ieee754_rem_pio2+0x266>
 8007bd0:	46d0      	mov	r8, sl
 8007bd2:	e7dd      	b.n	8007b90 <__ieee754_rem_pio2+0x398>
 8007bd4:	41700000 	.word	0x41700000
 8007bd8:	08008888 	.word	0x08008888
 8007bdc:	00000000 	.word	0x00000000

08007be0 <__kernel_cos>:
 8007be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	ec59 8b10 	vmov	r8, r9, d0
 8007be8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007bec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007bf0:	ed2d 8b02 	vpush	{d8}
 8007bf4:	eeb0 8a41 	vmov.f32	s16, s2
 8007bf8:	eef0 8a61 	vmov.f32	s17, s3
 8007bfc:	da07      	bge.n	8007c0e <__kernel_cos+0x2e>
 8007bfe:	ee10 0a10 	vmov	r0, s0
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 ff4a 	bl	8000a9c <__aeabi_d2iz>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f000 8089 	beq.w	8007d20 <__kernel_cos+0x140>
 8007c0e:	4642      	mov	r2, r8
 8007c10:	464b      	mov	r3, r9
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f8 fca7 	bl	8000568 <__aeabi_dmul>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4b4e      	ldr	r3, [pc, #312]	; (8007d58 <__kernel_cos+0x178>)
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	f7f8 fca1 	bl	8000568 <__aeabi_dmul>
 8007c26:	a340      	add	r3, pc, #256	; (adr r3, 8007d28 <__kernel_cos+0x148>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	468b      	mov	fp, r1
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fc98 	bl	8000568 <__aeabi_dmul>
 8007c38:	a33d      	add	r3, pc, #244	; (adr r3, 8007d30 <__kernel_cos+0x150>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fadd 	bl	80001fc <__adddf3>
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	f7f8 fc8f 	bl	8000568 <__aeabi_dmul>
 8007c4a:	a33b      	add	r3, pc, #236	; (adr r3, 8007d38 <__kernel_cos+0x158>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 fad2 	bl	80001f8 <__aeabi_dsub>
 8007c54:	4622      	mov	r2, r4
 8007c56:	462b      	mov	r3, r5
 8007c58:	f7f8 fc86 	bl	8000568 <__aeabi_dmul>
 8007c5c:	a338      	add	r3, pc, #224	; (adr r3, 8007d40 <__kernel_cos+0x160>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 facb 	bl	80001fc <__adddf3>
 8007c66:	4622      	mov	r2, r4
 8007c68:	462b      	mov	r3, r5
 8007c6a:	f7f8 fc7d 	bl	8000568 <__aeabi_dmul>
 8007c6e:	a336      	add	r3, pc, #216	; (adr r3, 8007d48 <__kernel_cos+0x168>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fac0 	bl	80001f8 <__aeabi_dsub>
 8007c78:	4622      	mov	r2, r4
 8007c7a:	462b      	mov	r3, r5
 8007c7c:	f7f8 fc74 	bl	8000568 <__aeabi_dmul>
 8007c80:	a333      	add	r3, pc, #204	; (adr r3, 8007d50 <__kernel_cos+0x170>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fab9 	bl	80001fc <__adddf3>
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	f7f8 fc6b 	bl	8000568 <__aeabi_dmul>
 8007c92:	4622      	mov	r2, r4
 8007c94:	462b      	mov	r3, r5
 8007c96:	f7f8 fc67 	bl	8000568 <__aeabi_dmul>
 8007c9a:	ec53 2b18 	vmov	r2, r3, d8
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	f7f8 fc5f 	bl	8000568 <__aeabi_dmul>
 8007caa:	460b      	mov	r3, r1
 8007cac:	4602      	mov	r2, r0
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f7f8 faa1 	bl	80001f8 <__aeabi_dsub>
 8007cb6:	4b29      	ldr	r3, [pc, #164]	; (8007d5c <__kernel_cos+0x17c>)
 8007cb8:	429e      	cmp	r6, r3
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4689      	mov	r9, r1
 8007cbe:	dc11      	bgt.n	8007ce4 <__kernel_cos+0x104>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4650      	mov	r0, sl
 8007cc6:	4659      	mov	r1, fp
 8007cc8:	f7f8 fa96 	bl	80001f8 <__aeabi_dsub>
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4924      	ldr	r1, [pc, #144]	; (8007d60 <__kernel_cos+0x180>)
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	f7f8 fa90 	bl	80001f8 <__aeabi_dsub>
 8007cd8:	ecbd 8b02 	vpop	{d8}
 8007cdc:	ec41 0b10 	vmov	d0, r0, r1
 8007ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <__kernel_cos+0x184>)
 8007ce6:	491e      	ldr	r1, [pc, #120]	; (8007d60 <__kernel_cos+0x180>)
 8007ce8:	429e      	cmp	r6, r3
 8007cea:	bfcc      	ite	gt
 8007cec:	4d1e      	ldrgt	r5, [pc, #120]	; (8007d68 <__kernel_cos+0x188>)
 8007cee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007cf2:	2400      	movs	r4, #0
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f7f8 fa7d 	bl	80001f8 <__aeabi_dsub>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4606      	mov	r6, r0
 8007d02:	460f      	mov	r7, r1
 8007d04:	462b      	mov	r3, r5
 8007d06:	4650      	mov	r0, sl
 8007d08:	4659      	mov	r1, fp
 8007d0a:	f7f8 fa75 	bl	80001f8 <__aeabi_dsub>
 8007d0e:	4642      	mov	r2, r8
 8007d10:	464b      	mov	r3, r9
 8007d12:	f7f8 fa71 	bl	80001f8 <__aeabi_dsub>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	e7d9      	b.n	8007cd4 <__kernel_cos+0xf4>
 8007d20:	2000      	movs	r0, #0
 8007d22:	490f      	ldr	r1, [pc, #60]	; (8007d60 <__kernel_cos+0x180>)
 8007d24:	e7d8      	b.n	8007cd8 <__kernel_cos+0xf8>
 8007d26:	bf00      	nop
 8007d28:	be8838d4 	.word	0xbe8838d4
 8007d2c:	bda8fae9 	.word	0xbda8fae9
 8007d30:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d34:	3e21ee9e 	.word	0x3e21ee9e
 8007d38:	809c52ad 	.word	0x809c52ad
 8007d3c:	3e927e4f 	.word	0x3e927e4f
 8007d40:	19cb1590 	.word	0x19cb1590
 8007d44:	3efa01a0 	.word	0x3efa01a0
 8007d48:	16c15177 	.word	0x16c15177
 8007d4c:	3f56c16c 	.word	0x3f56c16c
 8007d50:	5555554c 	.word	0x5555554c
 8007d54:	3fa55555 	.word	0x3fa55555
 8007d58:	3fe00000 	.word	0x3fe00000
 8007d5c:	3fd33332 	.word	0x3fd33332
 8007d60:	3ff00000 	.word	0x3ff00000
 8007d64:	3fe90000 	.word	0x3fe90000
 8007d68:	3fd20000 	.word	0x3fd20000
 8007d6c:	00000000 	.word	0x00000000

08007d70 <__kernel_rem_pio2>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	ed2d 8b02 	vpush	{d8}
 8007d78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007d7c:	1ed4      	subs	r4, r2, #3
 8007d7e:	9308      	str	r3, [sp, #32]
 8007d80:	9101      	str	r1, [sp, #4]
 8007d82:	4bc5      	ldr	r3, [pc, #788]	; (8008098 <__kernel_rem_pio2+0x328>)
 8007d84:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007d86:	9009      	str	r0, [sp, #36]	; 0x24
 8007d88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	9b08      	ldr	r3, [sp, #32]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	9307      	str	r3, [sp, #28]
 8007d94:	2318      	movs	r3, #24
 8007d96:	fb94 f4f3 	sdiv	r4, r4, r3
 8007d9a:	f06f 0317 	mvn.w	r3, #23
 8007d9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007da2:	fb04 3303 	mla	r3, r4, r3, r3
 8007da6:	eb03 0a02 	add.w	sl, r3, r2
 8007daa:	9b04      	ldr	r3, [sp, #16]
 8007dac:	9a07      	ldr	r2, [sp, #28]
 8007dae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008088 <__kernel_rem_pio2+0x318>
 8007db2:	eb03 0802 	add.w	r8, r3, r2
 8007db6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007db8:	1aa7      	subs	r7, r4, r2
 8007dba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007dbe:	ae22      	add	r6, sp, #136	; 0x88
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	4545      	cmp	r5, r8
 8007dc4:	dd13      	ble.n	8007dee <__kernel_rem_pio2+0x7e>
 8007dc6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008088 <__kernel_rem_pio2+0x318>
 8007dca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007dce:	2600      	movs	r6, #0
 8007dd0:	9b04      	ldr	r3, [sp, #16]
 8007dd2:	429e      	cmp	r6, r3
 8007dd4:	dc32      	bgt.n	8007e3c <__kernel_rem_pio2+0xcc>
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	9302      	str	r3, [sp, #8]
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	199d      	adds	r5, r3, r6
 8007dde:	ab22      	add	r3, sp, #136	; 0x88
 8007de0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007de4:	9306      	str	r3, [sp, #24]
 8007de6:	ec59 8b18 	vmov	r8, r9, d8
 8007dea:	2700      	movs	r7, #0
 8007dec:	e01f      	b.n	8007e2e <__kernel_rem_pio2+0xbe>
 8007dee:	42ef      	cmn	r7, r5
 8007df0:	d407      	bmi.n	8007e02 <__kernel_rem_pio2+0x92>
 8007df2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007df6:	f7f8 fb4d 	bl	8000494 <__aeabi_i2d>
 8007dfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007dfe:	3501      	adds	r5, #1
 8007e00:	e7df      	b.n	8007dc2 <__kernel_rem_pio2+0x52>
 8007e02:	ec51 0b18 	vmov	r0, r1, d8
 8007e06:	e7f8      	b.n	8007dfa <__kernel_rem_pio2+0x8a>
 8007e08:	9906      	ldr	r1, [sp, #24]
 8007e0a:	9d02      	ldr	r5, [sp, #8]
 8007e0c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007e10:	9106      	str	r1, [sp, #24]
 8007e12:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007e16:	9502      	str	r5, [sp, #8]
 8007e18:	f7f8 fba6 	bl	8000568 <__aeabi_dmul>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f7f8 f9ea 	bl	80001fc <__adddf3>
 8007e28:	3701      	adds	r7, #1
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	4689      	mov	r9, r1
 8007e2e:	9b07      	ldr	r3, [sp, #28]
 8007e30:	429f      	cmp	r7, r3
 8007e32:	dde9      	ble.n	8007e08 <__kernel_rem_pio2+0x98>
 8007e34:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7c9      	b.n	8007dd0 <__kernel_rem_pio2+0x60>
 8007e3c:	9b04      	ldr	r3, [sp, #16]
 8007e3e:	aa0e      	add	r2, sp, #56	; 0x38
 8007e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e44:	930c      	str	r3, [sp, #48]	; 0x30
 8007e46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007e48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e4c:	9c04      	ldr	r4, [sp, #16]
 8007e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e50:	ab9a      	add	r3, sp, #616	; 0x268
 8007e52:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007e56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e5e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007e62:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007e66:	ab9a      	add	r3, sp, #616	; 0x268
 8007e68:	445b      	add	r3, fp
 8007e6a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007e6e:	2500      	movs	r5, #0
 8007e70:	1b63      	subs	r3, r4, r5
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dc78      	bgt.n	8007f68 <__kernel_rem_pio2+0x1f8>
 8007e76:	4650      	mov	r0, sl
 8007e78:	ec49 8b10 	vmov	d0, r8, r9
 8007e7c:	f000 fc00 	bl	8008680 <scalbn>
 8007e80:	ec57 6b10 	vmov	r6, r7, d0
 8007e84:	2200      	movs	r2, #0
 8007e86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007e8a:	ee10 0a10 	vmov	r0, s0
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fb6a 	bl	8000568 <__aeabi_dmul>
 8007e94:	ec41 0b10 	vmov	d0, r0, r1
 8007e98:	f000 fb6e 	bl	8008578 <floor>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	ec51 0b10 	vmov	r0, r1, d0
 8007ea2:	4b7e      	ldr	r3, [pc, #504]	; (800809c <__kernel_rem_pio2+0x32c>)
 8007ea4:	f7f8 fb60 	bl	8000568 <__aeabi_dmul>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4630      	mov	r0, r6
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f7f8 f9a2 	bl	80001f8 <__aeabi_dsub>
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	f7f8 fdf0 	bl	8000a9c <__aeabi_d2iz>
 8007ebc:	9006      	str	r0, [sp, #24]
 8007ebe:	f7f8 fae9 	bl	8000494 <__aeabi_i2d>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 f995 	bl	80001f8 <__aeabi_dsub>
 8007ece:	f1ba 0f00 	cmp.w	sl, #0
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	dd6c      	ble.n	8007fb2 <__kernel_rem_pio2+0x242>
 8007ed8:	1e62      	subs	r2, r4, #1
 8007eda:	ab0e      	add	r3, sp, #56	; 0x38
 8007edc:	f1ca 0118 	rsb	r1, sl, #24
 8007ee0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007ee4:	9d06      	ldr	r5, [sp, #24]
 8007ee6:	fa40 f301 	asr.w	r3, r0, r1
 8007eea:	441d      	add	r5, r3
 8007eec:	408b      	lsls	r3, r1
 8007eee:	1ac0      	subs	r0, r0, r3
 8007ef0:	ab0e      	add	r3, sp, #56	; 0x38
 8007ef2:	9506      	str	r5, [sp, #24]
 8007ef4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007ef8:	f1ca 0317 	rsb	r3, sl, #23
 8007efc:	fa40 f303 	asr.w	r3, r0, r3
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dd62      	ble.n	8007fce <__kernel_rem_pio2+0x25e>
 8007f08:	9b06      	ldr	r3, [sp, #24]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	9306      	str	r3, [sp, #24]
 8007f10:	4615      	mov	r5, r2
 8007f12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f16:	4294      	cmp	r4, r2
 8007f18:	f300 8095 	bgt.w	8008046 <__kernel_rem_pio2+0x2d6>
 8007f1c:	f1ba 0f00 	cmp.w	sl, #0
 8007f20:	dd07      	ble.n	8007f32 <__kernel_rem_pio2+0x1c2>
 8007f22:	f1ba 0f01 	cmp.w	sl, #1
 8007f26:	f000 80a2 	beq.w	800806e <__kernel_rem_pio2+0x2fe>
 8007f2a:	f1ba 0f02 	cmp.w	sl, #2
 8007f2e:	f000 80c1 	beq.w	80080b4 <__kernel_rem_pio2+0x344>
 8007f32:	9b02      	ldr	r3, [sp, #8]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d14a      	bne.n	8007fce <__kernel_rem_pio2+0x25e>
 8007f38:	4632      	mov	r2, r6
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	4958      	ldr	r1, [pc, #352]	; (80080a0 <__kernel_rem_pio2+0x330>)
 8007f40:	f7f8 f95a 	bl	80001f8 <__aeabi_dsub>
 8007f44:	4606      	mov	r6, r0
 8007f46:	460f      	mov	r7, r1
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	d040      	beq.n	8007fce <__kernel_rem_pio2+0x25e>
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008090 <__kernel_rem_pio2+0x320>
 8007f52:	f000 fb95 	bl	8008680 <scalbn>
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	ec53 2b10 	vmov	r2, r3, d0
 8007f5e:	f7f8 f94b 	bl	80001f8 <__aeabi_dsub>
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	e032      	b.n	8007fce <__kernel_rem_pio2+0x25e>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4b4e      	ldr	r3, [pc, #312]	; (80080a4 <__kernel_rem_pio2+0x334>)
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	f7f8 fafa 	bl	8000568 <__aeabi_dmul>
 8007f74:	f7f8 fd92 	bl	8000a9c <__aeabi_d2iz>
 8007f78:	f7f8 fa8c 	bl	8000494 <__aeabi_i2d>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4b4a      	ldr	r3, [pc, #296]	; (80080a8 <__kernel_rem_pio2+0x338>)
 8007f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f84:	f7f8 faf0 	bl	8000568 <__aeabi_dmul>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	4649      	mov	r1, r9
 8007f90:	f7f8 f932 	bl	80001f8 <__aeabi_dsub>
 8007f94:	f7f8 fd82 	bl	8000a9c <__aeabi_d2iz>
 8007f98:	ab0e      	add	r3, sp, #56	; 0x38
 8007f9a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007f9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa6:	f7f8 f929 	bl	80001fc <__adddf3>
 8007faa:	3501      	adds	r5, #1
 8007fac:	4680      	mov	r8, r0
 8007fae:	4689      	mov	r9, r1
 8007fb0:	e75e      	b.n	8007e70 <__kernel_rem_pio2+0x100>
 8007fb2:	d105      	bne.n	8007fc0 <__kernel_rem_pio2+0x250>
 8007fb4:	1e63      	subs	r3, r4, #1
 8007fb6:	aa0e      	add	r2, sp, #56	; 0x38
 8007fb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007fbc:	15c3      	asrs	r3, r0, #23
 8007fbe:	e79f      	b.n	8007f00 <__kernel_rem_pio2+0x190>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4b3a      	ldr	r3, [pc, #232]	; (80080ac <__kernel_rem_pio2+0x33c>)
 8007fc4:	f7f8 fd56 	bl	8000a74 <__aeabi_dcmpge>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d139      	bne.n	8008040 <__kernel_rem_pio2+0x2d0>
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	f7f8 fd2f 	bl	8000a38 <__aeabi_dcmpeq>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f000 80c7 	beq.w	800816e <__kernel_rem_pio2+0x3fe>
 8007fe0:	1e65      	subs	r5, r4, #1
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	9904      	ldr	r1, [sp, #16]
 8007fe8:	428b      	cmp	r3, r1
 8007fea:	da6a      	bge.n	80080c2 <__kernel_rem_pio2+0x352>
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	f000 8088 	beq.w	8008102 <__kernel_rem_pio2+0x392>
 8007ff2:	ab0e      	add	r3, sp, #56	; 0x38
 8007ff4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007ff8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80b4 	beq.w	800816a <__kernel_rem_pio2+0x3fa>
 8008002:	4650      	mov	r0, sl
 8008004:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008090 <__kernel_rem_pio2+0x320>
 8008008:	f000 fb3a 	bl	8008680 <scalbn>
 800800c:	00ec      	lsls	r4, r5, #3
 800800e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008010:	191e      	adds	r6, r3, r4
 8008012:	ec59 8b10 	vmov	r8, r9, d0
 8008016:	f106 0a08 	add.w	sl, r6, #8
 800801a:	462f      	mov	r7, r5
 800801c:	2f00      	cmp	r7, #0
 800801e:	f280 80df 	bge.w	80081e0 <__kernel_rem_pio2+0x470>
 8008022:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008088 <__kernel_rem_pio2+0x318>
 8008026:	f04f 0a00 	mov.w	sl, #0
 800802a:	eba5 030a 	sub.w	r3, r5, sl
 800802e:	2b00      	cmp	r3, #0
 8008030:	f2c0 810a 	blt.w	8008248 <__kernel_rem_pio2+0x4d8>
 8008034:	f8df b078 	ldr.w	fp, [pc, #120]	; 80080b0 <__kernel_rem_pio2+0x340>
 8008038:	ec59 8b18 	vmov	r8, r9, d8
 800803c:	2700      	movs	r7, #0
 800803e:	e0f5      	b.n	800822c <__kernel_rem_pio2+0x4bc>
 8008040:	2302      	movs	r3, #2
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	e760      	b.n	8007f08 <__kernel_rem_pio2+0x198>
 8008046:	ab0e      	add	r3, sp, #56	; 0x38
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	b94d      	cbnz	r5, 8008062 <__kernel_rem_pio2+0x2f2>
 800804e:	b12b      	cbz	r3, 800805c <__kernel_rem_pio2+0x2ec>
 8008050:	a80e      	add	r0, sp, #56	; 0x38
 8008052:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008056:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800805a:	2301      	movs	r3, #1
 800805c:	3201      	adds	r2, #1
 800805e:	461d      	mov	r5, r3
 8008060:	e759      	b.n	8007f16 <__kernel_rem_pio2+0x1a6>
 8008062:	a80e      	add	r0, sp, #56	; 0x38
 8008064:	1acb      	subs	r3, r1, r3
 8008066:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800806a:	462b      	mov	r3, r5
 800806c:	e7f6      	b.n	800805c <__kernel_rem_pio2+0x2ec>
 800806e:	1e62      	subs	r2, r4, #1
 8008070:	ab0e      	add	r3, sp, #56	; 0x38
 8008072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008076:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800807a:	a90e      	add	r1, sp, #56	; 0x38
 800807c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008080:	e757      	b.n	8007f32 <__kernel_rem_pio2+0x1c2>
 8008082:	bf00      	nop
 8008084:	f3af 8000 	nop.w
	...
 8008094:	3ff00000 	.word	0x3ff00000
 8008098:	080089d0 	.word	0x080089d0
 800809c:	40200000 	.word	0x40200000
 80080a0:	3ff00000 	.word	0x3ff00000
 80080a4:	3e700000 	.word	0x3e700000
 80080a8:	41700000 	.word	0x41700000
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	08008990 	.word	0x08008990
 80080b4:	1e62      	subs	r2, r4, #1
 80080b6:	ab0e      	add	r3, sp, #56	; 0x38
 80080b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80080c0:	e7db      	b.n	800807a <__kernel_rem_pio2+0x30a>
 80080c2:	a90e      	add	r1, sp, #56	; 0x38
 80080c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	430a      	orrs	r2, r1
 80080cc:	e78b      	b.n	8007fe6 <__kernel_rem_pio2+0x276>
 80080ce:	3301      	adds	r3, #1
 80080d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80080d4:	2900      	cmp	r1, #0
 80080d6:	d0fa      	beq.n	80080ce <__kernel_rem_pio2+0x35e>
 80080d8:	9a08      	ldr	r2, [sp, #32]
 80080da:	4422      	add	r2, r4
 80080dc:	00d2      	lsls	r2, r2, #3
 80080de:	a922      	add	r1, sp, #136	; 0x88
 80080e0:	18e3      	adds	r3, r4, r3
 80080e2:	9206      	str	r2, [sp, #24]
 80080e4:	440a      	add	r2, r1
 80080e6:	9302      	str	r3, [sp, #8]
 80080e8:	f10b 0108 	add.w	r1, fp, #8
 80080ec:	f102 0308 	add.w	r3, r2, #8
 80080f0:	1c66      	adds	r6, r4, #1
 80080f2:	910a      	str	r1, [sp, #40]	; 0x28
 80080f4:	2500      	movs	r5, #0
 80080f6:	930d      	str	r3, [sp, #52]	; 0x34
 80080f8:	9b02      	ldr	r3, [sp, #8]
 80080fa:	42b3      	cmp	r3, r6
 80080fc:	da04      	bge.n	8008108 <__kernel_rem_pio2+0x398>
 80080fe:	461c      	mov	r4, r3
 8008100:	e6a6      	b.n	8007e50 <__kernel_rem_pio2+0xe0>
 8008102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008104:	2301      	movs	r3, #1
 8008106:	e7e3      	b.n	80080d0 <__kernel_rem_pio2+0x360>
 8008108:	9b06      	ldr	r3, [sp, #24]
 800810a:	18ef      	adds	r7, r5, r3
 800810c:	ab22      	add	r3, sp, #136	; 0x88
 800810e:	441f      	add	r7, r3
 8008110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008112:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008116:	f7f8 f9bd 	bl	8000494 <__aeabi_i2d>
 800811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811c:	461c      	mov	r4, r3
 800811e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008120:	e9c7 0100 	strd	r0, r1, [r7]
 8008124:	eb03 0b05 	add.w	fp, r3, r5
 8008128:	2700      	movs	r7, #0
 800812a:	f04f 0800 	mov.w	r8, #0
 800812e:	f04f 0900 	mov.w	r9, #0
 8008132:	9b07      	ldr	r3, [sp, #28]
 8008134:	429f      	cmp	r7, r3
 8008136:	dd08      	ble.n	800814a <__kernel_rem_pio2+0x3da>
 8008138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813a:	aa72      	add	r2, sp, #456	; 0x1c8
 800813c:	18eb      	adds	r3, r5, r3
 800813e:	4413      	add	r3, r2
 8008140:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8008144:	3601      	adds	r6, #1
 8008146:	3508      	adds	r5, #8
 8008148:	e7d6      	b.n	80080f8 <__kernel_rem_pio2+0x388>
 800814a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800814e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008152:	f7f8 fa09 	bl	8000568 <__aeabi_dmul>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4640      	mov	r0, r8
 800815c:	4649      	mov	r1, r9
 800815e:	f7f8 f84d 	bl	80001fc <__adddf3>
 8008162:	3701      	adds	r7, #1
 8008164:	4680      	mov	r8, r0
 8008166:	4689      	mov	r9, r1
 8008168:	e7e3      	b.n	8008132 <__kernel_rem_pio2+0x3c2>
 800816a:	3d01      	subs	r5, #1
 800816c:	e741      	b.n	8007ff2 <__kernel_rem_pio2+0x282>
 800816e:	f1ca 0000 	rsb	r0, sl, #0
 8008172:	ec47 6b10 	vmov	d0, r6, r7
 8008176:	f000 fa83 	bl	8008680 <scalbn>
 800817a:	ec57 6b10 	vmov	r6, r7, d0
 800817e:	2200      	movs	r2, #0
 8008180:	4b99      	ldr	r3, [pc, #612]	; (80083e8 <__kernel_rem_pio2+0x678>)
 8008182:	ee10 0a10 	vmov	r0, s0
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fc74 	bl	8000a74 <__aeabi_dcmpge>
 800818c:	b1f8      	cbz	r0, 80081ce <__kernel_rem_pio2+0x45e>
 800818e:	2200      	movs	r2, #0
 8008190:	4b96      	ldr	r3, [pc, #600]	; (80083ec <__kernel_rem_pio2+0x67c>)
 8008192:	4630      	mov	r0, r6
 8008194:	4639      	mov	r1, r7
 8008196:	f7f8 f9e7 	bl	8000568 <__aeabi_dmul>
 800819a:	f7f8 fc7f 	bl	8000a9c <__aeabi_d2iz>
 800819e:	4680      	mov	r8, r0
 80081a0:	f7f8 f978 	bl	8000494 <__aeabi_i2d>
 80081a4:	2200      	movs	r2, #0
 80081a6:	4b90      	ldr	r3, [pc, #576]	; (80083e8 <__kernel_rem_pio2+0x678>)
 80081a8:	f7f8 f9de 	bl	8000568 <__aeabi_dmul>
 80081ac:	460b      	mov	r3, r1
 80081ae:	4602      	mov	r2, r0
 80081b0:	4639      	mov	r1, r7
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7f8 f820 	bl	80001f8 <__aeabi_dsub>
 80081b8:	f7f8 fc70 	bl	8000a9c <__aeabi_d2iz>
 80081bc:	1c65      	adds	r5, r4, #1
 80081be:	ab0e      	add	r3, sp, #56	; 0x38
 80081c0:	f10a 0a18 	add.w	sl, sl, #24
 80081c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80081cc:	e719      	b.n	8008002 <__kernel_rem_pio2+0x292>
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	f7f8 fc63 	bl	8000a9c <__aeabi_d2iz>
 80081d6:	ab0e      	add	r3, sp, #56	; 0x38
 80081d8:	4625      	mov	r5, r4
 80081da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081de:	e710      	b.n	8008002 <__kernel_rem_pio2+0x292>
 80081e0:	ab0e      	add	r3, sp, #56	; 0x38
 80081e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80081e6:	f7f8 f955 	bl	8000494 <__aeabi_i2d>
 80081ea:	4642      	mov	r2, r8
 80081ec:	464b      	mov	r3, r9
 80081ee:	f7f8 f9bb 	bl	8000568 <__aeabi_dmul>
 80081f2:	2200      	movs	r2, #0
 80081f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80081f8:	4b7c      	ldr	r3, [pc, #496]	; (80083ec <__kernel_rem_pio2+0x67c>)
 80081fa:	4640      	mov	r0, r8
 80081fc:	4649      	mov	r1, r9
 80081fe:	f7f8 f9b3 	bl	8000568 <__aeabi_dmul>
 8008202:	3f01      	subs	r7, #1
 8008204:	4680      	mov	r8, r0
 8008206:	4689      	mov	r9, r1
 8008208:	e708      	b.n	800801c <__kernel_rem_pio2+0x2ac>
 800820a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8008216:	f7f8 f9a7 	bl	8000568 <__aeabi_dmul>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4640      	mov	r0, r8
 8008220:	4649      	mov	r1, r9
 8008222:	f7f7 ffeb 	bl	80001fc <__adddf3>
 8008226:	3701      	adds	r7, #1
 8008228:	4680      	mov	r8, r0
 800822a:	4689      	mov	r9, r1
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	429f      	cmp	r7, r3
 8008230:	dc01      	bgt.n	8008236 <__kernel_rem_pio2+0x4c6>
 8008232:	45ba      	cmp	sl, r7
 8008234:	dae9      	bge.n	800820a <__kernel_rem_pio2+0x49a>
 8008236:	ab4a      	add	r3, sp, #296	; 0x128
 8008238:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800823c:	e9c3 8900 	strd	r8, r9, [r3]
 8008240:	f10a 0a01 	add.w	sl, sl, #1
 8008244:	3e08      	subs	r6, #8
 8008246:	e6f0      	b.n	800802a <__kernel_rem_pio2+0x2ba>
 8008248:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800824a:	2b03      	cmp	r3, #3
 800824c:	d85b      	bhi.n	8008306 <__kernel_rem_pio2+0x596>
 800824e:	e8df f003 	tbb	[pc, r3]
 8008252:	264a      	.short	0x264a
 8008254:	0226      	.short	0x0226
 8008256:	ab9a      	add	r3, sp, #616	; 0x268
 8008258:	441c      	add	r4, r3
 800825a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800825e:	46a2      	mov	sl, r4
 8008260:	46ab      	mov	fp, r5
 8008262:	f1bb 0f00 	cmp.w	fp, #0
 8008266:	dc6c      	bgt.n	8008342 <__kernel_rem_pio2+0x5d2>
 8008268:	46a2      	mov	sl, r4
 800826a:	46ab      	mov	fp, r5
 800826c:	f1bb 0f01 	cmp.w	fp, #1
 8008270:	f300 8086 	bgt.w	8008380 <__kernel_rem_pio2+0x610>
 8008274:	2000      	movs	r0, #0
 8008276:	2100      	movs	r1, #0
 8008278:	2d01      	cmp	r5, #1
 800827a:	f300 80a0 	bgt.w	80083be <__kernel_rem_pio2+0x64e>
 800827e:	9b02      	ldr	r3, [sp, #8]
 8008280:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008284:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 809e 	bne.w	80083ca <__kernel_rem_pio2+0x65a>
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	e9c3 7800 	strd	r7, r8, [r3]
 8008294:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008298:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800829c:	e033      	b.n	8008306 <__kernel_rem_pio2+0x596>
 800829e:	3408      	adds	r4, #8
 80082a0:	ab4a      	add	r3, sp, #296	; 0x128
 80082a2:	441c      	add	r4, r3
 80082a4:	462e      	mov	r6, r5
 80082a6:	2000      	movs	r0, #0
 80082a8:	2100      	movs	r1, #0
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	da3a      	bge.n	8008324 <__kernel_rem_pio2+0x5b4>
 80082ae:	9b02      	ldr	r3, [sp, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d03d      	beq.n	8008330 <__kernel_rem_pio2+0x5c0>
 80082b4:	4602      	mov	r2, r0
 80082b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ba:	9c01      	ldr	r4, [sp, #4]
 80082bc:	e9c4 2300 	strd	r2, r3, [r4]
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80082c8:	f7f7 ff96 	bl	80001f8 <__aeabi_dsub>
 80082cc:	ae4c      	add	r6, sp, #304	; 0x130
 80082ce:	2401      	movs	r4, #1
 80082d0:	42a5      	cmp	r5, r4
 80082d2:	da30      	bge.n	8008336 <__kernel_rem_pio2+0x5c6>
 80082d4:	9b02      	ldr	r3, [sp, #8]
 80082d6:	b113      	cbz	r3, 80082de <__kernel_rem_pio2+0x56e>
 80082d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082dc:	4619      	mov	r1, r3
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80082e4:	e00f      	b.n	8008306 <__kernel_rem_pio2+0x596>
 80082e6:	ab9a      	add	r3, sp, #616	; 0x268
 80082e8:	441c      	add	r4, r3
 80082ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80082ee:	2000      	movs	r0, #0
 80082f0:	2100      	movs	r1, #0
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	da10      	bge.n	8008318 <__kernel_rem_pio2+0x5a8>
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	b113      	cbz	r3, 8008300 <__kernel_rem_pio2+0x590>
 80082fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082fe:	4619      	mov	r1, r3
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	e9c3 0100 	strd	r0, r1, [r3]
 8008306:	9b06      	ldr	r3, [sp, #24]
 8008308:	f003 0007 	and.w	r0, r3, #7
 800830c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008310:	ecbd 8b02 	vpop	{d8}
 8008314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008318:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800831c:	f7f7 ff6e 	bl	80001fc <__adddf3>
 8008320:	3d01      	subs	r5, #1
 8008322:	e7e6      	b.n	80082f2 <__kernel_rem_pio2+0x582>
 8008324:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008328:	f7f7 ff68 	bl	80001fc <__adddf3>
 800832c:	3e01      	subs	r6, #1
 800832e:	e7bc      	b.n	80082aa <__kernel_rem_pio2+0x53a>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	e7c1      	b.n	80082ba <__kernel_rem_pio2+0x54a>
 8008336:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800833a:	f7f7 ff5f 	bl	80001fc <__adddf3>
 800833e:	3401      	adds	r4, #1
 8008340:	e7c6      	b.n	80082d0 <__kernel_rem_pio2+0x560>
 8008342:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008346:	ed3a 7b02 	vldmdb	sl!, {d7}
 800834a:	4640      	mov	r0, r8
 800834c:	ec53 2b17 	vmov	r2, r3, d7
 8008350:	4649      	mov	r1, r9
 8008352:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008356:	f7f7 ff51 	bl	80001fc <__adddf3>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	4640      	mov	r0, r8
 8008364:	4649      	mov	r1, r9
 8008366:	f7f7 ff47 	bl	80001f8 <__aeabi_dsub>
 800836a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800836e:	f7f7 ff45 	bl	80001fc <__adddf3>
 8008372:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008376:	e9ca 0100 	strd	r0, r1, [sl]
 800837a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800837e:	e770      	b.n	8008262 <__kernel_rem_pio2+0x4f2>
 8008380:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008384:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008388:	4630      	mov	r0, r6
 800838a:	ec53 2b17 	vmov	r2, r3, d7
 800838e:	4639      	mov	r1, r7
 8008390:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008394:	f7f7 ff32 	bl	80001fc <__adddf3>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4680      	mov	r8, r0
 800839e:	4689      	mov	r9, r1
 80083a0:	4630      	mov	r0, r6
 80083a2:	4639      	mov	r1, r7
 80083a4:	f7f7 ff28 	bl	80001f8 <__aeabi_dsub>
 80083a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ac:	f7f7 ff26 	bl	80001fc <__adddf3>
 80083b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083b4:	e9ca 0100 	strd	r0, r1, [sl]
 80083b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80083bc:	e756      	b.n	800826c <__kernel_rem_pio2+0x4fc>
 80083be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80083c2:	f7f7 ff1b 	bl	80001fc <__adddf3>
 80083c6:	3d01      	subs	r5, #1
 80083c8:	e756      	b.n	8008278 <__kernel_rem_pio2+0x508>
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	9a01      	ldr	r2, [sp, #4]
 80083ce:	601f      	str	r7, [r3, #0]
 80083d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80083d4:	605c      	str	r4, [r3, #4]
 80083d6:	609d      	str	r5, [r3, #8]
 80083d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083dc:	60d3      	str	r3, [r2, #12]
 80083de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083e2:	6110      	str	r0, [r2, #16]
 80083e4:	6153      	str	r3, [r2, #20]
 80083e6:	e78e      	b.n	8008306 <__kernel_rem_pio2+0x596>
 80083e8:	41700000 	.word	0x41700000
 80083ec:	3e700000 	.word	0x3e700000

080083f0 <__kernel_sin>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	ec55 4b10 	vmov	r4, r5, d0
 80083f8:	b085      	sub	sp, #20
 80083fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008402:	ed8d 1b00 	vstr	d1, [sp]
 8008406:	9002      	str	r0, [sp, #8]
 8008408:	da06      	bge.n	8008418 <__kernel_sin+0x28>
 800840a:	ee10 0a10 	vmov	r0, s0
 800840e:	4629      	mov	r1, r5
 8008410:	f7f8 fb44 	bl	8000a9c <__aeabi_d2iz>
 8008414:	2800      	cmp	r0, #0
 8008416:	d051      	beq.n	80084bc <__kernel_sin+0xcc>
 8008418:	4622      	mov	r2, r4
 800841a:	462b      	mov	r3, r5
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	f7f8 f8a2 	bl	8000568 <__aeabi_dmul>
 8008424:	4682      	mov	sl, r0
 8008426:	468b      	mov	fp, r1
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4620      	mov	r0, r4
 800842e:	4629      	mov	r1, r5
 8008430:	f7f8 f89a 	bl	8000568 <__aeabi_dmul>
 8008434:	a341      	add	r3, pc, #260	; (adr r3, 800853c <__kernel_sin+0x14c>)
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	4680      	mov	r8, r0
 800843c:	4689      	mov	r9, r1
 800843e:	4650      	mov	r0, sl
 8008440:	4659      	mov	r1, fp
 8008442:	f7f8 f891 	bl	8000568 <__aeabi_dmul>
 8008446:	a33f      	add	r3, pc, #252	; (adr r3, 8008544 <__kernel_sin+0x154>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f7f7 fed4 	bl	80001f8 <__aeabi_dsub>
 8008450:	4652      	mov	r2, sl
 8008452:	465b      	mov	r3, fp
 8008454:	f7f8 f888 	bl	8000568 <__aeabi_dmul>
 8008458:	a33c      	add	r3, pc, #240	; (adr r3, 800854c <__kernel_sin+0x15c>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f7 fecd 	bl	80001fc <__adddf3>
 8008462:	4652      	mov	r2, sl
 8008464:	465b      	mov	r3, fp
 8008466:	f7f8 f87f 	bl	8000568 <__aeabi_dmul>
 800846a:	a33a      	add	r3, pc, #232	; (adr r3, 8008554 <__kernel_sin+0x164>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 fec2 	bl	80001f8 <__aeabi_dsub>
 8008474:	4652      	mov	r2, sl
 8008476:	465b      	mov	r3, fp
 8008478:	f7f8 f876 	bl	8000568 <__aeabi_dmul>
 800847c:	a337      	add	r3, pc, #220	; (adr r3, 800855c <__kernel_sin+0x16c>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 febb 	bl	80001fc <__adddf3>
 8008486:	9b02      	ldr	r3, [sp, #8]
 8008488:	4606      	mov	r6, r0
 800848a:	460f      	mov	r7, r1
 800848c:	b9db      	cbnz	r3, 80084c6 <__kernel_sin+0xd6>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4650      	mov	r0, sl
 8008494:	4659      	mov	r1, fp
 8008496:	f7f8 f867 	bl	8000568 <__aeabi_dmul>
 800849a:	a325      	add	r3, pc, #148	; (adr r3, 8008530 <__kernel_sin+0x140>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f7 feaa 	bl	80001f8 <__aeabi_dsub>
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	f7f8 f85e 	bl	8000568 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4620      	mov	r0, r4
 80084b2:	4629      	mov	r1, r5
 80084b4:	f7f7 fea2 	bl	80001fc <__adddf3>
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	ec45 4b10 	vmov	d0, r4, r5
 80084c0:	b005      	add	sp, #20
 80084c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c6:	2200      	movs	r2, #0
 80084c8:	4b1b      	ldr	r3, [pc, #108]	; (8008538 <__kernel_sin+0x148>)
 80084ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ce:	f7f8 f84b 	bl	8000568 <__aeabi_dmul>
 80084d2:	4632      	mov	r2, r6
 80084d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d8:	463b      	mov	r3, r7
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f8 f843 	bl	8000568 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ea:	f7f7 fe85 	bl	80001f8 <__aeabi_dsub>
 80084ee:	4652      	mov	r2, sl
 80084f0:	465b      	mov	r3, fp
 80084f2:	f7f8 f839 	bl	8000568 <__aeabi_dmul>
 80084f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084fa:	f7f7 fe7d 	bl	80001f8 <__aeabi_dsub>
 80084fe:	a30c      	add	r3, pc, #48	; (adr r3, 8008530 <__kernel_sin+0x140>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	4640      	mov	r0, r8
 800850a:	4649      	mov	r1, r9
 800850c:	f7f8 f82c 	bl	8000568 <__aeabi_dmul>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4630      	mov	r0, r6
 8008516:	4639      	mov	r1, r7
 8008518:	f7f7 fe70 	bl	80001fc <__adddf3>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4620      	mov	r0, r4
 8008522:	4629      	mov	r1, r5
 8008524:	f7f7 fe68 	bl	80001f8 <__aeabi_dsub>
 8008528:	e7c6      	b.n	80084b8 <__kernel_sin+0xc8>
 800852a:	bf00      	nop
 800852c:	f3af 8000 	nop.w
 8008530:	55555549 	.word	0x55555549
 8008534:	3fc55555 	.word	0x3fc55555
 8008538:	3fe00000 	.word	0x3fe00000
 800853c:	5acfd57c 	.word	0x5acfd57c
 8008540:	3de5d93a 	.word	0x3de5d93a
 8008544:	8a2b9ceb 	.word	0x8a2b9ceb
 8008548:	3e5ae5e6 	.word	0x3e5ae5e6
 800854c:	57b1fe7d 	.word	0x57b1fe7d
 8008550:	3ec71de3 	.word	0x3ec71de3
 8008554:	19c161d5 	.word	0x19c161d5
 8008558:	3f2a01a0 	.word	0x3f2a01a0
 800855c:	1110f8a6 	.word	0x1110f8a6
 8008560:	3f811111 	.word	0x3f811111

08008564 <fabs>:
 8008564:	ec51 0b10 	vmov	r0, r1, d0
 8008568:	ee10 2a10 	vmov	r2, s0
 800856c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008570:	ec43 2b10 	vmov	d0, r2, r3
 8008574:	4770      	bx	lr
	...

08008578 <floor>:
 8008578:	ec51 0b10 	vmov	r0, r1, d0
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008584:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008588:	2e13      	cmp	r6, #19
 800858a:	460c      	mov	r4, r1
 800858c:	ee10 5a10 	vmov	r5, s0
 8008590:	4680      	mov	r8, r0
 8008592:	dc34      	bgt.n	80085fe <floor+0x86>
 8008594:	2e00      	cmp	r6, #0
 8008596:	da16      	bge.n	80085c6 <floor+0x4e>
 8008598:	a335      	add	r3, pc, #212	; (adr r3, 8008670 <floor+0xf8>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f7 fe2d 	bl	80001fc <__adddf3>
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	f7f8 fa6f 	bl	8000a88 <__aeabi_dcmpgt>
 80085aa:	b148      	cbz	r0, 80085c0 <floor+0x48>
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	da59      	bge.n	8008664 <floor+0xec>
 80085b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80085b4:	4a30      	ldr	r2, [pc, #192]	; (8008678 <floor+0x100>)
 80085b6:	432b      	orrs	r3, r5
 80085b8:	2500      	movs	r5, #0
 80085ba:	42ab      	cmp	r3, r5
 80085bc:	bf18      	it	ne
 80085be:	4614      	movne	r4, r2
 80085c0:	4621      	mov	r1, r4
 80085c2:	4628      	mov	r0, r5
 80085c4:	e025      	b.n	8008612 <floor+0x9a>
 80085c6:	4f2d      	ldr	r7, [pc, #180]	; (800867c <floor+0x104>)
 80085c8:	4137      	asrs	r7, r6
 80085ca:	ea01 0307 	and.w	r3, r1, r7
 80085ce:	4303      	orrs	r3, r0
 80085d0:	d01f      	beq.n	8008612 <floor+0x9a>
 80085d2:	a327      	add	r3, pc, #156	; (adr r3, 8008670 <floor+0xf8>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 fe10 	bl	80001fc <__adddf3>
 80085dc:	2200      	movs	r2, #0
 80085de:	2300      	movs	r3, #0
 80085e0:	f7f8 fa52 	bl	8000a88 <__aeabi_dcmpgt>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d0eb      	beq.n	80085c0 <floor+0x48>
 80085e8:	2c00      	cmp	r4, #0
 80085ea:	bfbe      	ittt	lt
 80085ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80085f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80085f4:	19a4      	addlt	r4, r4, r6
 80085f6:	ea24 0407 	bic.w	r4, r4, r7
 80085fa:	2500      	movs	r5, #0
 80085fc:	e7e0      	b.n	80085c0 <floor+0x48>
 80085fe:	2e33      	cmp	r6, #51	; 0x33
 8008600:	dd0b      	ble.n	800861a <floor+0xa2>
 8008602:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008606:	d104      	bne.n	8008612 <floor+0x9a>
 8008608:	ee10 2a10 	vmov	r2, s0
 800860c:	460b      	mov	r3, r1
 800860e:	f7f7 fdf5 	bl	80001fc <__adddf3>
 8008612:	ec41 0b10 	vmov	d0, r0, r1
 8008616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800861a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800861e:	f04f 33ff 	mov.w	r3, #4294967295
 8008622:	fa23 f707 	lsr.w	r7, r3, r7
 8008626:	4207      	tst	r7, r0
 8008628:	d0f3      	beq.n	8008612 <floor+0x9a>
 800862a:	a311      	add	r3, pc, #68	; (adr r3, 8008670 <floor+0xf8>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 fde4 	bl	80001fc <__adddf3>
 8008634:	2200      	movs	r2, #0
 8008636:	2300      	movs	r3, #0
 8008638:	f7f8 fa26 	bl	8000a88 <__aeabi_dcmpgt>
 800863c:	2800      	cmp	r0, #0
 800863e:	d0bf      	beq.n	80085c0 <floor+0x48>
 8008640:	2c00      	cmp	r4, #0
 8008642:	da02      	bge.n	800864a <floor+0xd2>
 8008644:	2e14      	cmp	r6, #20
 8008646:	d103      	bne.n	8008650 <floor+0xd8>
 8008648:	3401      	adds	r4, #1
 800864a:	ea25 0507 	bic.w	r5, r5, r7
 800864e:	e7b7      	b.n	80085c0 <floor+0x48>
 8008650:	2301      	movs	r3, #1
 8008652:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008656:	fa03 f606 	lsl.w	r6, r3, r6
 800865a:	4435      	add	r5, r6
 800865c:	4545      	cmp	r5, r8
 800865e:	bf38      	it	cc
 8008660:	18e4      	addcc	r4, r4, r3
 8008662:	e7f2      	b.n	800864a <floor+0xd2>
 8008664:	2500      	movs	r5, #0
 8008666:	462c      	mov	r4, r5
 8008668:	e7aa      	b.n	80085c0 <floor+0x48>
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w
 8008670:	8800759c 	.word	0x8800759c
 8008674:	7e37e43c 	.word	0x7e37e43c
 8008678:	bff00000 	.word	0xbff00000
 800867c:	000fffff 	.word	0x000fffff

08008680 <scalbn>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	ec55 4b10 	vmov	r4, r5, d0
 8008686:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800868a:	4606      	mov	r6, r0
 800868c:	462b      	mov	r3, r5
 800868e:	b9aa      	cbnz	r2, 80086bc <scalbn+0x3c>
 8008690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008694:	4323      	orrs	r3, r4
 8008696:	d03b      	beq.n	8008710 <scalbn+0x90>
 8008698:	4b31      	ldr	r3, [pc, #196]	; (8008760 <scalbn+0xe0>)
 800869a:	4629      	mov	r1, r5
 800869c:	2200      	movs	r2, #0
 800869e:	ee10 0a10 	vmov	r0, s0
 80086a2:	f7f7 ff61 	bl	8000568 <__aeabi_dmul>
 80086a6:	4b2f      	ldr	r3, [pc, #188]	; (8008764 <scalbn+0xe4>)
 80086a8:	429e      	cmp	r6, r3
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	da12      	bge.n	80086d6 <scalbn+0x56>
 80086b0:	a327      	add	r3, pc, #156	; (adr r3, 8008750 <scalbn+0xd0>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 ff57 	bl	8000568 <__aeabi_dmul>
 80086ba:	e009      	b.n	80086d0 <scalbn+0x50>
 80086bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80086c0:	428a      	cmp	r2, r1
 80086c2:	d10c      	bne.n	80086de <scalbn+0x5e>
 80086c4:	ee10 2a10 	vmov	r2, s0
 80086c8:	4620      	mov	r0, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	f7f7 fd96 	bl	80001fc <__adddf3>
 80086d0:	4604      	mov	r4, r0
 80086d2:	460d      	mov	r5, r1
 80086d4:	e01c      	b.n	8008710 <scalbn+0x90>
 80086d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086da:	460b      	mov	r3, r1
 80086dc:	3a36      	subs	r2, #54	; 0x36
 80086de:	4432      	add	r2, r6
 80086e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80086e4:	428a      	cmp	r2, r1
 80086e6:	dd0b      	ble.n	8008700 <scalbn+0x80>
 80086e8:	ec45 4b11 	vmov	d1, r4, r5
 80086ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008758 <scalbn+0xd8>
 80086f0:	f000 f83c 	bl	800876c <copysign>
 80086f4:	a318      	add	r3, pc, #96	; (adr r3, 8008758 <scalbn+0xd8>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	ec51 0b10 	vmov	r0, r1, d0
 80086fe:	e7da      	b.n	80086b6 <scalbn+0x36>
 8008700:	2a00      	cmp	r2, #0
 8008702:	dd08      	ble.n	8008716 <scalbn+0x96>
 8008704:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008708:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800870c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008710:	ec45 4b10 	vmov	d0, r4, r5
 8008714:	bd70      	pop	{r4, r5, r6, pc}
 8008716:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800871a:	da0d      	bge.n	8008738 <scalbn+0xb8>
 800871c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008720:	429e      	cmp	r6, r3
 8008722:	ec45 4b11 	vmov	d1, r4, r5
 8008726:	dce1      	bgt.n	80086ec <scalbn+0x6c>
 8008728:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008750 <scalbn+0xd0>
 800872c:	f000 f81e 	bl	800876c <copysign>
 8008730:	a307      	add	r3, pc, #28	; (adr r3, 8008750 <scalbn+0xd0>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	e7e0      	b.n	80086fa <scalbn+0x7a>
 8008738:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800873c:	3236      	adds	r2, #54	; 0x36
 800873e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008742:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	2200      	movs	r2, #0
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <scalbn+0xe8>)
 800874e:	e7b2      	b.n	80086b6 <scalbn+0x36>
 8008750:	c2f8f359 	.word	0xc2f8f359
 8008754:	01a56e1f 	.word	0x01a56e1f
 8008758:	8800759c 	.word	0x8800759c
 800875c:	7e37e43c 	.word	0x7e37e43c
 8008760:	43500000 	.word	0x43500000
 8008764:	ffff3cb0 	.word	0xffff3cb0
 8008768:	3c900000 	.word	0x3c900000

0800876c <copysign>:
 800876c:	ec51 0b10 	vmov	r0, r1, d0
 8008770:	ee11 0a90 	vmov	r0, s3
 8008774:	ee10 2a10 	vmov	r2, s0
 8008778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800877c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008780:	ea41 0300 	orr.w	r3, r1, r0
 8008784:	ec43 2b10 	vmov	d0, r2, r3
 8008788:	4770      	bx	lr
	...

0800878c <_init>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr

08008798 <_fini>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr
